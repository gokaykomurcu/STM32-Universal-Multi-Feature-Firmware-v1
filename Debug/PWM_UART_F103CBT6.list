
PWM_UART_F103CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c524  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca8  0800c638  0800c638  0000d638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e0  0800d2e0  0000f3e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d2e0  0800d2e0  0000e2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2e8  0800d2e8  0000f3e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2e8  0800d2e8  0000e2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003e4  20000000  0800d2f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200003e8  0800d6d4  0000f3e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800d6d4  0000f7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f3e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c97  00000000  00000000  0000f40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b23  00000000  00000000  000220a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00024bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  00025e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e05  00000000  00000000  00026ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016431  00000000  00000000  00040aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948c6  00000000  00000000  00056f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f8  00000000  00000000  000eb828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f1b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003e8 	.word	0x200003e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c61c 	.word	0x0800c61c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ec 	.word	0x200003ec
 800014c:	0800c61c 	.word	0x0800c61c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001134:	f3bf 8f4f 	dsb	sy
}
 8001138:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <__NVIC_SystemReset+0x24>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001142:	4904      	ldr	r1, [pc, #16]	@ (8001154 <__NVIC_SystemReset+0x24>)
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__NVIC_SystemReset+0x28>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800114a:	f3bf 8f4f 	dsb	sy
}
 800114e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <__NVIC_SystemReset+0x20>
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	05fa0004 	.word	0x05fa0004

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f002 fe09 	bl	8003d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f8e7 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 fb11 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 800116e:	f000 faf1 	bl	8001754 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001172:	f000 fac5 	bl	8001700 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001176:	f000 f9e1 	bl	800153c <MX_TIM2_Init>
  MX_I2C1_Init();
 800117a:	f000 f997 	bl	80014ac <MX_I2C1_Init>
  MX_ADC1_Init();
 800117e:	f000 f939 	bl	80013f4 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001182:	f000 f9c1 	bl	8001508 <MX_IWDG_Init>
  MX_TIM3_Init();
 8001186:	f000 fa31 	bl	80015ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	4952      	ldr	r1, [pc, #328]	@ (80012d8 <main+0x17c>)
 800118e:	4853      	ldr	r0, [pc, #332]	@ (80012dc <main+0x180>)
 8001190:	f007 fca3 	bl	8008ada <HAL_UART_Receive_IT>
 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4852      	ldr	r0, [pc, #328]	@ (80012e0 <main+0x184>)
 8001198:	f006 fb70 	bl	800787c <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart1, (uint8_t*)exampleCommands, strlen(exampleCommands), HAL_MAX_DELAY);
 800119c:	4851      	ldr	r0, [pc, #324]	@ (80012e4 <main+0x188>)
 800119e:	f7fe ffe1 	bl	8000164 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	494e      	ldr	r1, [pc, #312]	@ (80012e4 <main+0x188>)
 80011ac:	484b      	ldr	r0, [pc, #300]	@ (80012dc <main+0x180>)
 80011ae:	f007 fc09 	bl	80089c4 <HAL_UART_Transmit>
  adxl345_init(&hi2c1);
 80011b2:	484d      	ldr	r0, [pc, #308]	@ (80012e8 <main+0x18c>)
 80011b4:	f000 fd56 	bl	8001c64 <adxl345_init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // PA7 - Rising
 80011b8:	2104      	movs	r1, #4
 80011ba:	484c      	ldr	r0, [pc, #304]	@ (80012ec <main+0x190>)
 80011bc:	f006 fc58 	bl	8007a70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // PB0 - Falling
 80011c0:	2108      	movs	r1, #8
 80011c2:	484a      	ldr	r0, [pc, #296]	@ (80012ec <main+0x190>)
 80011c4:	f006 fc54 	bl	8007a70 <HAL_TIM_IC_Start_IT>
    /* USER CODE BEGIN 3 */
//	  char msg[] = "deneme123\r\n";
//	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
//	      HAL_Delay(1000);

	 HAL_IWDG_Refresh(&hiwdg); // Burada sürekli besle
 80011c8:	4849      	ldr	r0, [pc, #292]	@ (80012f0 <main+0x194>)
 80011ca:	f005 fd7c 	bl	8006cc6 <HAL_IWDG_Refresh>
	          // WAIT komutu dışında


	  if(process_uart)
 80011ce:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <main+0x198>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <main+0x80>
	  {
		  command(rxBuffer);								// komutu işle
 80011d6:	4848      	ldr	r0, [pc, #288]	@ (80012f8 <main+0x19c>)
 80011d8:	f000 fee6 	bl	8001fa8 <command>

	  }
	#ifdef LIVE_EXPRESSION
    // DEBUG MODU DEĞERLER SÜREKLİ GÜNCELLENİYOR
    adxl345_read_xyz(&hi2c1, &gx, &gy, &gz);
 80011dc:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <main+0x1a0>)
 80011de:	4a48      	ldr	r2, [pc, #288]	@ (8001300 <main+0x1a4>)
 80011e0:	4948      	ldr	r1, [pc, #288]	@ (8001304 <main+0x1a8>)
 80011e2:	4841      	ldr	r0, [pc, #260]	@ (80012e8 <main+0x18c>)
 80011e4:	f000 fd66 	bl	8001cb4 <adxl345_read_xyz>
    calc_acceleration_ms2(gx, gy, gz, &ax, &ay, &az);
 80011e8:	4b46      	ldr	r3, [pc, #280]	@ (8001304 <main+0x1a8>)
 80011ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <main+0x1a4>)
 80011f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011f4:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <main+0x1a0>)
 80011f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011fa:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <main+0x1ac>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	4b43      	ldr	r3, [pc, #268]	@ (800130c <main+0x1b0>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <main+0x1b4>)
 8001204:	f000 fcb8 	bl	8001b78 <calc_acceleration_ms2>
    #endif

    	if (servoFollowY)
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <main+0x1b8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03d      	beq.n	800128e <main+0x132>
    	{
    		float sinirY =ay;
 8001212:	4b3e      	ldr	r3, [pc, #248]	@ (800130c <main+0x1b0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	607b      	str	r3, [r7, #4]
    		if(sinirY> 9.81f) sinirY = 9.81f;
 8001218:	493f      	ldr	r1, [pc, #252]	@ (8001318 <main+0x1bc>)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff58 	bl	80010d0 <__aeabi_fcmpgt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <main+0xce>
 8001226:	4b3c      	ldr	r3, [pc, #240]	@ (8001318 <main+0x1bc>)
 8001228:	607b      	str	r3, [r7, #4]
    		if(sinirY< -9.81f) sinirY = -9.81f;
 800122a:	493c      	ldr	r1, [pc, #240]	@ (800131c <main+0x1c0>)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff31 	bl	8001094 <__aeabi_fcmplt>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <main+0xe0>
 8001238:	4b38      	ldr	r3, [pc, #224]	@ (800131c <main+0x1c0>)
 800123a:	607b      	str	r3, [r7, #4]

    		float angle = (sinirY / 9.81f) * 90.0f;
 800123c:	4936      	ldr	r1, [pc, #216]	@ (8001318 <main+0x1bc>)
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe3e 	bl	8000ec0 <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	4936      	ldr	r1, [pc, #216]	@ (8001320 <main+0x1c4>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd85 	bl	8000d58 <__aeabi_fmul>
 800124e:	4603      	mov	r3, r0
 8001250:	603b      	str	r3, [r7, #0]
    		if(angle>90) angle = 90;
 8001252:	4933      	ldr	r1, [pc, #204]	@ (8001320 <main+0x1c4>)
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7ff ff3b 	bl	80010d0 <__aeabi_fcmpgt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <main+0x108>
 8001260:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <main+0x1c4>)
 8001262:	603b      	str	r3, [r7, #0]
    		if(angle<-90) angle = -90;
 8001264:	492f      	ldr	r1, [pc, #188]	@ (8001324 <main+0x1c8>)
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7ff ff14 	bl	8001094 <__aeabi_fcmplt>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <main+0x11a>
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <main+0x1c8>)
 8001274:	603b      	str	r3, [r7, #0]

    		servoSetAngle(&htim2, TIM_CHANNEL_2, (int)angle);
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff ff34 	bl	80010e4 <__aeabi_f2iz>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	2104      	movs	r1, #4
 8001282:	4817      	ldr	r0, [pc, #92]	@ (80012e0 <main+0x184>)
 8001284:	f002 f9f2 	bl	800366c <servoSetAngle>
    		HAL_Delay(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f002 fdd7 	bl	8003e3c <HAL_Delay>
    	}

    	if (ledFollowAccX)
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <main+0x1cc>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d098      	beq.n	80011c8 <main+0x6c>
    	{
    		if(ax > 10.0f || ax < -10.0f){
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <main+0x1b4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4924      	ldr	r1, [pc, #144]	@ (800132c <main+0x1d0>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff17 	bl	80010d0 <__aeabi_fcmpgt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d108      	bne.n	80012ba <main+0x15e>
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <main+0x1b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4920      	ldr	r1, [pc, #128]	@ (8001330 <main+0x1d4>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fef0 	bl	8001094 <__aeabi_fcmplt>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <main+0x16c>
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c0:	481c      	ldr	r0, [pc, #112]	@ (8001334 <main+0x1d8>)
 80012c2:	f004 faf8 	bl	80058b6 <HAL_GPIO_WritePin>
 80012c6:	e005      	b.n	80012d4 <main+0x178>
    		}
    		else{
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ce:	4819      	ldr	r0, [pc, #100]	@ (8001334 <main+0x1d8>)
 80012d0:	f004 faf1 	bl	80058b6 <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg); // Burada sürekli besle
 80012d4:	e778      	b.n	80011c8 <main+0x6c>
 80012d6:	bf00      	nop
 80012d8:	2000063c 	.word	0x2000063c
 80012dc:	20000568 	.word	0x20000568
 80012e0:	200004d8 	.word	0x200004d8
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000478 	.word	0x20000478
 80012ec:	20000520 	.word	0x20000520
 80012f0:	200004cc 	.word	0x200004cc
 80012f4:	2000063e 	.word	0x2000063e
 80012f8:	200005bc 	.word	0x200005bc
 80012fc:	20000644 	.word	0x20000644
 8001300:	20000642 	.word	0x20000642
 8001304:	20000640 	.word	0x20000640
 8001308:	20000650 	.word	0x20000650
 800130c:	2000064c 	.word	0x2000064c
 8001310:	20000648 	.word	0x20000648
 8001314:	20000654 	.word	0x20000654
 8001318:	411cf5c3 	.word	0x411cf5c3
 800131c:	c11cf5c3 	.word	0xc11cf5c3
 8001320:	42b40000 	.word	0x42b40000
 8001324:	c2b40000 	.word	0xc2b40000
 8001328:	20000655 	.word	0x20000655
 800132c:	41200000 	.word	0x41200000
 8001330:	c1200000 	.word	0xc1200000
 8001334:	40010c00 	.word	0x40010c00

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	2228      	movs	r2, #40	@ 0x28
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f009 f8ca 	bl	800a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001368:	2309      	movs	r3, #9
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001376:	2301      	movs	r3, #1
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800137a:	2301      	movs	r3, #1
 800137c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001388:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fca6 	bl	8006ce4 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800139e:	f002 f9b7 	bl	8003710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 ff12 	bl	80071e8 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ca:	f002 f9a1 	bl	8003710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ce:	2302      	movs	r3, #2
 80013d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f006 f892 	bl	8007504 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013e6:	f002 f993 	bl	8003710 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	@ 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001404:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001406:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <MX_ADC1_Init+0xb4>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 800140c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001410:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001414:	2201      	movs	r2, #1
 8001416:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 800141a:	2200      	movs	r2, #0
 800141c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001420:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 800142e:	2203      	movs	r2, #3
 8001430:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001432:	481c      	ldr	r0, [pc, #112]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001434:	f002 fd26 	bl	8003e84 <HAL_ADC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800143e:	f002 f967 	bl	8003710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001442:	2302      	movs	r3, #2
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001446:	2301      	movs	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001454:	f003 f8ea 	bl	800462c <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f002 f957 	bl	8003710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001462:	2303      	movs	r3, #3
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001466:	2302      	movs	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 8001470:	f003 f8dc 	bl	800462c <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800147a:	f002 f949 	bl	8003710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800147e:	2304      	movs	r3, #4
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001482:	2303      	movs	r3, #3
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_ADC1_Init+0xb0>)
 800148c:	f003 f8ce 	bl	800462c <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001496:	f002 f93b 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000404 	.word	0x20000404
 80014a8:	40012400 	.word	0x40012400

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <MX_I2C1_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <MX_I2C1_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ea:	f004 fa15 	bl	8005918 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f002 f90c 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000478 	.word	0x20000478
 8001500:	40005400 	.word	0x40005400
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_IWDG_Init+0x2c>)
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <MX_IWDG_Init+0x30>)
 8001510:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_IWDG_Init+0x2c>)
 8001514:	2204      	movs	r2, #4
 8001516:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_IWDG_Init+0x2c>)
 800151a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800151e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_IWDG_Init+0x2c>)
 8001522:	f005 fb8c 	bl	8006c3e <HAL_IWDG_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800152c:	f002 f8f0 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200004cc 	.word	0x200004cc
 8001538:	40003000 	.word	0x40003000

0800153c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MX_TIM2_Init+0xac>)
 8001560:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <MX_TIM2_Init+0xac>)
 8001568:	2247      	movs	r2, #71	@ 0x47
 800156a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <MX_TIM2_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MX_TIM2_Init+0xac>)
 8001574:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001578:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <MX_TIM2_Init+0xac>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <MX_TIM2_Init+0xac>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001586:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MX_TIM2_Init+0xac>)
 8001588:	f006 f928 	bl	80077dc <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001592:	f002 f8bd 	bl	8003710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <MX_TIM2_Init+0xac>)
 80015a6:	f007 f94d 	bl	8008844 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015b0:	f002 f8ae 	bl	8003710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	@ 0x60
 80015b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2204      	movs	r2, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <MX_TIM2_Init+0xac>)
 80015cc:	f006 fce8 	bl	8007fa0 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015d6:	f002 f89b 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015da:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <MX_TIM2_Init+0xac>)
 80015dc:	f002 f9e8 	bl	80039b0 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200004d8 	.word	0x200004d8

080015ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	@ 0x38
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161c:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 800161e:	4a37      	ldr	r2, [pc, #220]	@ (80016fc <MX_TIM3_Init+0x110>)
 8001620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800162e:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001642:	482d      	ldr	r0, [pc, #180]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001644:	f006 f8ca 	bl	80077dc <HAL_TIM_PWM_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800164e:	f002 f85f 	bl	8003710 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001652:	4829      	ldr	r0, [pc, #164]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001654:	f006 f9b4 	bl	80079c0 <HAL_TIM_IC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800165e:	f002 f857 	bl	8003710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800166a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800166e:	4619      	mov	r1, r3
 8001670:	4821      	ldr	r0, [pc, #132]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 8001672:	f007 f8e7 	bl	8008844 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800167c:	f002 f848 	bl	8003710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	@ 0x60
 8001682:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4817      	ldr	r0, [pc, #92]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 800169a:	f006 fc81 	bl	8007fa0 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80016a4:	f002 f834 	bl	8003710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2204      	movs	r2, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	480e      	ldr	r0, [pc, #56]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 80016c0:	f006 fbd2 	bl	8007e68 <HAL_TIM_IC_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80016ca:	f002 f821 	bl	8003710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80016ce:	2302      	movs	r3, #2
 80016d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2208      	movs	r2, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 80016da:	f006 fbc5 	bl	8007e68 <HAL_TIM_IC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80016e4:	f002 f814 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <MX_TIM3_Init+0x10c>)
 80016ea:	f002 f961 	bl	80039b0 <HAL_TIM_MspPostInit>

}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	@ 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000520 	.word	0x20000520
 80016fc:	40000400 	.word	0x40000400

08001700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <MX_USART1_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 800170c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_USART1_UART_Init+0x4c>)
 8001738:	f007 f8f4 	bl	8008924 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f001 ffe5 	bl	8003710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000568 	.word	0x20000568
 8001750:	40013800 	.word	0x40013800

08001754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_DMA_Init+0x38>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <MX_DMA_Init+0x38>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_DMA_Init+0x38>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200b      	movs	r0, #11
 8001778:	f003 fa29 	bl	8004bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800177c:	200b      	movs	r0, #11
 800177e:	f003 fa42 	bl	8004c06 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a38      	ldr	r2, [pc, #224]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b36      	ldr	r3, [pc, #216]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b33      	ldr	r3, [pc, #204]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a32      	ldr	r2, [pc, #200]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a2c      	ldr	r2, [pc, #176]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <MX_GPIO_Init+0xfc>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800180a:	4821      	ldr	r0, [pc, #132]	@ (8001890 <MX_GPIO_Init+0x100>)
 800180c:	f004 f853 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001816:	481f      	ldr	r0, [pc, #124]	@ (8001894 <MX_GPIO_Init+0x104>)
 8001818:	f004 f84d 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	4816      	ldr	r0, [pc, #88]	@ (8001890 <MX_GPIO_Init+0x100>)
 8001836:	f003 fea3 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_GPIO_Init+0x104>)
 8001854:	f003 fe94 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_GPIO_Init+0x108>)
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4619      	mov	r1, r3
 800186c:	4809      	ldr	r0, [pc, #36]	@ (8001894 <MX_GPIO_Init+0x104>)
 800186e:	f003 fe87 	bl	8005580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2017      	movs	r0, #23
 8001878:	f003 f9a9 	bl	8004bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800187c:	2017      	movs	r0, #23
 800187e:	f003 f9c2 	bl	8004c06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001882:	bf00      	nop
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	40011000 	.word	0x40011000
 8001894:	40010c00 	.word	0x40010c00
 8001898:	10110000 	.word	0x10110000

0800189c <set_pwm_freq_duty>:

/* USER CODE BEGIN 4 */
void set_pwm_freq_duty(uint32_t freq, uint8_t duty) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
    uint32_t timer_clk = 72000000;  // 72 MHz
 80018a8:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <set_pwm_freq_duty+0x6c>)
 80018aa:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 0; // PSC=0 --> 1
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clk / (prescaler + 1)) / freq - 1;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3301      	adds	r3, #1
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = ((period + 1) * duty) / 100;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <set_pwm_freq_duty+0x70>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim3, prescaler); // Gerekirse ekle!
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <set_pwm_freq_duty+0x74>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim3, period);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <set_pwm_freq_duty+0x74>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018e8:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <set_pwm_freq_duty+0x74>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <set_pwm_freq_duty+0x74>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6
 80018f6:	2100      	movs	r1, #0
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <set_pwm_freq_duty+0x74>)
 80018fa:	f005 ffbf 	bl	800787c <HAL_TIM_PWM_Start>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	044aa200 	.word	0x044aa200
 800190c:	51eb851f 	.word	0x51eb851f
 8001910:	20000520 	.word	0x20000520

08001914 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    static uint32_t last_falling = 0;
    static uint32_t period = 0;
    static uint32_t high_time = 0;
    static uint8_t state = 0; // 0: rising bekliyor, 1: falling bekliyor

    if (htim->Instance == TIM3) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a47      	ldr	r2, [pc, #284]	@ (8001a40 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f040 8087 	bne.w	8001a36 <HAL_TIM_IC_CaptureCallback+0x122>
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // Rising
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7f1b      	ldrb	r3, [r3, #28]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_TIM_IC_CaptureCallback+0x64>
            uint32_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001930:	2104      	movs	r1, #4
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f006 fbf6 	bl	8008124 <HAL_TIM_ReadCapturedValue>
 8001938:	60b8      	str	r0, [r7, #8]
            if (state == 0) { // Doğru sıralama
 800193a:	4b42      	ldr	r3, [pc, #264]	@ (8001a44 <HAL_TIM_IC_CaptureCallback+0x130>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d141      	bne.n	80019c6 <HAL_TIM_IC_CaptureCallback+0xb2>
                period = (now >= last_rising) ? (now - last_rising) : ((htim->Init.Period - last_rising) + now + 1);
 8001942:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d304      	bcc.n	8001956 <HAL_TIM_IC_CaptureCallback+0x42>
 800194c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	e007      	b.n	8001966 <HAL_TIM_IC_CaptureCallback+0x52>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4413      	add	r3, r2
 8001964:	3301      	adds	r3, #1
 8001966:	4a39      	ldr	r2, [pc, #228]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001968:	6013      	str	r3, [r2, #0]
                last_rising = now;
 800196a:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	6013      	str	r3, [r2, #0]
                state = 1; // falling bekle
 8001970:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e026      	b.n	80019c6 <HAL_TIM_IC_CaptureCallback+0xb2>
            }
        }
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) { // Falling
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7f1b      	ldrb	r3, [r3, #28]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d122      	bne.n	80019c6 <HAL_TIM_IC_CaptureCallback+0xb2>
            uint32_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001980:	2108      	movs	r1, #8
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f006 fbce 	bl	8008124 <HAL_TIM_ReadCapturedValue>
 8001988:	60f8      	str	r0, [r7, #12]
            if (state == 1) {
 800198a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <HAL_TIM_IC_CaptureCallback+0x130>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d119      	bne.n	80019c6 <HAL_TIM_IC_CaptureCallback+0xb2>
                high_time = (now >= last_rising) ? (now - last_rising) : ((htim->Init.Period - last_rising) + now + 1);
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d304      	bcc.n	80019a6 <HAL_TIM_IC_CaptureCallback+0x92>
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	e007      	b.n	80019b6 <HAL_TIM_IC_CaptureCallback+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_TIM_IC_CaptureCallback+0x134>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a26      	ldr	r2, [pc, #152]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019b8:	6013      	str	r3, [r2, #0]
                last_falling = now;
 80019ba:	4a26      	ldr	r2, [pc, #152]	@ (8001a54 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6013      	str	r3, [r2, #0]
                state = 0; //  tekrar rising bekle
 80019c0:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_TIM_IC_CaptureCallback+0x130>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
            }
        }
        if (period > 0) {
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x138>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d033      	beq.n	8001a36 <HAL_TIM_IC_CaptureCallback+0x122>
            measured_freq = (float)72000000 / (htim->Init.Prescaler + 1) / period;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f967 	bl	8000ca8 <__aeabi_ui2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4619      	mov	r1, r3
 80019de:	481e      	ldr	r0, [pc, #120]	@ (8001a58 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019e0:	f7ff fa6e 	bl	8000ec0 <__aeabi_fdiv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461c      	mov	r4, r3
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f95b 	bl	8000ca8 <__aeabi_ui2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4619      	mov	r1, r3
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fa62 	bl	8000ec0 <__aeabi_fdiv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a02:	601a      	str	r2, [r3, #0]
            measured_duty = ((float)high_time / (float)period) * 100.0f;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f94d 	bl	8000ca8 <__aeabi_ui2f>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f947 	bl	8000ca8 <__aeabi_ui2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fa4e 	bl	8000ec0 <__aeabi_fdiv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f995 	bl	8000d58 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a34:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40000400 	.word	0x40000400
 8001a44:	20000660 	.word	0x20000660
 8001a48:	20000664 	.word	0x20000664
 8001a4c:	20000668 	.word	0x20000668
 8001a50:	2000066c 	.word	0x2000066c
 8001a54:	20000670 	.word	0x20000670
 8001a58:	4c895440 	.word	0x4c895440
 8001a5c:	20000658 	.word	0x20000658
 8001a60:	42c80000 	.word	0x42c80000
 8001a64:	2000065c 	.word	0x2000065c

08001a68 <Flash_Write_Word>:




void Flash_Write_Word(uint32_t address, uint32_t data){
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001a72:	f003 fbf5 	bl	8005260 <HAL_FLASH_Unlock>

	if(address % 4 != 0){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <Flash_Write_Word+0x2c>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"Hatalı adres (4 byte hizalama)!\r\n", strlen("Hatalı adres (4-byte hizalama)!\r\n"), HAL_MAX_DELAY);
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	2222      	movs	r2, #34	@ 0x22
 8001a86:	492d      	ldr	r1, [pc, #180]	@ (8001b3c <Flash_Write_Word+0xd4>)
 8001a88:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <Flash_Write_Word+0xd8>)
 8001a8a:	f006 ff9b 	bl	80089c4 <HAL_UART_Transmit>
	        HAL_FLASH_Lock();
 8001a8e:	f003 fc0d 	bl	80052ac <HAL_FLASH_Lock>
	        return;
 8001a92:	e050      	b.n	8001b36 <Flash_Write_Word+0xce>
	    }

	    // Adresin son page aralığında olup olmadığını kontrol et
	    if(address < FLASH_USER_PAGE_ADDR || address >= (FLASH_USER_PAGE_ADDR + FLASH_PAGE_SIZE)){
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <Flash_Write_Word+0xdc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d303      	bcc.n	8001aa4 <Flash_Write_Word+0x3c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b48 <Flash_Write_Word+0xe0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d909      	bls.n	8001ab8 <Flash_Write_Word+0x50>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"Adres son page araliginda degil!\r\n", strlen("Adres son page araliginda degil!\r\n"), HAL_MAX_DELAY);
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	2222      	movs	r2, #34	@ 0x22
 8001aaa:	4928      	ldr	r1, [pc, #160]	@ (8001b4c <Flash_Write_Word+0xe4>)
 8001aac:	4824      	ldr	r0, [pc, #144]	@ (8001b40 <Flash_Write_Word+0xd8>)
 8001aae:	f006 ff89 	bl	80089c4 <HAL_UART_Transmit>
	        HAL_FLASH_Lock();
 8001ab2:	f003 fbfb 	bl	80052ac <HAL_FLASH_Lock>
	        return;
 8001ab6:	e03e      	b.n	8001b36 <Flash_Write_Word+0xce>
	    }

	//page silme
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = address & ~(FLASH_PAGE_SIZE-1); // page baslangici
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
	if((HAL_FLASHEx_Erase(&EraseInitStruct, &PageError)) != HAL_OK){
 8001ad0:	f107 020c 	add.w	r2, r7, #12
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fca8 	bl	8005430 <HAL_FLASHEx_Erase>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <Flash_Write_Word+0x92>
	         HAL_UART_Transmit(&huart1, ((uint8_t*)"Silme basarisiz. \r\n"), strlen("Silme basarisiz. \r\n"), HAL_MAX_DELAY);
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	2213      	movs	r2, #19
 8001aec:	4918      	ldr	r1, [pc, #96]	@ (8001b50 <Flash_Write_Word+0xe8>)
 8001aee:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <Flash_Write_Word+0xd8>)
 8001af0:	f006 ff68 	bl	80089c4 <HAL_UART_Transmit>
	         HAL_FLASH_Lock();
 8001af4:	f003 fbda 	bl	80052ac <HAL_FLASH_Lock>
	         return;
 8001af8:	e01d      	b.n	8001b36 <Flash_Write_Word+0xce>
	}

	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	461c      	mov	r4, r3
 8001b00:	4615      	mov	r5, r2
 8001b02:	4622      	mov	r2, r4
 8001b04:	462b      	mov	r3, r5
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f003 fb39 	bl	8005180 <HAL_FLASH_Program>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <Flash_Write_Word+0xbc>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Yazma basarili. \r\n",strlen("Yazma basarili. \r\n"), HAL_MAX_DELAY);
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	2212      	movs	r2, #18
 8001b1a:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <Flash_Write_Word+0xec>)
 8001b1c:	4808      	ldr	r0, [pc, #32]	@ (8001b40 <Flash_Write_Word+0xd8>)
 8001b1e:	f006 ff51 	bl	80089c4 <HAL_UART_Transmit>
 8001b22:	e006      	b.n	8001b32 <Flash_Write_Word+0xca>
	}
	else
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Yazma basarisiz. \r\n", strlen("Yazma basarisiz. \r\n"), HAL_MAX_DELAY);
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	2213      	movs	r2, #19
 8001b2a:	490b      	ldr	r1, [pc, #44]	@ (8001b58 <Flash_Write_Word+0xf0>)
 8001b2c:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <Flash_Write_Word+0xd8>)
 8001b2e:	f006 ff49 	bl	80089c4 <HAL_UART_Transmit>
	}

	HAL_FLASH_Lock();
 8001b32:	f003 fbbb 	bl	80052ac <HAL_FLASH_Lock>
}
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	0800c638 	.word	0x0800c638
 8001b40:	20000568 	.word	0x20000568
 8001b44:	0801fc00 	.word	0x0801fc00
 8001b48:	0801ffff 	.word	0x0801ffff
 8001b4c:	0800c65c 	.word	0x0800c65c
 8001b50:	0800c680 	.word	0x0800c680
 8001b54:	0800c694 	.word	0x0800c694
 8001b58:	0800c6a8 	.word	0x0800c6a8

08001b5c <Flash_Read_Word>:

uint32_t Flash_Read_Word(uint32_t address){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	return *(volatile uint32_t*) address;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	0000      	movs	r0, r0
 8001b74:	0000      	movs	r0, r0
	...

08001b78 <calc_acceleration_ms2>:





void calc_acceleration_ms2(int16_t xraw, int16_t yraw, int16_t zraw, float* ax, float* ay, float* az){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	4603      	mov	r3, r0
 8001b82:	81fb      	strh	r3, [r7, #14]
 8001b84:	460b      	mov	r3, r1
 8001b86:	81bb      	strh	r3, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	817b      	strh	r3, [r7, #10]
	*ax = ((float)xraw / 256.0) * 9.81f;
 8001b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f88d 	bl	8000cb0 <__aeabi_i2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc4f 	bl	800043c <__aeabi_f2d>
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <calc_acceleration_ms2+0xe8>)
 8001ba4:	f7fe fdcc 	bl	8000740 <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	a329      	add	r3, pc, #164	@ (adr r3, 8001c58 <calc_acceleration_ms2+0xe0>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fc99 	bl	80004ec <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ff6b 	bl	8000a9c <__aeabi_d2f>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
	*ay = ((float)yraw / 256.0) * 9.81f;
 8001bcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f86d 	bl	8000cb0 <__aeabi_i2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc2f 	bl	800043c <__aeabi_f2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <calc_acceleration_ms2+0xe8>)
 8001be4:	f7fe fdac 	bl	8000740 <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	a319      	add	r3, pc, #100	@ (adr r3, 8001c58 <calc_acceleration_ms2+0xe0>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fc79 	bl	80004ec <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ff4b 	bl	8000a9c <__aeabi_d2f>
 8001c06:	4602      	mov	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]
	*az = ((float)zraw / 256.0) * 9.81f;
 8001c0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f84d 	bl	8000cb0 <__aeabi_i2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc0f 	bl	800043c <__aeabi_f2d>
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <calc_acceleration_ms2+0xe8>)
 8001c24:	f7fe fd8c 	bl	8000740 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	a309      	add	r3, pc, #36	@ (adr r3, 8001c58 <calc_acceleration_ms2+0xe0>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fc59 	bl	80004ec <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ff2b 	bl	8000a9c <__aeabi_d2f>
 8001c46:	4602      	mov	r2, r0
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	f3af 8000 	nop.w
 8001c58:	60000000 	.word	0x60000000
 8001c5c:	40239eb8 	.word	0x40239eb8
 8001c60:	40700000 	.word	0x40700000

08001c64 <adxl345_init>:

void adxl345_init(I2C_HandleTypeDef *hi2c){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af04      	add	r7, sp, #16
 8001c6a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x08;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_POWER_CTL, 1, &data, 1, 100);
 8001c70:	2364      	movs	r3, #100	@ 0x64
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f107 030f 	add.w	r3, r7, #15
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	222d      	movs	r2, #45	@ 0x2d
 8001c82:	21a6      	movs	r1, #166	@ 0xa6
 8001c84:	480a      	ldr	r0, [pc, #40]	@ (8001cb0 <adxl345_init+0x4c>)
 8001c86:	f003 ff8b 	bl	8005ba0 <HAL_I2C_Mem_Write>

	data = 0x08;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_DATA_FORMAT, 1, &data, 1, 100);
 8001c8e:	2364      	movs	r3, #100	@ 0x64
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f107 030f 	add.w	r3, r7, #15
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2231      	movs	r2, #49	@ 0x31
 8001ca0:	21a6      	movs	r1, #166	@ 0xa6
 8001ca2:	4803      	ldr	r0, [pc, #12]	@ (8001cb0 <adxl345_init+0x4c>)
 8001ca4:	f003 ff7c 	bl	8005ba0 <HAL_I2C_Mem_Write>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000478 	.word	0x20000478

08001cb4 <adxl345_read_xyz>:

void adxl345_read_xyz(I2C_HandleTypeDef *hi2c, int16_t *x, int16_t *y, int16_t *z){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_DATAX0, 1, rawData, 6, 100);
 8001cc2:	2364      	movs	r3, #100	@ 0x64
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	2232      	movs	r2, #50	@ 0x32
 8001cd4:	21a6      	movs	r1, #166	@ 0xa6
 8001cd6:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <adxl345_read_xyz+0x6c>)
 8001cd8:	f004 f85c 	bl	8005d94 <HAL_I2C_Mem_Read>

	*x = (int16_t)((rawData[1] << 8) | rawData[0]);
 8001cdc:	7c7b      	ldrb	r3, [r7, #17]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	7c3b      	ldrb	r3, [r7, #16]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((rawData[3] << 8) | rawData[2]);
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7cbb      	ldrb	r3, [r7, #18]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((rawData[5] << 8) | rawData[4]);
 8001d04:	7d7b      	ldrb	r3, [r7, #21]
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7d3b      	ldrb	r3, [r7, #20]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	801a      	strh	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000478 	.word	0x20000478

08001d24 <measureCapacitance>:

float measureCapacitance()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b090      	sub	sp, #64	@ 0x40
 8001d28:	af00      	add	r7, sp, #0
    // 1. PA5 çıkış moduna alındı LOW yapıldı
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4834      	ldr	r0, [pc, #208]	@ (8001e20 <measureCapacitance+0xfc>)
 8001d50:	f003 fc16 	bl	8005580 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2120      	movs	r1, #32
 8001d58:	4831      	ldr	r0, [pc, #196]	@ (8001e20 <measureCapacitance+0xfc>)
 8001d5a:	f003 fdac 	bl	80058b6 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // CAP 50ms'de boşaltıldı
 8001d5e:	2032      	movs	r0, #50	@ 0x32
 8001d60:	f002 f86c 	bl	8003e3c <HAL_Delay>

    // 2. PA5 pinini ADC girişine çevirildi
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d64:	2303      	movs	r3, #3
 8001d66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	482c      	ldr	r0, [pc, #176]	@ (8001e20 <measureCapacitance+0xfc>)
 8001d70:	f003 fc06 	bl	8005580 <HAL_GPIO_Init>

// ADC PA5 channel ayarları yapıldı
    ADC_ChannelConfTypeDef sConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_5;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4825      	ldr	r0, [pc, #148]	@ (8001e24 <measureCapacitance+0x100>)
 8001d90:	f002 fc4c 	bl	800462c <HAL_ADC_ConfigChannel>

    // 4. Zamanı başlat
    uint32_t startTick = HAL_GetTick();
 8001d94:	f002 f848 	bl	8003e28 <HAL_GetTick>
 8001d98:	63b8      	str	r0, [r7, #56]	@ 0x38

    float voltage = 0;
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float targetVoltage = 3.3f * 0.63f;  // 63% = RC sabiti
 8001da0:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <measureCapacitance+0x104>)
 8001da2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (voltage < targetVoltage)
 8001da4:	e01c      	b.n	8001de0 <measureCapacitance+0xbc>
    {
        HAL_ADC_Start(&hadc1);
 8001da6:	481f      	ldr	r0, [pc, #124]	@ (8001e24 <measureCapacitance+0x100>)
 8001da8:	f002 f944 	bl	8004034 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	481c      	ldr	r0, [pc, #112]	@ (8001e24 <measureCapacitance+0x100>)
 8001db2:	f002 f9ed 	bl	8004190 <HAL_ADC_PollForConversion>
        uint16_t adcVal = HAL_ADC_GetValue(&hadc1);
 8001db6:	481b      	ldr	r0, [pc, #108]	@ (8001e24 <measureCapacitance+0x100>)
 8001db8:	f002 fc1a 	bl	80045f0 <HAL_ADC_GetValue>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	847b      	strh	r3, [r7, #34]	@ 0x22
        voltage = (3.3f * adcVal) / 4095.0f;
 8001dc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff74 	bl	8000cb0 <__aeabi_i2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4918      	ldr	r1, [pc, #96]	@ (8001e2c <measureCapacitance+0x108>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffc3 	bl	8000d58 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4916      	ldr	r1, [pc, #88]	@ (8001e30 <measureCapacitance+0x10c>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f872 	bl	8000ec0 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (voltage < targetVoltage)
 8001de0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001de2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001de4:	f7ff f956 	bl	8001094 <__aeabi_fcmplt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1db      	bne.n	8001da6 <measureCapacitance+0x82>
    }

    uint32_t endTick = HAL_GetTick();
 8001dee:	f002 f81b 	bl	8003e28 <HAL_GetTick>
 8001df2:	6338      	str	r0, [r7, #48]	@ 0x30
    float sure = (float)(endTick - startTick);  // ms cinsinden
 8001df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ff54 	bl	8000ca8 <__aeabi_ui2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float resistance = 10.0f;  // 10kΩ kullanıyorsan
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <measureCapacitance+0x110>)
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    float capacitance_uF = sure / resistance;
 8001e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e0c:	f7ff f858 	bl	8000ec0 <__aeabi_fdiv>
 8001e10:	4603      	mov	r3, r0
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
    return capacitance_uF;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3740      	adds	r7, #64	@ 0x40
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010800 	.word	0x40010800
 8001e24:	20000404 	.word	0x20000404
 8001e28:	40050e56 	.word	0x40050e56
 8001e2c:	40533333 	.word	0x40533333
 8001e30:	457ff000 	.word	0x457ff000
 8001e34:	41200000 	.word	0x41200000

08001e38 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001e42:	f001 fff1 	bl	8003e28 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_8)
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e4e:	d115      	bne.n	8001e7c <HAL_GPIO_EXTI_Callback+0x44>
    {
        if (current_time - last_interrupt_time < 200)
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e5a:	d90e      	bls.n	8001e7a <HAL_GPIO_EXTI_Callback+0x42>
            return;
        last_interrupt_time = current_time;
 8001e5c:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6013      	str	r3, [r2, #0]

        // Komutu manuel buffer'a yaz
        strcpy(rxBuffer, "ADC;SHOW;RESISTOR");
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_GPIO_EXTI_Callback+0x54>)
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	8023      	strh	r3, [r4, #0]
        process_uart = true;
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_EXTI_Callback+0x44>
            return;
 8001e7a:	bf00      	nop
    }
}
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000674 	.word	0x20000674
 8001e88:	200005bc 	.word	0x200005bc
 8001e8c:	0800c6bc 	.word	0x0800c6bc
 8001e90:	2000063e 	.word	0x2000063e

08001e94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1){
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_UART_RxCpltCallback+0x6c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d128      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x64>
		 if (rxData == '\n'){ 								//enter gelince komutu tamamlandı
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <HAL_UART_RxCpltCallback+0x70>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d10c      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x34>
			 rxBuffer[rxIndex] = '\0';						// null terminate
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_UART_RxCpltCallback+0x78>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]
			 //command(rxBuffer);								// komutu işle
			 rxIndex = 0;
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
			 process_uart = true;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_UART_RxCpltCallback+0x7c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e012      	b.n	8001eee <HAL_UART_RxCpltCallback+0x5a>

		 }
		 else{
			 if (rxIndex < RX_BUFFER_SIZE - 1){
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ece:	d80b      	bhi.n	8001ee8 <HAL_UART_RxCpltCallback+0x54>
				 rxBuffer[rxIndex++] = rxData;				//karakteri kaydete
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	b2d1      	uxtb	r1, r2
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001eda:	7011      	strb	r1, [r2, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_UART_RxCpltCallback+0x70>)
 8001ee0:	7819      	ldrb	r1, [r3, #0]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_UART_RxCpltCallback+0x78>)
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	e002      	b.n	8001eee <HAL_UART_RxCpltCallback+0x5a>
			 }
			 else{
				 rxIndex = 0;								// taşma olursa sıfırla
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <HAL_UART_RxCpltCallback+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
			 }
		 }
		 HAL_UART_Receive_IT(&huart1, &rxData, 1);			// yeni veri için kesmeyi tekrar başlat
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4904      	ldr	r1, [pc, #16]	@ (8001f04 <HAL_UART_RxCpltCallback+0x70>)
 8001ef2:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <HAL_UART_RxCpltCallback+0x80>)
 8001ef4:	f006 fdf1 	bl	8008ada <HAL_UART_Receive_IT>
	 }
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013800 	.word	0x40013800
 8001f04:	2000063c 	.word	0x2000063c
 8001f08:	2000063d 	.word	0x2000063d
 8001f0c:	200005bc 	.word	0x200005bc
 8001f10:	2000063e 	.word	0x2000063e
 8001f14:	20000568 	.word	0x20000568

08001f18 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <HAL_ADC_ConvCpltCallback+0x48>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d116      	bne.n	8001f58 <HAL_ADC_ConvCpltCallback+0x40>
        adcDataReady = 1;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
        char msg[] = "ADC Hazir!\r\n";
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_ADC_ConvCpltCallback+0x50>)
 8001f32:	f107 0408 	add.w	r4, r7, #8
 8001f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f38:	c407      	stmia	r4!, {r0, r1, r2}
 8001f3a:	7023      	strb	r3, [r4, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe f90f 	bl	8000164 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	f107 0108 	add.w	r1, r7, #8
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <HAL_ADC_ConvCpltCallback+0x54>)
 8001f54:	f006 fd36 	bl	80089c4 <HAL_UART_Transmit>
    }
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd90      	pop	{r4, r7, pc}
 8001f60:	40012400 	.word	0x40012400
 8001f64:	200005b0 	.word	0x200005b0
 8001f68:	0800c6d0 	.word	0x0800c6d0
 8001f6c:	20000568 	.word	0x20000568

08001f70 <adcToVoltage>:
float adcToVoltage(uint16_t adcVal) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
    return (3.3f * adcVal) / 4095.0f;
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fe97 	bl	8000cb0 <__aeabi_i2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4906      	ldr	r1, [pc, #24]	@ (8001fa0 <adcToVoltage+0x30>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fee6 	bl	8000d58 <__aeabi_fmul>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4905      	ldr	r1, [pc, #20]	@ (8001fa4 <adcToVoltage+0x34>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe ff95 	bl	8000ec0 <__aeabi_fdiv>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40533333 	.word	0x40533333
 8001fa4:	457ff000 	.word	0x457ff000

08001fa8 <command>:



void command(char *cmd){
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 8001fb0:	af08      	add	r7, sp, #32
 8001fb2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001fb6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8001fba:	6018      	str	r0, [r3, #0]
	char *token1 = strtok(cmd, ";");
 8001fbc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001fc0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8001fc4:	49b2      	ldr	r1, [pc, #712]	@ (8002290 <command+0x2e8>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f008 fa92 	bl	800a4f0 <strtok>
 8001fcc:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
	char *token2 = strtok(NULL, ";");
 8001fd0:	49af      	ldr	r1, [pc, #700]	@ (8002290 <command+0x2e8>)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f008 fa8c 	bl	800a4f0 <strtok>
 8001fd8:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
	char *token3 = strtok(NULL, ";");
 8001fdc:	49ac      	ldr	r1, [pc, #688]	@ (8002290 <command+0x2e8>)
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f008 fa86 	bl	800a4f0 <strtok>
 8001fe4:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
	char *token4 = strtok(NULL, ";");
 8001fe8:	49a9      	ldr	r1, [pc, #676]	@ (8002290 <command+0x2e8>)
 8001fea:	2000      	movs	r0, #0
 8001fec:	f008 fa80 	bl	800a4f0 <strtok>
 8001ff0:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268

	for(int i = 0; cmd[i]; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8001ffa:	e019      	b.n	8002030 <command+0x88>
	    if (cmd[i] == '\r') cmd[i] = '\0';
 8001ffc:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8002000:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8002004:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b0d      	cmp	r3, #13
 8002010:	d109      	bne.n	8002026 <command+0x7e>
 8002012:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8002016:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 800201a:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
	for(int i = 0; cmd[i]; i++) {
 8002026:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8002030:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8002034:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8002038:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1da      	bne.n	8001ffc <command+0x54>
	}
	if (token1 == NULL) return;
 8002046:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800204a:	2b00      	cmp	r3, #0
 800204c:	f001 82e7 	beq.w	800361e <command+0x1676>
	char msg[100];
	sprintf(msg, "token1: '%s', token2: '%s', token3: '%s'\r\n",
 8002050:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <command+0xb6>
 8002058:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800205c:	e000      	b.n	8002060 <command+0xb8>
 800205e:	4a8d      	ldr	r2, [pc, #564]	@ (8002294 <command+0x2ec>)
 8002060:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <command+0xc6>
 8002068:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 800206c:	e000      	b.n	8002070 <command+0xc8>
 800206e:	4989      	ldr	r1, [pc, #548]	@ (8002294 <command+0x2ec>)
 8002070:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <command+0xd6>
 8002078:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800207c:	e000      	b.n	8002080 <command+0xd8>
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <command+0x2ec>)
 8002080:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	460b      	mov	r3, r1
 8002088:	4983      	ldr	r1, [pc, #524]	@ (8002298 <command+0x2f0>)
 800208a:	f008 f92f 	bl	800a2ec <siprintf>
	        token1 ? token1 : "NULL",
	        token2 ? token2 : "NULL",
	        token3 ? token3 : "NULL");
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800208e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f866 	bl	8000164 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	b29a      	uxth	r2, r3
 800209c:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	487d      	ldr	r0, [pc, #500]	@ (800229c <command+0x2f4>)
 80020a6:	f006 fc8d 	bl	80089c4 <HAL_UART_Transmit>

	if (strcmp(token1, "LED") == 0){
 80020aa:	497d      	ldr	r1, [pc, #500]	@ (80022a0 <command+0x2f8>)
 80020ac:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 80020b0:	f7fe f84e 	bl	8000150 <strcmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8108 	bne.w	80022cc <command+0x324>
		if (token2 == NULL){
 80020bc:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11c      	bne.n	80020fe <command+0x156>
			char msg[] = "LED icin ON veya OFF giriniz.\r\n";
 80020c4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80020c8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80020cc:	4a75      	ldr	r2, [pc, #468]	@ (80022a4 <command+0x2fc>)
 80020ce:	461c      	mov	r4, r3
 80020d0:	4615      	mov	r5, r2
 80020d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f83e 	bl	8000164 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f107 0108 	add.w	r1, r7, #8
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	4869      	ldr	r0, [pc, #420]	@ (800229c <command+0x2f4>)
 80020f6:	f006 fc65 	bl	80089c4 <HAL_UART_Transmit>
 80020fa:	f001 ba91 	b.w	8003620 <command+0x1678>
			return;
		}

		if (strcmp(token2, "ON") == 0){
 80020fe:	496a      	ldr	r1, [pc, #424]	@ (80022a8 <command+0x300>)
 8002100:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002104:	f7fe f824 	bl	8000150 <strcmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11b      	bne.n	8002146 <command+0x19e>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002114:	4865      	ldr	r0, [pc, #404]	@ (80022ac <command+0x304>)
 8002116:	f003 fbce 	bl	80058b6 <HAL_GPIO_WritePin>
			char msg[] = "LED acildi.\r\n";
 800211a:	4b65      	ldr	r3, [pc, #404]	@ (80022b0 <command+0x308>)
 800211c:	f507 74c6 	add.w	r4, r7, #396	@ 0x18c
 8002120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002122:	c407      	stmia	r4!, {r0, r1, r2}
 8002124:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002126:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f81a 	bl	8000164 <strlen>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	4857      	ldr	r0, [pc, #348]	@ (800229c <command+0x2f4>)
 800213e:	f006 fc41 	bl	80089c4 <HAL_UART_Transmit>
 8002142:	f001 ba63 	b.w	800360c <command+0x1664>
		}
		else if (strcmp(token2, "OFF") == 0){
 8002146:	495b      	ldr	r1, [pc, #364]	@ (80022b4 <command+0x30c>)
 8002148:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 800214c:	f7fe f800 	bl	8000150 <strcmp>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d120      	bne.n	8002198 <command+0x1f0>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800215c:	4853      	ldr	r0, [pc, #332]	@ (80022ac <command+0x304>)
 800215e:	f003 fbaa 	bl	80058b6 <HAL_GPIO_WritePin>
			char msg[] = "LED kapatildi.\r\n";
 8002162:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800216a:	4a53      	ldr	r2, [pc, #332]	@ (80022b8 <command+0x310>)
 800216c:	461c      	mov	r4, r3
 800216e:	4615      	mov	r5, r2
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002178:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800217c:	4618      	mov	r0, r3
 800217e:	f7fd fff1 	bl	8000164 <strlen>
 8002182:	4603      	mov	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	4843      	ldr	r0, [pc, #268]	@ (800229c <command+0x2f4>)
 8002190:	f006 fc18 	bl	80089c4 <HAL_UART_Transmit>
 8002194:	f001 ba3a 	b.w	800360c <command+0x1664>
		}
		else if(strcmp(token2, "STATUS") == 0){
 8002198:	4948      	ldr	r1, [pc, #288]	@ (80022bc <command+0x314>)
 800219a:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 800219e:	f7fd ffd7 	bl	8000150 <strcmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d14f      	bne.n	8002248 <command+0x2a0>
			GPIO_PinState state = HAL_GPIO_ReadPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80021a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ac:	483f      	ldr	r0, [pc, #252]	@ (80022ac <command+0x304>)
 80021ae:	f003 fb6b 	bl	8005888 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
				if(state == GPIO_PIN_RESET){
 80021b8:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11d      	bne.n	80021fc <command+0x254>
					char msg[] = "LED acik durumda. \r\n";
 80021c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80021c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021c8:	4a3d      	ldr	r2, [pc, #244]	@ (80022c0 <command+0x318>)
 80021ca:	461c      	mov	r4, r3
 80021cc:	4615      	mov	r5, r2
 80021ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021d6:	6020      	str	r0, [r4, #0]
 80021d8:	3404      	adds	r4, #4
 80021da:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80021dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fd ffbf 	bl	8000164 <strlen>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	482a      	ldr	r0, [pc, #168]	@ (800229c <command+0x2f4>)
 80021f4:	f006 fbe6 	bl	80089c4 <HAL_UART_Transmit>
 80021f8:	f001 ba08 	b.w	800360c <command+0x1664>
				}
				else if(state == GPIO_PIN_SET){
 80021fc:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 8002200:	2b01      	cmp	r3, #1
 8002202:	f041 8203 	bne.w	800360c <command+0x1664>
					char msg[] = "LED kapali durumda. \r\n";
 8002206:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800220a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800220e:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <command+0x31c>)
 8002210:	461c      	mov	r4, r3
 8002212:	4615      	mov	r5, r2
 8002214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002218:	e895 0003 	ldmia.w	r5, {r0, r1}
 800221c:	6020      	str	r0, [r4, #0]
 800221e:	3404      	adds	r4, #4
 8002220:	8021      	strh	r1, [r4, #0]
 8002222:	3402      	adds	r4, #2
 8002224:	0c0b      	lsrs	r3, r1, #16
 8002226:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002228:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800222c:	4618      	mov	r0, r3
 800222e:	f7fd ff99 	bl	8000164 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	b29a      	uxth	r2, r3
 8002236:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	4817      	ldr	r0, [pc, #92]	@ (800229c <command+0x2f4>)
 8002240:	f006 fbc0 	bl	80089c4 <HAL_UART_Transmit>
 8002244:	f001 b9e2 	b.w	800360c <command+0x1664>
				}
		}
		else{
			char msg[] = "Gecersiz LED komutu. Ornek komutlar icin HELP; yaziniz. \r\n";
 8002248:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800224c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002250:	4a1d      	ldr	r2, [pc, #116]	@ (80022c8 <command+0x320>)
 8002252:	461c      	mov	r4, r3
 8002254:	4615      	mov	r5, r2
 8002256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002262:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002266:	c403      	stmia	r4!, {r0, r1}
 8002268:	8022      	strh	r2, [r4, #0]
 800226a:	3402      	adds	r4, #2
 800226c:	0c13      	lsrs	r3, r2, #16
 800226e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ff75 	bl	8000164 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0108 	add.w	r1, r7, #8
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <command+0x2f4>)
 8002288:	f006 fb9c 	bl	80089c4 <HAL_UART_Transmit>
 800228c:	f001 b9be 	b.w	800360c <command+0x1664>
 8002290:	0800c6e0 	.word	0x0800c6e0
 8002294:	0800c6e4 	.word	0x0800c6e4
 8002298:	0800c6ec 	.word	0x0800c6ec
 800229c:	20000568 	.word	0x20000568
 80022a0:	0800c718 	.word	0x0800c718
 80022a4:	0800cb08 	.word	0x0800cb08
 80022a8:	0800c71c 	.word	0x0800c71c
 80022ac:	40011000 	.word	0x40011000
 80022b0:	0800cb28 	.word	0x0800cb28
 80022b4:	0800c720 	.word	0x0800c720
 80022b8:	0800cb38 	.word	0x0800cb38
 80022bc:	0800c724 	.word	0x0800c724
 80022c0:	0800cb4c 	.word	0x0800cb4c
 80022c4:	0800cb64 	.word	0x0800cb64
 80022c8:	0800cb7c 	.word	0x0800cb7c
		}
	}

	else if(strcmp(token1, "WAIT") == 0 && token2 != NULL)
 80022cc:	49bf      	ldr	r1, [pc, #764]	@ (80025cc <command+0x624>)
 80022ce:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 80022d2:	f7fd ff3d 	bl	8000150 <strcmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d13d      	bne.n	8002358 <command+0x3b0>
 80022dc:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d039      	beq.n	8002358 <command+0x3b0>
	{
	    uint32_t delayMs = atoi(token2);
 80022e4:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 80022e8:	f007 f986 	bl	80095f8 <atoi>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	    char msg[64];
	    sprintf(msg, "Bekleme baslatiliyor: %lu ms\r\n", delayMs);
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80022fa:	49b5      	ldr	r1, [pc, #724]	@ (80025d0 <command+0x628>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f007 fff5 	bl	800a2ec <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff2c 	bl	8000164 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	f107 0108 	add.w	r1, r7, #8
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	48ae      	ldr	r0, [pc, #696]	@ (80025d4 <command+0x62c>)
 800231a:	f006 fb53 	bl	80089c4 <HAL_UART_Transmit>

	    HAL_Delay(delayMs);
 800231e:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8002322:	f001 fd8b 	bl	8003e3c <HAL_Delay>

	    sprintf(msg, "Bekleme tamamlandi\r\n");
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	49ab      	ldr	r1, [pc, #684]	@ (80025d8 <command+0x630>)
 800232c:	4618      	mov	r0, r3
 800232e:	f007 ffdd 	bl	800a2ec <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4618      	mov	r0, r3
 8002338:	f7fd ff14 	bl	8000164 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	b29a      	uxth	r2, r3
 8002340:	f107 0108 	add.w	r1, r7, #8
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	48a2      	ldr	r0, [pc, #648]	@ (80025d4 <command+0x62c>)
 800234a:	f006 fb3b 	bl	80089c4 <HAL_UART_Transmit>
	    process_uart = false;
 800234e:	4ba3      	ldr	r3, [pc, #652]	@ (80025dc <command+0x634>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	f001 b964 	b.w	8003620 <command+0x1678>
	    return;
	}
	else if (strcmp(token1, "PWM") == 0 && strcmp(token2, "SET") == 0)
 8002358:	49a1      	ldr	r1, [pc, #644]	@ (80025e0 <command+0x638>)
 800235a:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 800235e:	f7fd fef7 	bl	8000150 <strcmp>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d17d      	bne.n	8002464 <command+0x4bc>
 8002368:	499e      	ldr	r1, [pc, #632]	@ (80025e4 <command+0x63c>)
 800236a:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 800236e:	f7fd feef 	bl	8000150 <strcmp>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d175      	bne.n	8002464 <command+0x4bc>
	{
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 8002378:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800237c:	2b00      	cmp	r3, #0
 800237e:	f001 8144 	beq.w	800360a <command+0x1662>
 8002382:	4999      	ldr	r1, [pc, #612]	@ (80025e8 <command+0x640>)
 8002384:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002388:	f7fd fee2 	bl	8000150 <strcmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	f041 813b 	bne.w	800360a <command+0x1662>
 8002394:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8002398:	2b00      	cmp	r3, #0
 800239a:	f001 8136 	beq.w	800360a <command+0x1662>
	        uint32_t freq = atoi(token4);
 800239e:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 80023a2:	f007 f929 	bl	80095f8 <atoi>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
	        char *token5 = strtok(NULL, ";");
 80023ac:	498f      	ldr	r1, [pc, #572]	@ (80025ec <command+0x644>)
 80023ae:	2000      	movs	r0, #0
 80023b0:	f008 f89e 	bl	800a4f0 <strtok>
 80023b4:	f8c7 025c 	str.w	r0, [r7, #604]	@ 0x25c
	        char *token6 = strtok(NULL, ";");
 80023b8:	498c      	ldr	r1, [pc, #560]	@ (80025ec <command+0x644>)
 80023ba:	2000      	movs	r0, #0
 80023bc:	f008 f898 	bl	800a4f0 <strtok>
 80023c0:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
	        if(token5 && strcmp(token5, "DUTY") == 0 && token6) {
 80023c4:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f001 811e 	beq.w	800360a <command+0x1662>
 80023ce:	4988      	ldr	r1, [pc, #544]	@ (80025f0 <command+0x648>)
 80023d0:	f8d7 025c 	ldr.w	r0, [r7, #604]	@ 0x25c
 80023d4:	f7fd febc 	bl	8000150 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f041 8115 	bne.w	800360a <command+0x1662>
 80023e0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f001 8110 	beq.w	800360a <command+0x1662>
	            uint8_t duty = atoi(token6);
 80023ea:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 80023ee:	f007 f903 	bl	80095f8 <atoi>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
	            set_pwm_freq_duty(freq, duty);
 80023f8:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80023fc:	4619      	mov	r1, r3
 80023fe:	f8d7 0260 	ldr.w	r0, [r7, #608]	@ 0x260
 8002402:	f7ff fa4b 	bl	800189c <set_pwm_freq_duty>

	            HAL_Delay(50);
 8002406:	2032      	movs	r0, #50	@ 0x32
 8002408:	f001 fd18 	bl	8003e3c <HAL_Delay>

	            char msg[128];
	            sprintf(msg, "PWM set: %lu Hz, %d%%\r\nOlculen Frekans: %.1f Hz\r\nOlculen Duty: %.1f%%\r\n",
 800240c:	f897 6257 	ldrb.w	r6, [r7, #599]	@ 0x257
 8002410:	4b78      	ldr	r3, [pc, #480]	@ (80025f4 <command+0x64c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f811 	bl	800043c <__aeabi_f2d>
 800241a:	4604      	mov	r4, r0
 800241c:	460d      	mov	r5, r1
 800241e:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <command+0x650>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f80a 	bl	800043c <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	f107 0008 	add.w	r0, r7, #8
 8002430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002434:	e9cd 4500 	strd	r4, r5, [sp]
 8002438:	4633      	mov	r3, r6
 800243a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800243e:	496f      	ldr	r1, [pc, #444]	@ (80025fc <command+0x654>)
 8002440:	f007 ff54 	bl	800a2ec <siprintf>
	                    freq, duty, measured_freq, measured_duty);
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4618      	mov	r0, r3
 800244a:	f7fd fe8b 	bl	8000164 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	b29a      	uxth	r2, r3
 8002452:	f107 0108 	add.w	r1, r7, #8
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	485e      	ldr	r0, [pc, #376]	@ (80025d4 <command+0x62c>)
 800245c:	f006 fab2 	bl	80089c4 <HAL_UART_Transmit>
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 8002460:	f001 b8d3 	b.w	800360a <command+0x1662>
	        }
	    }
	}

	else if(strcmp(token1, "FLASH") == 0){
 8002464:	4966      	ldr	r1, [pc, #408]	@ (8002600 <command+0x658>)
 8002466:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 800246a:	f7fd fe71 	bl	8000150 <strcmp>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 8087 	bne.w	8002584 <command+0x5dc>
		 if(token2 && strcmp(token2, "WRITE") == 0 && token3 && token4){
 8002476:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 800247a:	2b00      	cmp	r3, #0
 800247c:	d026      	beq.n	80024cc <command+0x524>
 800247e:	4961      	ldr	r1, [pc, #388]	@ (8002604 <command+0x65c>)
 8002480:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002484:	f7fd fe64 	bl	8000150 <strcmp>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11e      	bne.n	80024cc <command+0x524>
 800248e:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01a      	beq.n	80024cc <command+0x524>
 8002496:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <command+0x524>
		        uint32_t addr = strtoul(token3, NULL, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80024a6:	f007 f99d 	bl	80097e4 <strtoul>
 80024aa:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
		        uint32_t data = strtoul(token4, NULL, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 80024b6:	f007 f995 	bl	80097e4 <strtoul>
 80024ba:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		        Flash_Write_Word(addr, data);
 80024be:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 80024c2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80024c6:	f7ff facf 	bl	8001a68 <Flash_Write_Word>
		 if(token2 && strcmp(token2, "WRITE") == 0 && token3 && token4){
 80024ca:	e051      	b.n	8002570 <command+0x5c8>
		 }
		 else if(token2 && strcmp(token2, "READ") == 0 && token3){
 80024cc:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d031      	beq.n	8002538 <command+0x590>
 80024d4:	494c      	ldr	r1, [pc, #304]	@ (8002608 <command+0x660>)
 80024d6:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 80024da:	f7fd fe39 	bl	8000150 <strcmp>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d129      	bne.n	8002538 <command+0x590>
 80024e4:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d025      	beq.n	8002538 <command+0x590>
			 uint32_t addr = strtoul(token3, NULL, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2100      	movs	r1, #0
 80024f0:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80024f4:	f007 f976 	bl	80097e4 <strtoul>
 80024f8:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
			 uint32_t value = Flash_Read_Word(addr);
 80024fc:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8002500:	f7ff fb2c 	bl	8001b5c <Flash_Read_Word>
 8002504:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
			 char msg[40];
			 sprintf(msg, "FLASH READ --> 0x%08lX: 0x%08lX\r\n",addr ,value);
 8002508:	f107 0008 	add.w	r0, r7, #8
 800250c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002510:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002514:	493d      	ldr	r1, [pc, #244]	@ (800260c <command+0x664>)
 8002516:	f007 fee9 	bl	800a2ec <siprintf>
			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd fe20 	bl	8000164 <strlen>
 8002524:	4603      	mov	r3, r0
 8002526:	b29a      	uxth	r2, r3
 8002528:	f107 0108 	add.w	r1, r7, #8
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	4828      	ldr	r0, [pc, #160]	@ (80025d4 <command+0x62c>)
 8002532:	f006 fa47 	bl	80089c4 <HAL_UART_Transmit>
		 else if(token2 && strcmp(token2, "READ") == 0 && token3){
 8002536:	e01b      	b.n	8002570 <command+0x5c8>
		 }
		 else{
			 char msg[] = "FLASH komutu hatali\r\n";
 8002538:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800253c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002540:	4a33      	ldr	r2, [pc, #204]	@ (8002610 <command+0x668>)
 8002542:	461c      	mov	r4, r3
 8002544:	4615      	mov	r5, r2
 8002546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800254e:	6020      	str	r0, [r4, #0]
 8002550:	3404      	adds	r4, #4
 8002552:	8021      	strh	r1, [r4, #0]
			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002554:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe03 	bl	8000164 <strlen>
 800255e:	4603      	mov	r3, r0
 8002560:	b29a      	uxth	r2, r3
 8002562:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	481a      	ldr	r0, [pc, #104]	@ (80025d4 <command+0x62c>)
 800256c:	f006 fa2a 	bl	80089c4 <HAL_UART_Transmit>
		 }
		 memset(rxBuffer, 0, sizeof(rxBuffer));
 8002570:	2280      	movs	r2, #128	@ 0x80
 8002572:	2100      	movs	r1, #0
 8002574:	4827      	ldr	r0, [pc, #156]	@ (8002614 <command+0x66c>)
 8002576:	f007 ffb3 	bl	800a4e0 <memset>
		 process_uart = false;
 800257a:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <command+0x634>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
		 return;
 8002580:	f001 b84e 	b.w	8003620 <command+0x1678>
	}

	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "SHOW") == 0) {
 8002584:	4924      	ldr	r1, [pc, #144]	@ (8002618 <command+0x670>)
 8002586:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 800258a:	f7fd fde1 	bl	8000150 <strcmp>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 8222 	bne.w	80029da <command+0xa32>
 8002596:	4921      	ldr	r1, [pc, #132]	@ (800261c <command+0x674>)
 8002598:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 800259c:	f7fd fdd8 	bl	8000150 <strcmp>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 8219 	bne.w	80029da <command+0xa32>
	    adcDataReady = false;  // Flag'i başlat
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <command+0x678>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
	    HAL_ADC_Stop_DMA(&hadc1);
 80025ae:	481d      	ldr	r0, [pc, #116]	@ (8002624 <command+0x67c>)
 80025b0:	f001 ffd2 	bl	8004558 <HAL_ADC_Stop_DMA>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, ADC_CHANNEL_COUNT);
 80025b4:	2203      	movs	r2, #3
 80025b6:	491c      	ldr	r1, [pc, #112]	@ (8002628 <command+0x680>)
 80025b8:	481a      	ldr	r0, [pc, #104]	@ (8002624 <command+0x67c>)
 80025ba:	f001 feef 	bl	800439c <HAL_ADC_Start_DMA>

	    uint32_t startTick = HAL_GetTick() + 10; // SONSUZ DÖNGÜYÜ ÖNLEMEK İÇİN
 80025be:	f001 fc33 	bl	8003e28 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	330a      	adds	r3, #10
 80025c6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	    while (!adcDataReady) {
 80025ca:	e05b      	b.n	8002684 <command+0x6dc>
 80025cc:	0800c72c 	.word	0x0800c72c
 80025d0:	0800c734 	.word	0x0800c734
 80025d4:	20000568 	.word	0x20000568
 80025d8:	0800c754 	.word	0x0800c754
 80025dc:	2000063e 	.word	0x2000063e
 80025e0:	0800c76c 	.word	0x0800c76c
 80025e4:	0800c770 	.word	0x0800c770
 80025e8:	0800c774 	.word	0x0800c774
 80025ec:	0800c6e0 	.word	0x0800c6e0
 80025f0:	0800c77c 	.word	0x0800c77c
 80025f4:	20000658 	.word	0x20000658
 80025f8:	2000065c 	.word	0x2000065c
 80025fc:	0800c784 	.word	0x0800c784
 8002600:	0800c7cc 	.word	0x0800c7cc
 8002604:	0800c7d4 	.word	0x0800c7d4
 8002608:	0800c7dc 	.word	0x0800c7dc
 800260c:	0800c7e4 	.word	0x0800c7e4
 8002610:	0800cbb8 	.word	0x0800cbb8
 8002614:	200005bc 	.word	0x200005bc
 8002618:	0800c808 	.word	0x0800c808
 800261c:	0800c80c 	.word	0x0800c80c
 8002620:	200005b0 	.word	0x200005b0
 8002624:	20000404 	.word	0x20000404
 8002628:	200005b4 	.word	0x200005b4
	        if (HAL_GetTick() > startTick) {  // 300ms timeout
 800262c:	f001 fbfc 	bl	8003e28 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002636:	4293      	cmp	r3, r2
 8002638:	d221      	bcs.n	800267e <command+0x6d6>
	            char errMsg[] = "ADC read timeout\r\n";
 800263a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800263e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002642:	4aac      	ldr	r2, [pc, #688]	@ (80028f4 <command+0x94c>)
 8002644:	461c      	mov	r4, r3
 8002646:	4615      	mov	r5, r2
 8002648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	8022      	strh	r2, [r4, #0]
 8002652:	3402      	adds	r4, #2
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	7023      	strb	r3, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8002658:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fd81 	bl	8000164 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	48a2      	ldr	r0, [pc, #648]	@ (80028f8 <command+0x950>)
 8002670:	f006 f9a8 	bl	80089c4 <HAL_UART_Transmit>
	            process_uart = false;
 8002674:	4ba1      	ldr	r3, [pc, #644]	@ (80028fc <command+0x954>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	f000 bfd1 	b.w	8003620 <command+0x1678>
	            return;
	        }
	        HAL_Delay(1);
 800267e:	2001      	movs	r0, #1
 8002680:	f001 fbdc 	bl	8003e3c <HAL_Delay>
	    while (!adcDataReady) {
 8002684:	4b9e      	ldr	r3, [pc, #632]	@ (8002900 <command+0x958>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ce      	beq.n	800262c <command+0x684>
	    }

	    char msg[100];
	    if (strcmp(token3, "1") == 0) {
 800268e:	499d      	ldr	r1, [pc, #628]	@ (8002904 <command+0x95c>)
 8002690:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002694:	f7fd fd5c 	bl	8000150 <strcmp>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d120      	bne.n	80026e0 <command+0x738>
	        int len = sprintf(msg, "PA2 Voltage: %.2f V\r\n", adcToVoltage(adcValues[0]));
 800269e:	4b9a      	ldr	r3, [pc, #616]	@ (8002908 <command+0x960>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fc64 	bl	8001f70 <adcToVoltage>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fec6 	bl	800043c <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	f107 0008 	add.w	r0, r7, #8
 80026b8:	4994      	ldr	r1, [pc, #592]	@ (800290c <command+0x964>)
 80026ba:	f007 fe17 	bl	800a2ec <siprintf>
 80026be:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80026c2:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f107 0108 	add.w	r1, r7, #8
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	4889      	ldr	r0, [pc, #548]	@ (80028f8 <command+0x950>)
 80026d2:	f006 f977 	bl	80089c4 <HAL_UART_Transmit>
	 //       for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	 //      	                adcValues[i] = 0;
	 //      	           }
	        process_uart = false;  // Komut işlendi, flag kapat
 80026d6:	4b89      	ldr	r3, [pc, #548]	@ (80028fc <command+0x954>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 80026dc:	f000 bfa0 	b.w	8003620 <command+0x1678>
	    }
	    else if (strcmp(token3, "2") == 0) {
 80026e0:	498b      	ldr	r1, [pc, #556]	@ (8002910 <command+0x968>)
 80026e2:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80026e6:	f7fd fd33 	bl	8000150 <strcmp>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d123      	bne.n	8002738 <command+0x790>
	        int len = sprintf(msg, "PA3 Voltage: %.2f V\r\n", adcToVoltage(adcValues[1]));
 80026f0:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <command+0x960>)
 80026f2:	885b      	ldrh	r3, [r3, #2]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fc3b 	bl	8001f70 <adcToVoltage>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fe9d 	bl	800043c <__aeabi_f2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	f107 0008 	add.w	r0, r7, #8
 800270a:	4982      	ldr	r1, [pc, #520]	@ (8002914 <command+0x96c>)
 800270c:	f007 fdee 	bl	800a2ec <siprintf>
 8002710:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002714:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8002718:	b29a      	uxth	r2, r3
 800271a:	f107 0108 	add.w	r1, r7, #8
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	4875      	ldr	r0, [pc, #468]	@ (80028f8 <command+0x950>)
 8002724:	f006 f94e 	bl	80089c4 <HAL_UART_Transmit>
	        process_uart = false;
 8002728:	4b74      	ldr	r3, [pc, #464]	@ (80028fc <command+0x954>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
	       // for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	       	 //               adcValues[i] = 0;
	       	   //        }
	        process_uart = false;
 800272e:	4b73      	ldr	r3, [pc, #460]	@ (80028fc <command+0x954>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
	            return;
 8002734:	f000 bf74 	b.w	8003620 <command+0x1678>
	    }
	    else if (strcmp(token3, "3") == 0) {
 8002738:	4977      	ldr	r1, [pc, #476]	@ (8002918 <command+0x970>)
 800273a:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 800273e:	f7fd fd07 	bl	8000150 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d120      	bne.n	800278a <command+0x7e2>
	        int len = sprintf(msg, "PA4 Voltage: %.2f V\r\n", adcToVoltage(adcValues[2]));
 8002748:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <command+0x960>)
 800274a:	889b      	ldrh	r3, [r3, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fc0f 	bl	8001f70 <adcToVoltage>
 8002752:	4603      	mov	r3, r0
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fe71 	bl	800043c <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	f107 0008 	add.w	r0, r7, #8
 8002762:	496e      	ldr	r1, [pc, #440]	@ (800291c <command+0x974>)
 8002764:	f007 fdc2 	bl	800a2ec <siprintf>
 8002768:	f8c7 022c 	str.w	r0, [r7, #556]	@ 0x22c
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800276c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8002770:	b29a      	uxth	r2, r3
 8002772:	f107 0108 	add.w	r1, r7, #8
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	485f      	ldr	r0, [pc, #380]	@ (80028f8 <command+0x950>)
 800277c:	f006 f922 	bl	80089c4 <HAL_UART_Transmit>
	//        for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      // 	                adcValues[i] = 0;
//	       	           }
	        process_uart = false;
 8002780:	4b5e      	ldr	r3, [pc, #376]	@ (80028fc <command+0x954>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
	            return;
 8002786:	f000 bf4b 	b.w	8003620 <command+0x1678>
	    }
	    else if (strcmp(token3, "ALL") == 0) {
 800278a:	4965      	ldr	r1, [pc, #404]	@ (8002920 <command+0x978>)
 800278c:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002790:	f7fd fcde 	bl	8000150 <strcmp>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d169      	bne.n	800286e <command+0x8c6>
	    	if (adcDataReady) {
 800279a:	4b59      	ldr	r3, [pc, #356]	@ (8002900 <command+0x958>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05c      	beq.n	800285e <command+0x8b6>
	    	    adcDataReady = false; // bayrağı sıfırla
 80027a4:	4b56      	ldr	r3, [pc, #344]	@ (8002900 <command+0x958>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]

	    	    printf("ADC Conversion Complete\r\n");
 80027aa:	485e      	ldr	r0, [pc, #376]	@ (8002924 <command+0x97c>)
 80027ac:	f007 fd96 	bl	800a2dc <puts>
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
	    	           adcValues[0] * 3.3f / 4095.0f,
 80027b0:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <command+0x960>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fa7b 	bl	8000cb0 <__aeabi_i2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	495a      	ldr	r1, [pc, #360]	@ (8002928 <command+0x980>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe faca 	bl	8000d58 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4959      	ldr	r1, [pc, #356]	@ (800292c <command+0x984>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fb79 	bl	8000ec0 <__aeabi_fdiv>
 80027ce:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe33 	bl	800043c <__aeabi_f2d>
 80027d6:	4680      	mov	r8, r0
 80027d8:	4689      	mov	r9, r1
	    	           adcValues[1] * 3.3f / 4095.0f,
 80027da:	4b4b      	ldr	r3, [pc, #300]	@ (8002908 <command+0x960>)
 80027dc:	885b      	ldrh	r3, [r3, #2]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fa66 	bl	8000cb0 <__aeabi_i2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4950      	ldr	r1, [pc, #320]	@ (8002928 <command+0x980>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fab5 	bl	8000d58 <__aeabi_fmul>
 80027ee:	4603      	mov	r3, r0
 80027f0:	494e      	ldr	r1, [pc, #312]	@ (800292c <command+0x984>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb64 	bl	8000ec0 <__aeabi_fdiv>
 80027f8:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe1e 	bl	800043c <__aeabi_f2d>
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
	    	           adcValues[2] * 3.3f / 4095.0f);
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <command+0x960>)
 8002806:	889b      	ldrh	r3, [r3, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fa51 	bl	8000cb0 <__aeabi_i2f>
 800280e:	4603      	mov	r3, r0
 8002810:	4945      	ldr	r1, [pc, #276]	@ (8002928 <command+0x980>)
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe faa0 	bl	8000d58 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	4944      	ldr	r1, [pc, #272]	@ (800292c <command+0x984>)
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fb4f 	bl	8000ec0 <__aeabi_fdiv>
 8002822:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe09 	bl	800043c <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	f107 0008 	add.w	r0, r7, #8
 8002832:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002836:	e9cd 4500 	strd	r4, r5, [sp]
 800283a:	4642      	mov	r2, r8
 800283c:	464b      	mov	r3, r9
 800283e:	493c      	ldr	r1, [pc, #240]	@ (8002930 <command+0x988>)
 8002840:	f007 fd54 	bl	800a2ec <siprintf>
 8002844:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
	    	 HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002848:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800284c:	b29a      	uxth	r2, r3
 800284e:	f107 0108 	add.w	r1, r7, #8
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	4828      	ldr	r0, [pc, #160]	@ (80028f8 <command+0x950>)
 8002858:	f006 f8b4 	bl	80089c4 <HAL_UART_Transmit>
 800285c:	e002      	b.n	8002864 <command+0x8bc>
	    	} else {
	    	    printf("ADC read timeout\r\n");
 800285e:	4835      	ldr	r0, [pc, #212]	@ (8002934 <command+0x98c>)
 8002860:	f007 fd3c 	bl	800a2dc <puts>
	    	}
	    //    for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      //          adcValues[i] = 0;
	        //   }
	        process_uart = false;  // Komut işlendi, flag kapat
 8002864:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <command+0x954>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 800286a:	f000 bed9 	b.w	8003620 <command+0x1678>
	    }
	    else if (strcmp(token3, "RESISTOR") == 0) {
 800286e:	4932      	ldr	r1, [pc, #200]	@ (8002938 <command+0x990>)
 8002870:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002874:	f7fd fc6c 	bl	8000150 <strcmp>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8097 	bne.w	80029ae <command+0xa06>
	        float vOut = adcToVoltage(adcValues[2]);  // PA4
 8002880:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <command+0x960>)
 8002882:	889b      	ldrh	r3, [r3, #4]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb73 	bl	8001f70 <adcToVoltage>
 800288a:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
	        float rFixed = 1000.0f;
 800288e:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <command+0x994>)
 8002890:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
	        float vIn = 3.3f;
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <command+0x980>)
 8002896:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240

	        if (vOut <= 0.01f || vOut >= 3.29f) {
 800289a:	4929      	ldr	r1, [pc, #164]	@ (8002940 <command+0x998>)
 800289c:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80028a0:	f7fe fc02 	bl	80010a8 <__aeabi_fcmple>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d107      	bne.n	80028ba <command+0x912>
 80028aa:	4926      	ldr	r1, [pc, #152]	@ (8002944 <command+0x99c>)
 80028ac:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80028b0:	f7fe fc04 	bl	80010bc <__aeabi_fcmpge>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d048      	beq.n	800294c <command+0x9a4>
	            int len = sprintf(msg, "Gecersiz Vout: %.2f V - \r\n", vOut);
 80028ba:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80028be:	f7fd fdbd 	bl	800043c <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	f107 0008 	add.w	r0, r7, #8
 80028ca:	491f      	ldr	r1, [pc, #124]	@ (8002948 <command+0x9a0>)
 80028cc:	f007 fd0e 	bl	800a2ec <siprintf>
 80028d0:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80028d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80028d8:	b29a      	uxth	r2, r3
 80028da:	f107 0108 	add.w	r1, r7, #8
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <command+0x950>)
 80028e4:	f006 f86e 	bl	80089c4 <HAL_UART_Transmit>
	            process_uart = false;
 80028e8:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <command+0x954>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	            return;
 80028ee:	f000 be97 	b.w	8003620 <command+0x1678>
 80028f2:	bf00      	nop
 80028f4:	0800cbd0 	.word	0x0800cbd0
 80028f8:	20000568 	.word	0x20000568
 80028fc:	2000063e 	.word	0x2000063e
 8002900:	200005b0 	.word	0x200005b0
 8002904:	0800c814 	.word	0x0800c814
 8002908:	200005b4 	.word	0x200005b4
 800290c:	0800c818 	.word	0x0800c818
 8002910:	0800c830 	.word	0x0800c830
 8002914:	0800c834 	.word	0x0800c834
 8002918:	0800c84c 	.word	0x0800c84c
 800291c:	0800c850 	.word	0x0800c850
 8002920:	0800c868 	.word	0x0800c868
 8002924:	0800c86c 	.word	0x0800c86c
 8002928:	40533333 	.word	0x40533333
 800292c:	457ff000 	.word	0x457ff000
 8002930:	0800c888 	.word	0x0800c888
 8002934:	0800c8b0 	.word	0x0800c8b0
 8002938:	0800c8c4 	.word	0x0800c8c4
 800293c:	447a0000 	.word	0x447a0000
 8002940:	3c23d70a 	.word	0x3c23d70a
 8002944:	40528f5c 	.word	0x40528f5c
 8002948:	0800c8d0 	.word	0x0800c8d0
	        }

	        float rUnknown = (rFixed) * (vOut / (vIn - vOut));
 800294c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002950:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8002954:	f7fe f8f6 	bl	8000b44 <__aeabi_fsub>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8002960:	f7fe faae 	bl	8000ec0 <__aeabi_fdiv>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 800296c:	f7fe f9f4 	bl	8000d58 <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
	        int len = sprintf(msg, "R degeri: %.2f Ohm\r\n", rUnknown);
 8002976:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 800297a:	f7fd fd5f 	bl	800043c <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	f107 0008 	add.w	r0, r7, #8
 8002986:	49c3      	ldr	r1, [pc, #780]	@ (8002c94 <command+0xcec>)
 8002988:	f007 fcb0 	bl	800a2ec <siprintf>
 800298c:	f8c7 0238 	str.w	r0, [r7, #568]	@ 0x238
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002990:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8002994:	b29a      	uxth	r2, r3
 8002996:	f107 0108 	add.w	r1, r7, #8
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	48be      	ldr	r0, [pc, #760]	@ (8002c98 <command+0xcf0>)
 80029a0:	f006 f810 	bl	80089c4 <HAL_UART_Transmit>
	     //   for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      //  	                adcValues[i] = 0;
	       // 	            }
	        process_uart = false;  // Komut işlendi, flag kapat
 80029a4:	4bbd      	ldr	r3, [pc, #756]	@ (8002c9c <command+0xcf4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 80029aa:	f000 be39 	b.w	8003620 <command+0x1678>
	    }
	    else {
	        int len = sprintf(msg, "Hatali giris yaptiniz: %s\r\n", token3);
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80029b6:	49ba      	ldr	r1, [pc, #744]	@ (8002ca0 <command+0xcf8>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f007 fc97 	bl	800a2ec <siprintf>
 80029be:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80029c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	f107 0108 	add.w	r1, r7, #8
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	48b1      	ldr	r0, [pc, #708]	@ (8002c98 <command+0xcf0>)
 80029d2:	f005 fff7 	bl	80089c4 <HAL_UART_Transmit>
	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "SHOW") == 0) {
 80029d6:	f000 be19 	b.w	800360c <command+0x1664>
	    }
	}
	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "MEASURE") == 0)
 80029da:	49b2      	ldr	r1, [pc, #712]	@ (8002ca4 <command+0xcfc>)
 80029dc:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 80029e0:	f7fd fbb6 	bl	8000150 <strcmp>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d154      	bne.n	8002a94 <command+0xaec>
 80029ea:	49af      	ldr	r1, [pc, #700]	@ (8002ca8 <command+0xd00>)
 80029ec:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 80029f0:	f7fd fbae 	bl	8000150 <strcmp>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d14c      	bne.n	8002a94 <command+0xaec>
	{
	    if (token3 == NULL)
 80029fa:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11f      	bne.n	8002a42 <command+0xa9a>
	    {
	        char msg[] = "ADC;MEASURE;CAP komutu eksik.\r\n";
 8002a02:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002a06:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002a0a:	4aa8      	ldr	r2, [pc, #672]	@ (8002cac <command+0xd04>)
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	4615      	mov	r5, r2
 8002a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fb9f 	bl	8000164 <strlen>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	f107 0108 	add.w	r1, r7, #8
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	4899      	ldr	r0, [pc, #612]	@ (8002c98 <command+0xcf0>)
 8002a34:	f005 ffc6 	bl	80089c4 <HAL_UART_Transmit>
	        process_uart = false;
 8002a38:	4b98      	ldr	r3, [pc, #608]	@ (8002c9c <command+0xcf4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	f000 bdef 	b.w	8003620 <command+0x1678>
	        return;
	    }

	    if (strcmp(token3, "CAP") == 0)
 8002a42:	499b      	ldr	r1, [pc, #620]	@ (8002cb0 <command+0xd08>)
 8002a44:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002a48:	f7fd fb82 	bl	8000150 <strcmp>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 85dc 	bne.w	800360c <command+0x1664>
	    {
	        float cap_uF = measureCapacitance();
 8002a54:	f7ff f966 	bl	8001d24 <measureCapacitance>
 8002a58:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
	        char msg[64];
	        int len = sprintf(msg, "Olculen kapasite: %.2f uF\r\n", cap_uF);
 8002a5c:	f8d7 0220 	ldr.w	r0, [r7, #544]	@ 0x220
 8002a60:	f7fd fcec 	bl	800043c <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	f107 0008 	add.w	r0, r7, #8
 8002a6c:	4991      	ldr	r1, [pc, #580]	@ (8002cb4 <command+0xd0c>)
 8002a6e:	f007 fc3d 	bl	800a2ec <siprintf>
 8002a72:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002a76:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	f107 0108 	add.w	r1, r7, #8
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	4884      	ldr	r0, [pc, #528]	@ (8002c98 <command+0xcf0>)
 8002a86:	f005 ff9d 	bl	80089c4 <HAL_UART_Transmit>
	        process_uart = false;
 8002a8a:	4b84      	ldr	r3, [pc, #528]	@ (8002c9c <command+0xcf4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	f000 bdc6 	b.w	8003620 <command+0x1678>
	        return;
	    }
	}


	else if(strcmp(token1, "ADXL") == 0 && strcmp(token2, "SERVO") == 0 && strcmp(token3,"Y") == 0){
 8002a94:	4988      	ldr	r1, [pc, #544]	@ (8002cb8 <command+0xd10>)
 8002a96:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8002a9a:	f7fd fb59 	bl	8000150 <strcmp>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f040 80b2 	bne.w	8002c0a <command+0xc62>
 8002aa6:	4985      	ldr	r1, [pc, #532]	@ (8002cbc <command+0xd14>)
 8002aa8:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002aac:	f7fd fb50 	bl	8000150 <strcmp>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 80a9 	bne.w	8002c0a <command+0xc62>
 8002ab8:	4981      	ldr	r1, [pc, #516]	@ (8002cc0 <command+0xd18>)
 8002aba:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002abe:	f7fd fb47 	bl	8000150 <strcmp>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 80a0 	bne.w	8002c0a <command+0xc62>
		if (token4 == NULL){
 8002aca:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d124      	bne.n	8002b1c <command+0xb74>
			char msg[] = "ADXL;SERVO;<ON-OFF> yapiniz. \r\n";
 8002ad2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ad6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002ada:	4a7a      	ldr	r2, [pc, #488]	@ (8002cc4 <command+0xd1c>)
 8002adc:	461c      	mov	r4, r3
 8002ade:	4615      	mov	r5, r2
 8002ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fb37 	bl	8000164 <strlen>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f107 0108 	add.w	r1, r7, #8
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	4865      	ldr	r0, [pc, #404]	@ (8002c98 <command+0xcf0>)
 8002b04:	f005 ff5e 	bl	80089c4 <HAL_UART_Transmit>
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	486e      	ldr	r0, [pc, #440]	@ (8002cc8 <command+0xd20>)
 8002b0e:	f007 fce7 	bl	800a4e0 <memset>
			    process_uart = false;
 8002b12:	4b62      	ldr	r3, [pc, #392]	@ (8002c9c <command+0xcf4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	f000 bd82 	b.w	8003620 <command+0x1678>
			return;
		}
		if (strcmp(token4, "ON") == 0){
 8002b1c:	496b      	ldr	r1, [pc, #428]	@ (8002ccc <command+0xd24>)
 8002b1e:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 8002b22:	f7fd fb15 	bl	8000150 <strcmp>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11e      	bne.n	8002b6a <command+0xbc2>
			servoFollowY = true;
 8002b2c:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <command+0xd28>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
			char msg[] = "SERVO Y takip modu aktif. \r\n";
 8002b32:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b3a:	4a66      	ldr	r2, [pc, #408]	@ (8002cd4 <command+0xd2c>)
 8002b3c:	461c      	mov	r4, r3
 8002b3e:	4615      	mov	r5, r2
 8002b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b48:	c407      	stmia	r4!, {r0, r1, r2}
 8002b4a:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b4c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fb07 	bl	8000164 <strlen>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	484d      	ldr	r0, [pc, #308]	@ (8002c98 <command+0xcf0>)
 8002b64:	f005 ff2e 	bl	80089c4 <HAL_UART_Transmit>
 8002b68:	e045      	b.n	8002bf6 <command+0xc4e>
		}
		else if(strcmp(token4, "OFF") == 0){
 8002b6a:	495b      	ldr	r1, [pc, #364]	@ (8002cd8 <command+0xd30>)
 8002b6c:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 8002b70:	f7fd faee 	bl	8000150 <strcmp>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11e      	bne.n	8002bb8 <command+0xc10>
			servoFollowY = false;
 8002b7a:	4b55      	ldr	r3, [pc, #340]	@ (8002cd0 <command+0xd28>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
			char msg[] = "SERVO Y takip modu kapatildi. \r\n";
 8002b80:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b84:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002b88:	4a54      	ldr	r2, [pc, #336]	@ (8002cdc <command+0xd34>)
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	4615      	mov	r5, r2
 8002b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fae0 	bl	8000164 <strlen>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f107 0108 	add.w	r1, r7, #8
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	4839      	ldr	r0, [pc, #228]	@ (8002c98 <command+0xcf0>)
 8002bb2:	f005 ff07 	bl	80089c4 <HAL_UART_Transmit>
 8002bb6:	e01e      	b.n	8002bf6 <command+0xc4e>
		}
		else{
			char msg[] = "Yanlis komut girdiniz. Ornek komutlar icin HELP; yaziniz. \r\n";
 8002bb8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002bbc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002bc0:	4a47      	ldr	r2, [pc, #284]	@ (8002ce0 <command+0xd38>)
 8002bc2:	461c      	mov	r4, r3
 8002bc4:	4615      	mov	r5, r2
 8002bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bd6:	c407      	stmia	r4!, {r0, r1, r2}
 8002bd8:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fac0 	bl	8000164 <strlen>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	f107 0108 	add.w	r1, r7, #8
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	4829      	ldr	r0, [pc, #164]	@ (8002c98 <command+0xcf0>)
 8002bf2:	f005 fee7 	bl	80089c4 <HAL_UART_Transmit>
		}
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4833      	ldr	r0, [pc, #204]	@ (8002cc8 <command+0xd20>)
 8002bfc:	f007 fc70 	bl	800a4e0 <memset>
		    process_uart = false;
 8002c00:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <command+0xcf4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
		return;
 8002c06:	f000 bd0b 	b.w	8003620 <command+0x1678>
	}

	else if(strcmp(token1, "ADXL") == 0 && strcmp(token2, "ACC") == 0 && strcmp(token3,"LED") == 0){
 8002c0a:	492b      	ldr	r1, [pc, #172]	@ (8002cb8 <command+0xd10>)
 8002c0c:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8002c10:	f7fd fa9e 	bl	8000150 <strcmp>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80e1 	bne.w	8002dde <command+0xe36>
 8002c1c:	4931      	ldr	r1, [pc, #196]	@ (8002ce4 <command+0xd3c>)
 8002c1e:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002c22:	f7fd fa95 	bl	8000150 <strcmp>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 80d8 	bne.w	8002dde <command+0xe36>
 8002c2e:	492e      	ldr	r1, [pc, #184]	@ (8002ce8 <command+0xd40>)
 8002c30:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002c34:	f7fd fa8c 	bl	8000150 <strcmp>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80cf 	bne.w	8002dde <command+0xe36>
			if (token4 == NULL){
 8002c40:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d153      	bne.n	8002cf0 <command+0xd48>
				char msg[] = "ADXL;ACC;LED;<ON-OFF> yapiniz. \r\n";
 8002c48:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002c4c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002c50:	4a26      	ldr	r2, [pc, #152]	@ (8002cec <command+0xd44>)
 8002c52:	461c      	mov	r4, r3
 8002c54:	4615      	mov	r5, r2
 8002c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fa7c 	bl	8000164 <strlen>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	f107 0108 	add.w	r1, r7, #8
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	4807      	ldr	r0, [pc, #28]	@ (8002c98 <command+0xcf0>)
 8002c7a:	f005 fea3 	bl	80089c4 <HAL_UART_Transmit>
				memset(rxBuffer, 0, sizeof(rxBuffer));
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	2100      	movs	r1, #0
 8002c82:	4811      	ldr	r0, [pc, #68]	@ (8002cc8 <command+0xd20>)
 8002c84:	f007 fc2c 	bl	800a4e0 <memset>
				    process_uart = false;
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <command+0xcf4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	f000 bcc7 	b.w	8003620 <command+0x1678>
 8002c92:	bf00      	nop
 8002c94:	0800c8ec 	.word	0x0800c8ec
 8002c98:	20000568 	.word	0x20000568
 8002c9c:	2000063e 	.word	0x2000063e
 8002ca0:	0800c904 	.word	0x0800c904
 8002ca4:	0800c808 	.word	0x0800c808
 8002ca8:	0800c920 	.word	0x0800c920
 8002cac:	0800cbe4 	.word	0x0800cbe4
 8002cb0:	0800c928 	.word	0x0800c928
 8002cb4:	0800c92c 	.word	0x0800c92c
 8002cb8:	0800c948 	.word	0x0800c948
 8002cbc:	0800c950 	.word	0x0800c950
 8002cc0:	0800c958 	.word	0x0800c958
 8002cc4:	0800cc04 	.word	0x0800cc04
 8002cc8:	200005bc 	.word	0x200005bc
 8002ccc:	0800c71c 	.word	0x0800c71c
 8002cd0:	20000654 	.word	0x20000654
 8002cd4:	0800cc24 	.word	0x0800cc24
 8002cd8:	0800c720 	.word	0x0800c720
 8002cdc:	0800cc44 	.word	0x0800cc44
 8002ce0:	0800cc68 	.word	0x0800cc68
 8002ce4:	0800c95c 	.word	0x0800c95c
 8002ce8:	0800c718 	.word	0x0800c718
 8002cec:	0800cca8 	.word	0x0800cca8
				return;
			}
			if (strcmp(token4, "ON") == 0){
 8002cf0:	49be      	ldr	r1, [pc, #760]	@ (8002fec <command+0x1044>)
 8002cf2:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 8002cf6:	f7fd fa2b 	bl	8000150 <strcmp>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11e      	bne.n	8002d3e <command+0xd96>
				ledFollowAccX = true;
 8002d00:	4bbb      	ldr	r3, [pc, #748]	@ (8002ff0 <command+0x1048>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
				char msg[] = "LED-Ivme kontrol modu aktif. \r\n";
 8002d06:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002d0a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002d0e:	4ab9      	ldr	r2, [pc, #740]	@ (8002ff4 <command+0x104c>)
 8002d10:	461c      	mov	r4, r3
 8002d12:	4615      	mov	r5, r2
 8002d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fa1d 	bl	8000164 <strlen>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	f107 0108 	add.w	r1, r7, #8
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	48b0      	ldr	r0, [pc, #704]	@ (8002ff8 <command+0x1050>)
 8002d38:	f005 fe44 	bl	80089c4 <HAL_UART_Transmit>
 8002d3c:	e045      	b.n	8002dca <command+0xe22>
			}
			else if(strcmp(token4, "OFF") == 0){
 8002d3e:	49af      	ldr	r1, [pc, #700]	@ (8002ffc <command+0x1054>)
 8002d40:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 8002d44:	f7fd fa04 	bl	8000150 <strcmp>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11e      	bne.n	8002d8c <command+0xde4>
				ledFollowAccX = false;
 8002d4e:	4ba8      	ldr	r3, [pc, #672]	@ (8002ff0 <command+0x1048>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
				char msg[] = "LED-Ivme kontrol modu kapatildi. \r\n";
 8002d54:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002d58:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002d5c:	4aa8      	ldr	r2, [pc, #672]	@ (8003000 <command+0x1058>)
 8002d5e:	461c      	mov	r4, r3
 8002d60:	4615      	mov	r5, r2
 8002d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd f9f6 	bl	8000164 <strlen>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	f107 0108 	add.w	r1, r7, #8
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	489c      	ldr	r0, [pc, #624]	@ (8002ff8 <command+0x1050>)
 8002d86:	f005 fe1d 	bl	80089c4 <HAL_UART_Transmit>
 8002d8a:	e01e      	b.n	8002dca <command+0xe22>
			}
			else{
				char msg[] = "Yanlis komut girdiniz. Ornek komutlar icin HELP; yaziniz. \r\n";
 8002d8c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002d90:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002d94:	4a9b      	ldr	r2, [pc, #620]	@ (8003004 <command+0x105c>)
 8002d96:	461c      	mov	r4, r3
 8002d98:	4615      	mov	r5, r2
 8002d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002daa:	c407      	stmia	r4!, {r0, r1, r2}
 8002dac:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd f9d6 	bl	8000164 <strlen>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f107 0108 	add.w	r1, r7, #8
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc4:	488c      	ldr	r0, [pc, #560]	@ (8002ff8 <command+0x1050>)
 8002dc6:	f005 fdfd 	bl	80089c4 <HAL_UART_Transmit>
			}
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8002dca:	2280      	movs	r2, #128	@ 0x80
 8002dcc:	2100      	movs	r1, #0
 8002dce:	488e      	ldr	r0, [pc, #568]	@ (8003008 <command+0x1060>)
 8002dd0:	f007 fb86 	bl	800a4e0 <memset>
			    process_uart = false;
 8002dd4:	4b8d      	ldr	r3, [pc, #564]	@ (800300c <command+0x1064>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
			return;
 8002dda:	f000 bc21 	b.w	8003620 <command+0x1678>
		}

	else if(strcmp(token1, "I2C") == 0){
 8002dde:	498c      	ldr	r1, [pc, #560]	@ (8003010 <command+0x1068>)
 8002de0:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8002de4:	f7fd f9b4 	bl	8000150 <strcmp>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 828c 	bne.w	8003308 <command+0x1360>
	//		 char msg[] = "I2C komutu icin I2C;SCAN; yaziniz\r\n";
	//		 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	//		 memset(rxBuffer, 0, sizeof(rxBuffer));
	//		        process_uart = false;
	//		        return;
		if(strcmp(token2, "SCAN")== 0){
 8002df0:	4988      	ldr	r1, [pc, #544]	@ (8003014 <command+0x106c>)
 8002df2:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002df6:	f7fd f9ab 	bl	8000150 <strcmp>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d169      	bne.n	8002ed4 <command+0xf2c>
			 char msg[] = "I2C taramasi basladi.\r\n";
 8002e00:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002e04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e08:	4a83      	ldr	r2, [pc, #524]	@ (8003018 <command+0x1070>)
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4615      	mov	r5, r2
 8002e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e16:	e884 0003 	stmia.w	r4, {r0, r1}
			    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e1a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd f9a0 	bl	8000164 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	4871      	ldr	r0, [pc, #452]	@ (8002ff8 <command+0x1050>)
 8002e32:	f005 fdc7 	bl	80089c4 <HAL_UART_Transmit>

			    for(uint8_t adress = 1; adress < 128; adress++) {
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 327b 	strb.w	r3, [r7, #635]	@ 0x27b
 8002e3c:	e045      	b.n	8002eca <command+0xf22>
			    	if(HAL_I2C_IsDeviceReady(&hi2c1, (adress<<1), 2, 10) == HAL_OK){
 8002e3e:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b299      	uxth	r1, r3
 8002e48:	230a      	movs	r3, #10
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4873      	ldr	r0, [pc, #460]	@ (800301c <command+0x1074>)
 8002e4e:	f003 fa15 	bl	800627c <HAL_I2C_IsDeviceReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d133      	bne.n	8002ec0 <command+0xf18>
			    		char msg[32];
			    		sprintf(msg, "I2C cihaz bulundu:0x%02x\r\n", adress);
 8002e58:	f897 227b 	ldrb.w	r2, [r7, #635]	@ 0x27b
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	496f      	ldr	r1, [pc, #444]	@ (8003020 <command+0x1078>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f007 fa42 	bl	800a2ec <siprintf>
			    		char amsg[] = "I2C taramasi tamamlandi.\r\n";
 8002e68:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002e6c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e70:	4a6c      	ldr	r2, [pc, #432]	@ (8003024 <command+0x107c>)
 8002e72:	461c      	mov	r4, r3
 8002e74:	4615      	mov	r5, r2
 8002e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e7e:	c403      	stmia	r4!, {r0, r1}
 8002e80:	8022      	strh	r2, [r4, #0]
 8002e82:	3402      	adds	r4, #2
 8002e84:	0c13      	lsrs	r3, r2, #16
 8002e86:	7023      	strb	r3, [r4, #0]
			    						    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd f969 	bl	8000164 <strlen>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	f107 0108 	add.w	r1, r7, #8
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	4856      	ldr	r0, [pc, #344]	@ (8002ff8 <command+0x1050>)
 8002ea0:	f005 fd90 	bl	80089c4 <HAL_UART_Transmit>
			    		HAL_UART_Transmit(&huart1, (uint8_t*)amsg, strlen(amsg), HAL_MAX_DELAY);
 8002ea4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd f95b 	bl	8000164 <strlen>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	484f      	ldr	r0, [pc, #316]	@ (8002ff8 <command+0x1050>)
 8002ebc:	f005 fd82 	bl	80089c4 <HAL_UART_Transmit>
			    for(uint8_t adress = 1; adress < 128; adress++) {
 8002ec0:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f887 327b 	strb.w	r3, [r7, #635]	@ 0x27b
 8002eca:	f997 327b 	ldrsb.w	r3, [r7, #635]	@ 0x27b
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dab5      	bge.n	8002e3e <command+0xe96>
 8002ed2:	e39b      	b.n	800360c <command+0x1664>
			    	}
			    }
		}
	else if (strcmp(token1, "I2C") == 0 && (strcmp(token2, "DATA") == 0)){
 8002ed4:	494e      	ldr	r1, [pc, #312]	@ (8003010 <command+0x1068>)
 8002ed6:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8002eda:	f7fd f939 	bl	8000150 <strcmp>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 8393 	bne.w	800360c <command+0x1664>
 8002ee6:	4950      	ldr	r1, [pc, #320]	@ (8003028 <command+0x1080>)
 8002ee8:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002eec:	f7fd f930 	bl	8000150 <strcmp>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 838a 	bne.w	800360c <command+0x1664>
		adxl345_read_xyz(&hi2c1, &gx, &gy, &gz);
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <command+0x1084>)
 8002efa:	4a4d      	ldr	r2, [pc, #308]	@ (8003030 <command+0x1088>)
 8002efc:	494d      	ldr	r1, [pc, #308]	@ (8003034 <command+0x108c>)
 8002efe:	4847      	ldr	r0, [pc, #284]	@ (800301c <command+0x1074>)
 8002f00:	f7fe fed8 	bl	8001cb4 <adxl345_read_xyz>
		calc_acceleration_ms2(gx,gy,gz,&ax,&ay,&az);
 8002f04:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <command+0x108c>)
 8002f06:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f0a:	4b49      	ldr	r3, [pc, #292]	@ (8003030 <command+0x1088>)
 8002f0c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f10:	4b46      	ldr	r3, [pc, #280]	@ (800302c <command+0x1084>)
 8002f12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f16:	4b48      	ldr	r3, [pc, #288]	@ (8003038 <command+0x1090>)
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	4b48      	ldr	r3, [pc, #288]	@ (800303c <command+0x1094>)
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4b48      	ldr	r3, [pc, #288]	@ (8003040 <command+0x1098>)
 8002f20:	f7fe fe2a 	bl	8001b78 <calc_acceleration_ms2>
		if(token3 == NULL){
 8002f24:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11d      	bne.n	8002f68 <command+0xfc0>
			char msg[]="I2C;DATA;<gX,gY,gZ,aX,aY,aZ> yaziniz.\r\n";
 8002f2c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002f30:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002f34:	4a43      	ldr	r2, [pc, #268]	@ (8003044 <command+0x109c>)
 8002f36:	461c      	mov	r4, r3
 8002f38:	4615      	mov	r5, r2
 8002f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f46:	e884 0003 	stmia.w	r4, {r0, r1}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd f908 	bl	8000164 <strlen>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	f107 0108 	add.w	r1, r7, #8
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	4825      	ldr	r0, [pc, #148]	@ (8002ff8 <command+0x1050>)
 8002f62:	f005 fd2f 	bl	80089c4 <HAL_UART_Transmit>
 8002f66:	e1c6      	b.n	80032f6 <command+0x134e>
		}
		else if(strcmp(token3, "gX") == 0){
 8002f68:	4937      	ldr	r1, [pc, #220]	@ (8003048 <command+0x10a0>)
 8002f6a:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002f6e:	f7fd f8ef 	bl	8000150 <strcmp>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d118      	bne.n	8002faa <command+0x1002>
			char msg[64];
			sprintf(msg, "gX: %d \r\n", gx);
 8002f78:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <command+0x108c>)
 8002f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	4931      	ldr	r1, [pc, #196]	@ (800304c <command+0x10a4>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f007 f9b0 	bl	800a2ec <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002f8c:	f107 0308 	add.w	r3, r7, #8
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd f8e7 	bl	8000164 <strlen>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f107 0108 	add.w	r1, r7, #8
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	4815      	ldr	r0, [pc, #84]	@ (8002ff8 <command+0x1050>)
 8002fa4:	f005 fd0e 	bl	80089c4 <HAL_UART_Transmit>
 8002fa8:	e1a5      	b.n	80032f6 <command+0x134e>
		}
		else if(strcmp(token3, "gY") == 0){
 8002faa:	4929      	ldr	r1, [pc, #164]	@ (8003050 <command+0x10a8>)
 8002fac:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8002fb0:	f7fd f8ce 	bl	8000150 <strcmp>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d14e      	bne.n	8003058 <command+0x10b0>
					char msg[64];
					sprintf(msg, "gY: %d \r\n", gy);
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <command+0x1088>)
 8002fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	4923      	ldr	r1, [pc, #140]	@ (8003054 <command+0x10ac>)
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f007 f98f 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd f8c6 	bl	8000164 <strlen>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	f107 0108 	add.w	r1, r7, #8
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <command+0x1050>)
 8002fe6:	f005 fced 	bl	80089c4 <HAL_UART_Transmit>
 8002fea:	e184      	b.n	80032f6 <command+0x134e>
 8002fec:	0800c71c 	.word	0x0800c71c
 8002ff0:	20000655 	.word	0x20000655
 8002ff4:	0800cccc 	.word	0x0800cccc
 8002ff8:	20000568 	.word	0x20000568
 8002ffc:	0800c720 	.word	0x0800c720
 8003000:	0800ccec 	.word	0x0800ccec
 8003004:	0800cc68 	.word	0x0800cc68
 8003008:	200005bc 	.word	0x200005bc
 800300c:	2000063e 	.word	0x2000063e
 8003010:	0800c960 	.word	0x0800c960
 8003014:	0800c964 	.word	0x0800c964
 8003018:	0800cd10 	.word	0x0800cd10
 800301c:	20000478 	.word	0x20000478
 8003020:	0800c96c 	.word	0x0800c96c
 8003024:	0800cd28 	.word	0x0800cd28
 8003028:	0800c988 	.word	0x0800c988
 800302c:	20000644 	.word	0x20000644
 8003030:	20000642 	.word	0x20000642
 8003034:	20000640 	.word	0x20000640
 8003038:	20000650 	.word	0x20000650
 800303c:	2000064c 	.word	0x2000064c
 8003040:	20000648 	.word	0x20000648
 8003044:	0800cd44 	.word	0x0800cd44
 8003048:	0800c990 	.word	0x0800c990
 800304c:	0800c994 	.word	0x0800c994
 8003050:	0800c9a0 	.word	0x0800c9a0
 8003054:	0800c9a4 	.word	0x0800c9a4
				}
		else if(strcmp(token3, "gZ") == 0){
 8003058:	49c1      	ldr	r1, [pc, #772]	@ (8003360 <command+0x13b8>)
 800305a:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 800305e:	f7fd f877 	bl	8000150 <strcmp>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <command+0x10f2>
					char msg[64];
					sprintf(msg, "gZ: %d \r\n", gz);
 8003068:	4bbe      	ldr	r3, [pc, #760]	@ (8003364 <command+0x13bc>)
 800306a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800306e:	461a      	mov	r2, r3
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	49bc      	ldr	r1, [pc, #752]	@ (8003368 <command+0x13c0>)
 8003076:	4618      	mov	r0, r3
 8003078:	f007 f938 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd f86f 	bl	8000164 <strlen>
 8003086:	4603      	mov	r3, r0
 8003088:	b29a      	uxth	r2, r3
 800308a:	f107 0108 	add.w	r1, r7, #8
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	48b6      	ldr	r0, [pc, #728]	@ (800336c <command+0x13c4>)
 8003094:	f005 fc96 	bl	80089c4 <HAL_UART_Transmit>
 8003098:	e12d      	b.n	80032f6 <command+0x134e>
				}
		else if(strcmp(token3, "gALL") == 0){
 800309a:	49b5      	ldr	r1, [pc, #724]	@ (8003370 <command+0x13c8>)
 800309c:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80030a0:	f7fd f856 	bl	8000150 <strcmp>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d120      	bne.n	80030ec <command+0x1144>
					char msg[128];
					sprintf(msg, "gX: %d , gY: %d , gZ: %d \r\n", gx,gy,gz);
 80030aa:	4bb2      	ldr	r3, [pc, #712]	@ (8003374 <command+0x13cc>)
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4bb1      	ldr	r3, [pc, #708]	@ (8003378 <command+0x13d0>)
 80030b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4baa      	ldr	r3, [pc, #680]	@ (8003364 <command+0x13bc>)
 80030bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c0:	f107 0008 	add.w	r0, r7, #8
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	460b      	mov	r3, r1
 80030c8:	49ac      	ldr	r1, [pc, #688]	@ (800337c <command+0x13d4>)
 80030ca:	f007 f90f 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd f846 	bl	8000164 <strlen>
 80030d8:	4603      	mov	r3, r0
 80030da:	b29a      	uxth	r2, r3
 80030dc:	f107 0108 	add.w	r1, r7, #8
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	48a1      	ldr	r0, [pc, #644]	@ (800336c <command+0x13c4>)
 80030e6:	f005 fc6d 	bl	80089c4 <HAL_UART_Transmit>
 80030ea:	e104      	b.n	80032f6 <command+0x134e>
				}
		else if(strcmp(token3, "aX") == 0){
 80030ec:	49a4      	ldr	r1, [pc, #656]	@ (8003380 <command+0x13d8>)
 80030ee:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80030f2:	f7fd f82d 	bl	8000150 <strcmp>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11a      	bne.n	8003132 <command+0x118a>
			char msg[64];
			sprintf(msg, "aX: %.2f m/s2 \r\n", ax);
 80030fc:	4ba1      	ldr	r3, [pc, #644]	@ (8003384 <command+0x13dc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd f99b 	bl	800043c <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	f107 0008 	add.w	r0, r7, #8
 800310e:	499e      	ldr	r1, [pc, #632]	@ (8003388 <command+0x13e0>)
 8003110:	f007 f8ec 	bl	800a2ec <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd f823 	bl	8000164 <strlen>
 800311e:	4603      	mov	r3, r0
 8003120:	b29a      	uxth	r2, r3
 8003122:	f107 0108 	add.w	r1, r7, #8
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	4890      	ldr	r0, [pc, #576]	@ (800336c <command+0x13c4>)
 800312c:	f005 fc4a 	bl	80089c4 <HAL_UART_Transmit>
 8003130:	e0e1      	b.n	80032f6 <command+0x134e>
		}
		else if(strcmp(token3, "aY") == 0){
 8003132:	4996      	ldr	r1, [pc, #600]	@ (800338c <command+0x13e4>)
 8003134:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8003138:	f7fd f80a 	bl	8000150 <strcmp>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11a      	bne.n	8003178 <command+0x11d0>
					char msg[64];
					sprintf(msg, "aY: %.2f m/s2 \r\n", ay);
 8003142:	4b93      	ldr	r3, [pc, #588]	@ (8003390 <command+0x13e8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd f978 	bl	800043c <__aeabi_f2d>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	f107 0008 	add.w	r0, r7, #8
 8003154:	498f      	ldr	r1, [pc, #572]	@ (8003394 <command+0x13ec>)
 8003156:	f007 f8c9 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f800 	bl	8000164 <strlen>
 8003164:	4603      	mov	r3, r0
 8003166:	b29a      	uxth	r2, r3
 8003168:	f107 0108 	add.w	r1, r7, #8
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	487e      	ldr	r0, [pc, #504]	@ (800336c <command+0x13c4>)
 8003172:	f005 fc27 	bl	80089c4 <HAL_UART_Transmit>
 8003176:	e0be      	b.n	80032f6 <command+0x134e>
				}
		else if(strcmp(token3, "aZ") == 0){
 8003178:	4987      	ldr	r1, [pc, #540]	@ (8003398 <command+0x13f0>)
 800317a:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 800317e:	f7fc ffe7 	bl	8000150 <strcmp>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11a      	bne.n	80031be <command+0x1216>
					char msg[64];
					sprintf(msg, "aZ: %.2f m/s2 \r\n", az);
 8003188:	4b84      	ldr	r3, [pc, #528]	@ (800339c <command+0x13f4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f955 	bl	800043c <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	f107 0008 	add.w	r0, r7, #8
 800319a:	4981      	ldr	r1, [pc, #516]	@ (80033a0 <command+0x13f8>)
 800319c:	f007 f8a6 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fc ffdd 	bl	8000164 <strlen>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	f107 0108 	add.w	r1, r7, #8
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	486d      	ldr	r0, [pc, #436]	@ (800336c <command+0x13c4>)
 80031b8:	f005 fc04 	bl	80089c4 <HAL_UART_Transmit>
 80031bc:	e09b      	b.n	80032f6 <command+0x134e>
				}
		else if(strcmp(token3, "aALL") == 0){
 80031be:	4979      	ldr	r1, [pc, #484]	@ (80033a4 <command+0x13fc>)
 80031c0:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 80031c4:	f7fc ffc4 	bl	8000150 <strcmp>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12e      	bne.n	800322c <command+0x1284>
					char msg[64];
					sprintf(msg, "aX: %.2f m/s2 , aY: %.2f m/s2, aZ: %.2f m/s2 \r\n", ax,ay,az);
 80031ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003384 <command+0x13dc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f932 	bl	800043c <__aeabi_f2d>
 80031d8:	4680      	mov	r8, r0
 80031da:	4689      	mov	r9, r1
 80031dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003390 <command+0x13e8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f92b 	bl	800043c <__aeabi_f2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <command+0x13f4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f924 	bl	800043c <__aeabi_f2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	f107 0008 	add.w	r0, r7, #8
 80031fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003200:	e9cd 4500 	strd	r4, r5, [sp]
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	4967      	ldr	r1, [pc, #412]	@ (80033a8 <command+0x1400>)
 800320a:	f007 f86f 	bl	800a2ec <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4618      	mov	r0, r3
 8003214:	f7fc ffa6 	bl	8000164 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29a      	uxth	r2, r3
 800321c:	f107 0108 	add.w	r1, r7, #8
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	4851      	ldr	r0, [pc, #324]	@ (800336c <command+0x13c4>)
 8003226:	f005 fbcd 	bl	80089c4 <HAL_UART_Transmit>
 800322a:	e064      	b.n	80032f6 <command+0x134e>
				}
		else if(strcmp(token3, "ALL") == 0){
 800322c:	495f      	ldr	r1, [pc, #380]	@ (80033ac <command+0x1404>)
 800322e:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 8003232:	f7fc ff8d 	bl	8000150 <strcmp>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13d      	bne.n	80032b8 <command+0x1310>
					char msg[128];
					sprintf(msg, "gX: %d | gY: %d | gZ: %d \r\n"
 800323c:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <command+0x13cc>)
 800323e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003242:	469a      	mov	sl, r3
 8003244:	4b4c      	ldr	r3, [pc, #304]	@ (8003378 <command+0x13d0>)
 8003246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324a:	469b      	mov	fp, r3
 800324c:	4b45      	ldr	r3, [pc, #276]	@ (8003364 <command+0x13bc>)
 800324e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003252:	461e      	mov	r6, r3
 8003254:	4b4b      	ldr	r3, [pc, #300]	@ (8003384 <command+0x13dc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f8ef 	bl	800043c <__aeabi_f2d>
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <command+0x13e8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f8e8 	bl	800043c <__aeabi_f2d>
 800326c:	4680      	mov	r8, r0
 800326e:	4689      	mov	r9, r1
 8003270:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <command+0x13f4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f8e1 	bl	800043c <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	f107 0008 	add.w	r0, r7, #8
 8003282:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003286:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800328a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800328e:	9600      	str	r6, [sp, #0]
 8003290:	465b      	mov	r3, fp
 8003292:	4652      	mov	r2, sl
 8003294:	4946      	ldr	r1, [pc, #280]	@ (80033b0 <command+0x1408>)
 8003296:	f007 f829 	bl	800a2ec <siprintf>
								 "-----------------------------	\r\n"
								 "aX: %.2f m/s2 | aY: %.2f m/s2 | aZ: %.2f m/s2 \r\n", gx,gy,gz,ax,ay,az);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800329a:	f107 0308 	add.w	r3, r7, #8
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fc ff60 	bl	8000164 <strlen>
 80032a4:	4603      	mov	r3, r0
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	f107 0108 	add.w	r1, r7, #8
 80032ac:	f04f 33ff 	mov.w	r3, #4294967295
 80032b0:	482e      	ldr	r0, [pc, #184]	@ (800336c <command+0x13c4>)
 80032b2:	f005 fb87 	bl	80089c4 <HAL_UART_Transmit>
 80032b6:	e01e      	b.n	80032f6 <command+0x134e>
		}
		else {
			   char msg[] = "Hatali komut girdiniz. HELP; ile komutlara ulasabilirsiniz.";
 80032b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032bc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80032c0:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <command+0x140c>)
 80032c2:	461c      	mov	r4, r3
 80032c4:	4615      	mov	r5, r2
 80032c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fc ff40 	bl	8000164 <strlen>
 80032e4:	4603      	mov	r3, r0
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	f107 0108 	add.w	r1, r7, #8
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	481e      	ldr	r0, [pc, #120]	@ (800336c <command+0x13c4>)
 80032f2:	f005 fb67 	bl	80089c4 <HAL_UART_Transmit>
		}
		memset(rxBuffer, 0, sizeof(rxBuffer));
 80032f6:	2280      	movs	r2, #128	@ 0x80
 80032f8:	2100      	movs	r1, #0
 80032fa:	482f      	ldr	r0, [pc, #188]	@ (80033b8 <command+0x1410>)
 80032fc:	f007 f8f0 	bl	800a4e0 <memset>
		    process_uart = false;
 8003300:	4b2e      	ldr	r3, [pc, #184]	@ (80033bc <command+0x1414>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
		    return;
 8003306:	e18b      	b.n	8003620 <command+0x1678>
	}
}
	else if (strcmp(token1, "MCU") == 0) {
 8003308:	492d      	ldr	r1, [pc, #180]	@ (80033c0 <command+0x1418>)
 800330a:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 800330e:	f7fc ff1f 	bl	8000150 <strcmp>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 80a3 	bne.w	8003460 <command+0x14b8>
		if(token2 == NULL){
 800331a:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 800331e:	2b00      	cmp	r3, #0
 8003320:	d152      	bne.n	80033c8 <command+0x1420>
			char msg[] = "Reset atmak icin MCU;RESTART yaziniz.\r\n";
 8003322:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003326:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800332a:	4a26      	ldr	r2, [pc, #152]	@ (80033c4 <command+0x141c>)
 800332c:	461c      	mov	r4, r3
 800332e:	4615      	mov	r5, r2
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003338:	e895 0003 	ldmia.w	r5, {r0, r1}
 800333c:	e884 0003 	stmia.w	r4, {r0, r1}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	4618      	mov	r0, r3
 8003346:	f7fc ff0d 	bl	8000164 <strlen>
 800334a:	4603      	mov	r3, r0
 800334c:	b29a      	uxth	r2, r3
 800334e:	f107 0108 	add.w	r1, r7, #8
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	4805      	ldr	r0, [pc, #20]	@ (800336c <command+0x13c4>)
 8003358:	f005 fb34 	bl	80089c4 <HAL_UART_Transmit>
 800335c:	e156      	b.n	800360c <command+0x1664>
 800335e:	bf00      	nop
 8003360:	0800c9b0 	.word	0x0800c9b0
 8003364:	20000644 	.word	0x20000644
 8003368:	0800c9b4 	.word	0x0800c9b4
 800336c:	20000568 	.word	0x20000568
 8003370:	0800c9c0 	.word	0x0800c9c0
 8003374:	20000640 	.word	0x20000640
 8003378:	20000642 	.word	0x20000642
 800337c:	0800c9c8 	.word	0x0800c9c8
 8003380:	0800c9e4 	.word	0x0800c9e4
 8003384:	20000648 	.word	0x20000648
 8003388:	0800c9e8 	.word	0x0800c9e8
 800338c:	0800c9fc 	.word	0x0800c9fc
 8003390:	2000064c 	.word	0x2000064c
 8003394:	0800ca00 	.word	0x0800ca00
 8003398:	0800ca14 	.word	0x0800ca14
 800339c:	20000650 	.word	0x20000650
 80033a0:	0800ca18 	.word	0x0800ca18
 80033a4:	0800ca2c 	.word	0x0800ca2c
 80033a8:	0800ca34 	.word	0x0800ca34
 80033ac:	0800c868 	.word	0x0800c868
 80033b0:	0800ca64 	.word	0x0800ca64
 80033b4:	0800cd6c 	.word	0x0800cd6c
 80033b8:	200005bc 	.word	0x200005bc
 80033bc:	2000063e 	.word	0x2000063e
 80033c0:	0800cad0 	.word	0x0800cad0
 80033c4:	0800cda8 	.word	0x0800cda8
		}
		else if (strcmp(token2, "RESTART") == 0){
 80033c8:	4998      	ldr	r1, [pc, #608]	@ (800362c <command+0x1684>)
 80033ca:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 80033ce:	f7fc febf 	bl	8000150 <strcmp>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d123      	bne.n	8003420 <command+0x1478>
			char msg[] = "Sistem yeniden baslatiliyor.\r\n";
 80033d8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80033dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033e0:	4a93      	ldr	r2, [pc, #588]	@ (8003630 <command+0x1688>)
 80033e2:	461c      	mov	r4, r3
 80033e4:	4615      	mov	r5, r2
 80033e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033ee:	c407      	stmia	r4!, {r0, r1, r2}
 80033f0:	8023      	strh	r3, [r4, #0]
 80033f2:	3402      	adds	r4, #2
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80033f8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fc feb1 	bl	8000164 <strlen>
 8003402:	4603      	mov	r3, r0
 8003404:	b29a      	uxth	r2, r3
 8003406:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	4889      	ldr	r0, [pc, #548]	@ (8003634 <command+0x168c>)
 8003410:	f005 fad8 	bl	80089c4 <HAL_UART_Transmit>
			HAL_Delay(1000);
 8003414:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003418:	f000 fd10 	bl	8003e3c <HAL_Delay>
			NVIC_SystemReset();
 800341c:	f7fd fe88 	bl	8001130 <__NVIC_SystemReset>
		}
		else {
				char msg[] = "Gecersiz MCU komutu. Ornek komutlar icin HELP; yaziniz.\r\n";
 8003420:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003424:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8003428:	4a83      	ldr	r2, [pc, #524]	@ (8003638 <command+0x1690>)
 800342a:	461c      	mov	r4, r3
 800342c:	4615      	mov	r5, r2
 800342e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800343a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800343e:	c403      	stmia	r4!, {r0, r1}
 8003440:	8022      	strh	r2, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	4618      	mov	r0, r3
 8003448:	f7fc fe8c 	bl	8000164 <strlen>
 800344c:	4603      	mov	r3, r0
 800344e:	b29a      	uxth	r2, r3
 8003450:	f107 0108 	add.w	r1, r7, #8
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	4876      	ldr	r0, [pc, #472]	@ (8003634 <command+0x168c>)
 800345a:	f005 fab3 	bl	80089c4 <HAL_UART_Transmit>
 800345e:	e0d5      	b.n	800360c <command+0x1664>
			}
	}
	else if (strcmp(token1, "SERVO") == 0)
 8003460:	4976      	ldr	r1, [pc, #472]	@ (800363c <command+0x1694>)
 8003462:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8003466:	f7fc fe73 	bl	8000150 <strcmp>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 809c 	bne.w	80035aa <command+0x1602>
	{
	    if (token2 == NULL || strcmp(token2, "SET") != 0)
 8003472:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <command+0x14e2>
 800347a:	4971      	ldr	r1, [pc, #452]	@ (8003640 <command+0x1698>)
 800347c:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8003480:	f7fc fe66 	bl	8000150 <strcmp>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d025      	beq.n	80034d6 <command+0x152e>
	    {
	        char msg[] = "SERVO icin SERVO;SET; komutunu kullaniniz. \r\n";
 800348a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800348e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8003492:	4a6c      	ldr	r2, [pc, #432]	@ (8003644 <command+0x169c>)
 8003494:	461c      	mov	r4, r3
 8003496:	4615      	mov	r5, r2
 8003498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034a4:	c407      	stmia	r4!, {r0, r1, r2}
 80034a6:	8023      	strh	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc fe59 	bl	8000164 <strlen>
 80034b2:	4603      	mov	r3, r0
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f107 0108 	add.w	r1, r7, #8
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	485d      	ldr	r0, [pc, #372]	@ (8003634 <command+0x168c>)
 80034c0:	f005 fa80 	bl	80089c4 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	2100      	movs	r1, #0
 80034c8:	485f      	ldr	r0, [pc, #380]	@ (8003648 <command+0x16a0>)
 80034ca:	f007 f809 	bl	800a4e0 <memset>
	        process_uart = false;
 80034ce:	4b5f      	ldr	r3, [pc, #380]	@ (800364c <command+0x16a4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e0a4      	b.n	8003620 <command+0x1678>
	        return;
	    }

	    if (token3 == NULL)
 80034d6:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <command+0x1572>
	    {
	        char msg[] = "Lutfen servo acisi giriniz (-90 ile 90 arasi)\r\n";
 80034de:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80034e2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80034e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <command+0x16a8>)
 80034e8:	461c      	mov	r4, r3
 80034ea:	4615      	mov	r5, r2
 80034ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc fe2f 	bl	8000164 <strlen>
 8003506:	4603      	mov	r3, r0
 8003508:	b29a      	uxth	r2, r3
 800350a:	f107 0108 	add.w	r1, r7, #8
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	4848      	ldr	r0, [pc, #288]	@ (8003634 <command+0x168c>)
 8003514:	f005 fa56 	bl	80089c4 <HAL_UART_Transmit>
 8003518:	e082      	b.n	8003620 <command+0x1678>
	        return;
	    }

	    int angle = atoi(token3);
 800351a:	f8d7 026c 	ldr.w	r0, [r7, #620]	@ 0x26c
 800351e:	f006 f86b 	bl	80095f8 <atoi>
 8003522:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	    if (angle < -90 || angle > 90)
 8003526:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800352a:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 800352e:	db03      	blt.n	8003538 <command+0x1590>
 8003530:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8003534:	2b5a      	cmp	r3, #90	@ 0x5a
 8003536:	dd1d      	ble.n	8003574 <command+0x15cc>
	    {
	        char msg[] = "Servo acisi -90 ile 90 arasinda olmalidir\r\n";
 8003538:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800353c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8003540:	4a44      	ldr	r2, [pc, #272]	@ (8003654 <command+0x16ac>)
 8003542:	461c      	mov	r4, r3
 8003544:	4615      	mov	r5, r2
 8003546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003556:	f107 0308 	add.w	r3, r7, #8
 800355a:	4618      	mov	r0, r3
 800355c:	f7fc fe02 	bl	8000164 <strlen>
 8003560:	4603      	mov	r3, r0
 8003562:	b29a      	uxth	r2, r3
 8003564:	f107 0108 	add.w	r1, r7, #8
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	4831      	ldr	r0, [pc, #196]	@ (8003634 <command+0x168c>)
 800356e:	f005 fa29 	bl	80089c4 <HAL_UART_Transmit>
 8003572:	e055      	b.n	8003620 <command+0x1678>
	        return;
	    }

	    // Açıyı servoSetAngle ile ayarla
	    servoSetAngle(&htim2, TIM_CHANNEL_2, angle);
 8003574:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8003578:	2104      	movs	r1, #4
 800357a:	4837      	ldr	r0, [pc, #220]	@ (8003658 <command+0x16b0>)
 800357c:	f000 f876 	bl	800366c <servoSetAngle>

	    char msg[50];
	    int len = sprintf(msg, "Servo acisi ayarlandi: %d derece\r\n", angle);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8003588:	4934      	ldr	r1, [pc, #208]	@ (800365c <command+0x16b4>)
 800358a:	4618      	mov	r0, r3
 800358c:	f006 feae 	bl	800a2ec <siprintf>
 8003590:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8003594:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003598:	b29a      	uxth	r2, r3
 800359a:	f107 0108 	add.w	r1, r7, #8
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	4824      	ldr	r0, [pc, #144]	@ (8003634 <command+0x168c>)
 80035a4:	f005 fa0e 	bl	80089c4 <HAL_UART_Transmit>
 80035a8:	e030      	b.n	800360c <command+0x1664>
	}
	else if(strcmp(token1, "HELP")== 0){
 80035aa:	492d      	ldr	r1, [pc, #180]	@ (8003660 <command+0x16b8>)
 80035ac:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 80035b0:	f7fc fdce 	bl	8000150 <strcmp>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10b      	bne.n	80035d2 <command+0x162a>
		HAL_UART_Transmit(&huart1, (uint8_t*)exampleCommands, strlen(exampleCommands), HAL_MAX_DELAY);
 80035ba:	482a      	ldr	r0, [pc, #168]	@ (8003664 <command+0x16bc>)
 80035bc:	f7fc fdd2 	bl	8000164 <strlen>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	4926      	ldr	r1, [pc, #152]	@ (8003664 <command+0x16bc>)
 80035ca:	481a      	ldr	r0, [pc, #104]	@ (8003634 <command+0x168c>)
 80035cc:	f005 f9fa 	bl	80089c4 <HAL_UART_Transmit>
 80035d0:	e01c      	b.n	800360c <command+0x1664>
	}

		    else
		    {
		        char msg[] = "Bilinmeyen komut girdiniz.\r\n";
 80035d2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80035d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035da:	4a23      	ldr	r2, [pc, #140]	@ (8003668 <command+0x16c0>)
 80035dc:	461c      	mov	r4, r3
 80035de:	4615      	mov	r5, r2
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035e8:	c407      	stmia	r4!, {r0, r1, r2}
 80035ea:	7023      	strb	r3, [r4, #0]
		        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80035ec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc fdb7 	bl	8000164 <strlen>
 80035f6:	4603      	mov	r3, r0
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	480c      	ldr	r0, [pc, #48]	@ (8003634 <command+0x168c>)
 8003604:	f005 f9de 	bl	80089c4 <HAL_UART_Transmit>
 8003608:	e000      	b.n	800360c <command+0x1664>
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 800360a:	bf00      	nop
		    }
	memset(rxBuffer,0,sizeof(rxBuffer));
 800360c:	2280      	movs	r2, #128	@ 0x80
 800360e:	2100      	movs	r1, #0
 8003610:	480d      	ldr	r0, [pc, #52]	@ (8003648 <command+0x16a0>)
 8003612:	f006 ff65 	bl	800a4e0 <memset>
	process_uart = false;
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <command+0x16a4>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e000      	b.n	8003620 <command+0x1678>
	if (token1 == NULL) return;
 800361e:	bf00      	nop

}
 8003620:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	0800cad4 	.word	0x0800cad4
 8003630:	0800cdd0 	.word	0x0800cdd0
 8003634:	20000568 	.word	0x20000568
 8003638:	0800cdf0 	.word	0x0800cdf0
 800363c:	0800c950 	.word	0x0800c950
 8003640:	0800c770 	.word	0x0800c770
 8003644:	0800ce2c 	.word	0x0800ce2c
 8003648:	200005bc 	.word	0x200005bc
 800364c:	2000063e 	.word	0x2000063e
 8003650:	0800ce5c 	.word	0x0800ce5c
 8003654:	0800ce8c 	.word	0x0800ce8c
 8003658:	200004d8 	.word	0x200004d8
 800365c:	0800cadc 	.word	0x0800cadc
 8003660:	0800cb00 	.word	0x0800cb00
 8003664:	20000000 	.word	0x20000000
 8003668:	0800ceb8 	.word	0x0800ceb8

0800366c <servoSetAngle>:
		        char msg[50];
		        int len = sprintf(msg, "PWM duty yuzde olarak ayarlandi: %d%%\r\n", pwmValue);
		        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
		    }
		    */
void servoSetAngle(TIM_HandleTypeDef *htim, uint32_t channel, int angle) {
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	@ 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
	if(angle < -90) angle = -90;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 800367e:	da02      	bge.n	8003686 <servoSetAngle+0x1a>
 8003680:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8003684:	607b      	str	r3, [r7, #4]
	if(angle > 90) angle = 90; // max ve min degerde kalsın
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b5a      	cmp	r3, #90	@ 0x5a
 800368a:	dd01      	ble.n	8003690 <servoSetAngle+0x24>
 800368c:	235a      	movs	r3, #90	@ 0x5a
 800368e:	607b      	str	r3, [r7, #4]

	int shift_angle = angle + 90;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	335a      	adds	r3, #90	@ 0x5a
 8003694:	61bb      	str	r3, [r7, #24]
	uint32_t pulse_width_us = 500 + ((uint32_t)shift_angle * 2000) / 180; // us cinsinden ayar -90 shifted ile 0 oluyor. 500 us OLUYOR o da.
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <servoSetAngle+0xa0>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80036ae:	617b      	str	r3, [r7, #20]
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	613b      	str	r3, [r7, #16]
	uint32_t ccr_value = pulse_width_us;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	61fb      	str	r3, [r7, #28]
	if(ccr_value > arr) ccr_value = arr;
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d901      	bls.n	80036c8 <servoSetAngle+0x5c>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	61fb      	str	r3, [r7, #28]
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <servoSetAngle+0x6c>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036d6:	e013      	b.n	8003700 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d104      	bne.n	80036e8 <servoSetAngle+0x7c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036e6:	e00b      	b.n	8003700 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d104      	bne.n	80036f8 <servoSetAngle+0x8c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80036f6:	e003      	b.n	8003700 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003700:	bf00      	nop
 8003702:	3724      	adds	r7, #36	@ 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	16c16c17 	.word	0x16c16c17

08003710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003714:	b672      	cpsid	i
}
 8003716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <Error_Handler+0x8>

0800371c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <HAL_MspInit+0x5c>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	4a14      	ldr	r2, [pc, #80]	@ (8003778 <HAL_MspInit+0x5c>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6193      	str	r3, [r2, #24]
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_MspInit+0x5c>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <HAL_MspInit+0x5c>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4a0e      	ldr	r2, [pc, #56]	@ (8003778 <HAL_MspInit+0x5c>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	61d3      	str	r3, [r2, #28]
 8003746:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_MspInit+0x5c>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_MspInit+0x60>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <HAL_MspInit+0x60>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000

08003780 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a28      	ldr	r2, [pc, #160]	@ (800383c <HAL_ADC_MspInit+0xbc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d149      	bne.n	8003834 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4a26      	ldr	r2, [pc, #152]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037aa:	6193      	str	r3, [r2, #24]
 80037ac:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b8:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4a20      	ldr	r2, [pc, #128]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	6193      	str	r3, [r2, #24]
 80037c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <HAL_ADC_MspInit+0xc0>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80037d0:	233c      	movs	r3, #60	@ 0x3c
 80037d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037d4:	2303      	movs	r3, #3
 80037d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	4619      	mov	r1, r3
 80037de:	4819      	ldr	r0, [pc, #100]	@ (8003844 <HAL_ADC_MspInit+0xc4>)
 80037e0:	f001 fece 	bl	8005580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80037e4:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 80037e6:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_ADC_MspInit+0xcc>)
 80037e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ea:	4b17      	ldr	r3, [pc, #92]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037fc:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 80037fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003802:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 8003806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800380a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800380c:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 800381a:	f001 fa0f 	bl	8004c3c <HAL_DMA_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003824:	f7ff ff74 	bl	8003710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a07      	ldr	r2, [pc, #28]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 800382c:	621a      	str	r2, [r3, #32]
 800382e:	4a06      	ldr	r2, [pc, #24]	@ (8003848 <HAL_ADC_MspInit+0xc8>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40012400 	.word	0x40012400
 8003840:	40021000 	.word	0x40021000
 8003844:	40010800 	.word	0x40010800
 8003848:	20000434 	.word	0x20000434
 800384c:	40020008 	.word	0x40020008

08003850 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a15      	ldr	r2, [pc, #84]	@ (80038c0 <HAL_I2C_MspInit+0x70>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d123      	bne.n	80038b8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003870:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a13      	ldr	r2, [pc, #76]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003888:	23c0      	movs	r3, #192	@ 0xc0
 800388a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4619      	mov	r1, r3
 800389a:	480b      	ldr	r0, [pc, #44]	@ (80038c8 <HAL_I2C_MspInit+0x78>)
 800389c:	f001 fe70 	bl	8005580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4a07      	ldr	r2, [pc, #28]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 80038a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038aa:	61d3      	str	r3, [r2, #28]
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_I2C_MspInit+0x74>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40005400 	.word	0x40005400
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010c00 	.word	0x40010c00

080038cc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0318 	add.w	r3, r7, #24
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ea:	d10c      	bne.n	8003906 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ec:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	61d3      	str	r3, [r2, #28]
 80038f8:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003904:	e048      	b.n	8003998 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d143      	bne.n	8003998 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003910:	4b23      	ldr	r3, [pc, #140]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	4a1c      	ldr	r2, [pc, #112]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6193      	str	r3, [r2, #24]
 8003934:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	4b17      	ldr	r3, [pc, #92]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a16      	ldr	r2, [pc, #88]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_TIM_PWM_MspInit+0xd4>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f107 0318 	add.w	r3, r7, #24
 8003968:	4619      	mov	r1, r3
 800396a:	480f      	ldr	r0, [pc, #60]	@ (80039a8 <HAL_TIM_PWM_MspInit+0xdc>)
 800396c:	f001 fe08 	bl	8005580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003970:	2301      	movs	r3, #1
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	4619      	mov	r1, r3
 8003982:	480a      	ldr	r0, [pc, #40]	@ (80039ac <HAL_TIM_PWM_MspInit+0xe0>)
 8003984:	f001 fdfc 	bl	8005580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003988:	2200      	movs	r2, #0
 800398a:	2100      	movs	r1, #0
 800398c:	201d      	movs	r0, #29
 800398e:	f001 f91e 	bl	8004bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003992:	201d      	movs	r0, #29
 8003994:	f001 f937 	bl	8004c06 <HAL_NVIC_EnableIRQ>
}
 8003998:	bf00      	nop
 800399a:	3728      	adds	r7, #40	@ 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40010800 	.word	0x40010800
 80039ac:	40010c00 	.word	0x40010c00

080039b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ce:	d118      	bne.n	8003a02 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6193      	str	r3, [r2, #24]
 80039dc:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039e8:	2302      	movs	r3, #2
 80039ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2302      	movs	r3, #2
 80039f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 0310 	add.w	r3, r7, #16
 80039f8:	4619      	mov	r1, r3
 80039fa:	4813      	ldr	r0, [pc, #76]	@ (8003a48 <HAL_TIM_MspPostInit+0x98>)
 80039fc:	f001 fdc0 	bl	8005580 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a00:	e01c      	b.n	8003a3c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a11      	ldr	r2, [pc, #68]	@ (8003a4c <HAL_TIM_MspPostInit+0x9c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d117      	bne.n	8003a3c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_TIM_MspPostInit+0x94>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a24:	2340      	movs	r3, #64	@ 0x40
 8003a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 0310 	add.w	r3, r7, #16
 8003a34:	4619      	mov	r1, r3
 8003a36:	4804      	ldr	r0, [pc, #16]	@ (8003a48 <HAL_TIM_MspPostInit+0x98>)
 8003a38:	f001 fda2 	bl	8005580 <HAL_GPIO_Init>
}
 8003a3c:	bf00      	nop
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40010800 	.word	0x40010800
 8003a4c:	40000400 	.word	0x40000400

08003a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d139      	bne.n	8003ae4 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7a:	6193      	str	r3, [r2, #24]
 8003a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6193      	str	r3, [r2, #24]
 8003a94:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480f      	ldr	r0, [pc, #60]	@ (8003af4 <HAL_UART_MspInit+0xa4>)
 8003ab6:	f001 fd63 	bl	8005580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	4809      	ldr	r0, [pc, #36]	@ (8003af4 <HAL_UART_MspInit+0xa4>)
 8003ad0:	f001 fd56 	bl	8005580 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2025      	movs	r0, #37	@ 0x25
 8003ada:	f001 f878 	bl	8004bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ade:	2025      	movs	r0, #37	@ 0x25
 8003ae0:	f001 f891 	bl	8004c06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003ae4:	bf00      	nop
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010800 	.word	0x40010800

08003af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <NMI_Handler+0x4>

08003b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <HardFault_Handler+0x4>

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <MemManage_Handler+0x4>

08003b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <BusFault_Handler+0x4>

08003b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <UsageFault_Handler+0x4>

08003b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f000 f95c 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b54:	4802      	ldr	r0, [pc, #8]	@ (8003b60 <DMA1_Channel1_IRQHandler+0x10>)
 8003b56:	f001 f9df 	bl	8004f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000434 	.word	0x20000434

08003b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b6c:	f001 febc 	bl	80058e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b78:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <TIM3_IRQHandler+0x10>)
 8003b7a:	f004 f885 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000520 	.word	0x20000520

08003b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <USART1_IRQHandler+0x10>)
 8003b8e:	f004 ffc9 	bl	8008b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000568 	.word	0x20000568

08003b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return 1;
 8003ba0:	2301      	movs	r3, #1
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <_kill>:

int _kill(int pid, int sig)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bb4:	f006 fd42 	bl	800a63c <__errno>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2216      	movs	r2, #22
 8003bbc:	601a      	str	r2, [r3, #0]
  return -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_exit>:

void _exit (int status)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffe7 	bl	8003baa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <_exit+0x12>

08003be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e00a      	b.n	8003c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bf2:	f3af 8000 	nop.w
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	60ba      	str	r2, [r7, #8]
 8003bfe:	b2ca      	uxtb	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dbf0      	blt.n	8003bf2 <_read+0x12>
  }

  return len;
 8003c10:	687b      	ldr	r3, [r7, #4]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e009      	b.n	8003c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	60ba      	str	r2, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbf1      	blt.n	8003c2c <_write+0x12>
  }
  return len;
 8003c48:	687b      	ldr	r3, [r7, #4]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_close>:

int _close(int file)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c78:	605a      	str	r2, [r3, #4]
  return 0;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <_isatty>:

int _isatty(int file)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c8e:	2301      	movs	r3, #1
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <_sbrk+0x5c>)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <_sbrk+0x60>)
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <_sbrk+0x64>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <_sbrk+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <_sbrk+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce4:	f006 fcaa 	bl	800a63c <__errno>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e009      	b.n	8003d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <_sbrk+0x64>)
 8003d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20005000 	.word	0x20005000
 8003d14:	00000400 	.word	0x00000400
 8003d18:	20000678 	.word	0x20000678
 8003d1c:	200007f0 	.word	0x200007f0

08003d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d2c:	f7ff fff8 	bl	8003d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d30:	480b      	ldr	r0, [pc, #44]	@ (8003d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d32:	490c      	ldr	r1, [pc, #48]	@ (8003d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d34:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d38:	e002      	b.n	8003d40 <LoopCopyDataInit>

08003d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d3e:	3304      	adds	r3, #4

08003d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d44:	d3f9      	bcc.n	8003d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d46:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d48:	4c09      	ldr	r4, [pc, #36]	@ (8003d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d4c:	e001      	b.n	8003d52 <LoopFillZerobss>

08003d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d50:	3204      	adds	r2, #4

08003d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d54:	d3fb      	bcc.n	8003d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d56:	f006 fc77 	bl	800a648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d5a:	f7fd f9ff 	bl	800115c <main>
  bx lr
 8003d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8003d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d64:	200003e4 	.word	0x200003e4
  ldr r2, =_sidata
 8003d68:	0800d2f0 	.word	0x0800d2f0
  ldr r2, =_sbss
 8003d6c:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8003d70:	200007ec 	.word	0x200007ec

08003d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d74:	e7fe      	b.n	8003d74 <ADC1_2_IRQHandler>
	...

08003d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_Init+0x28>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <HAL_Init+0x28>)
 8003d82:	f043 0310 	orr.w	r3, r3, #16
 8003d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 ff15 	bl	8004bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	200f      	movs	r0, #15
 8003d90:	f000 f808 	bl	8003da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f7ff fcc2 	bl	800371c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40022000 	.word	0x40022000

08003da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_InitTick+0x54>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_InitTick+0x58>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff2d 	bl	8004c22 <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00e      	b.n	8003df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d80a      	bhi.n	8003dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f000 fef5 	bl	8004bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4a06      	ldr	r2, [pc, #24]	@ (8003e00 <HAL_InitTick+0x5c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000210 	.word	0x20000210
 8003dfc:	20000218 	.word	0x20000218
 8003e00:	20000214 	.word	0x20000214

08003e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_IncTick+0x1c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_IncTick+0x20>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a03      	ldr	r2, [pc, #12]	@ (8003e24 <HAL_IncTick+0x20>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	20000218 	.word	0x20000218
 8003e24:	2000067c 	.word	0x2000067c

08003e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	@ (8003e38 <HAL_GetTick+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	2000067c 	.word	0x2000067c

08003e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff fff0 	bl	8003e28 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d005      	beq.n	8003e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <HAL_Delay+0x44>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e62:	bf00      	nop
 8003e64:	f7ff ffe0 	bl	8003e28 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d8f7      	bhi.n	8003e64 <HAL_Delay+0x28>
  {
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000218 	.word	0x20000218

08003e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0be      	b.n	8004024 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fc5c 	bl	8003780 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fd01 	bl	80048d0 <ADC_ConversionStop_Disable>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8099 	bne.w	8004012 <HAL_ADC_Init+0x18e>
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 8095 	bne.w	8004012 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ef0:	f023 0302 	bic.w	r3, r3, #2
 8003ef4:	f043 0202 	orr.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7b1b      	ldrb	r3, [r3, #12]
 8003f0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1c:	d003      	beq.n	8003f26 <HAL_ADC_Init+0xa2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HAL_ADC_Init+0xa8>
 8003f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f2a:	e000      	b.n	8003f2e <HAL_ADC_Init+0xaa>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7d1b      	ldrb	r3, [r3, #20]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d119      	bne.n	8003f70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	035a      	lsls	r2, r3, #13
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	e00b      	b.n	8003f70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_ADC_Init+0x1a8>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa0:	d003      	beq.n	8003faa <HAL_ADC_Init+0x126>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d104      	bne.n	8003fb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	051b      	lsls	r3, r3, #20
 8003fb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <HAL_ADC_Init+0x1ac>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003fee:	e018      	b.n	8004022 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f023 0312 	bic.w	r3, r3, #18
 8003ff8:	f043 0210 	orr.w	r2, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004010:	e007      	b.n	8004022 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	ffe1f7fd 	.word	0xffe1f7fd
 8004030:	ff1f0efe 	.word	0xff1f0efe

08004034 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADC_Start+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e098      	b.n	8004180 <HAL_ADC_Start+0x14c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fbe0 	bl	800481c <ADC_Enable>
 800405c:	4603      	mov	r3, r0
 800405e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8087 	bne.w	8004176 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a41      	ldr	r2, [pc, #260]	@ (8004188 <HAL_ADC_Start+0x154>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d105      	bne.n	8004092 <HAL_ADC_Start+0x5e>
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <HAL_ADC_Start+0x158>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d026      	beq.n	80040fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040bc:	e01d      	b.n	80040fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2f      	ldr	r2, [pc, #188]	@ (800418c <HAL_ADC_Start+0x158>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_ADC_Start+0xaa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004188 <HAL_ADC_Start+0x154>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10d      	bne.n	80040fa <HAL_ADC_Start+0xc6>
 80040de:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_ADC_Start+0x158>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d006      	beq.n	8004114 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	f023 0206 	bic.w	r2, r3, #6
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004112:	e002      	b.n	800411a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0202 	mvn.w	r2, #2
 800412a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004136:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800413a:	d113      	bne.n	8004164 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004140:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <HAL_ADC_Start+0x154>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d105      	bne.n	8004152 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004146:	4b11      	ldr	r3, [pc, #68]	@ (800418c <HAL_ADC_Start+0x158>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	e00c      	b.n	800417e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e003      	b.n	800417e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800417e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40012800 	.word	0x40012800
 800418c:	40012400 	.word	0x40012400

08004190 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80041a6:	f7ff fe3f 	bl	8003e28 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0d3      	b.n	800437a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d131      	bne.n	8004244 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d12a      	bne.n	8004244 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80041ee:	e021      	b.n	8004234 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d01d      	beq.n	8004234 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_ADC_PollForConversion+0x7e>
 80041fe:	f7ff fe13 	bl	8003e28 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d212      	bcs.n	8004234 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0a2      	b.n	800437a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0d6      	beq.n	80041f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004242:	e070      	b.n	8004326 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004244:	4b4f      	ldr	r3, [pc, #316]	@ (8004384 <HAL_ADC_PollForConversion+0x1f4>)
 8004246:	681c      	ldr	r4, [r3, #0]
 8004248:	2002      	movs	r0, #2
 800424a:	f003 fa11 	bl	8007670 <HAL_RCCEx_GetPeriphCLKFreq>
 800424e:	4603      	mov	r3, r0
 8004250:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	4b4b      	ldr	r3, [pc, #300]	@ (8004388 <HAL_ADC_PollForConversion+0x1f8>)
 800425c:	400b      	ands	r3, r1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_ADC_PollForConversion+0x104>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68d9      	ldr	r1, [r3, #12]
 8004268:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_ADC_PollForConversion+0x1fc>)
 800426a:	400b      	ands	r3, r1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <HAL_ADC_PollForConversion+0x104>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	4b46      	ldr	r3, [pc, #280]	@ (8004390 <HAL_ADC_PollForConversion+0x200>)
 8004278:	400b      	ands	r3, r1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <HAL_ADC_PollForConversion+0x100>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68d9      	ldr	r1, [r3, #12]
 8004284:	4b43      	ldr	r3, [pc, #268]	@ (8004394 <HAL_ADC_PollForConversion+0x204>)
 8004286:	400b      	ands	r3, r1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_ADC_PollForConversion+0x100>
 800428c:	2314      	movs	r3, #20
 800428e:	e020      	b.n	80042d2 <HAL_ADC_PollForConversion+0x142>
 8004290:	2329      	movs	r3, #41	@ 0x29
 8004292:	e01e      	b.n	80042d2 <HAL_ADC_PollForConversion+0x142>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	4b3d      	ldr	r3, [pc, #244]	@ (8004390 <HAL_ADC_PollForConversion+0x200>)
 800429c:	400b      	ands	r3, r1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_ADC_PollForConversion+0x120>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68d9      	ldr	r1, [r3, #12]
 80042a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <HAL_ADC_PollForConversion+0x204>)
 80042aa:	400b      	ands	r3, r1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <HAL_ADC_PollForConversion+0x13c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6919      	ldr	r1, [r3, #16]
 80042b6:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <HAL_ADC_PollForConversion+0x208>)
 80042b8:	400b      	ands	r3, r1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_ADC_PollForConversion+0x140>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68d9      	ldr	r1, [r3, #12]
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_ADC_PollForConversion+0x208>)
 80042c6:	400b      	ands	r3, r1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_PollForConversion+0x140>
 80042cc:	2354      	movs	r3, #84	@ 0x54
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_PollForConversion+0x142>
 80042d0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80042d8:	e021      	b.n	800431e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d01a      	beq.n	8004318 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HAL_ADC_PollForConversion+0x168>
 80042e8:	f7ff fd9e 	bl	8003e28 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d20f      	bcs.n	8004318 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d90b      	bls.n	8004318 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e030      	b.n	800437a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3301      	adds	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	429a      	cmp	r2, r3
 8004324:	d8d9      	bhi.n	80042da <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f06f 0212 	mvn.w	r2, #18
 800432e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004346:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800434a:	d115      	bne.n	8004378 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop
 8004384:	20000210 	.word	0x20000210
 8004388:	24924924 	.word	0x24924924
 800438c:	00924924 	.word	0x00924924
 8004390:	12492492 	.word	0x12492492
 8004394:	00492492 	.word	0x00492492
 8004398:	00249249 	.word	0x00249249

0800439c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a64      	ldr	r2, [pc, #400]	@ (8004544 <HAL_ADC_Start_DMA+0x1a8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_Start_DMA+0x24>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a63      	ldr	r2, [pc, #396]	@ (8004548 <HAL_ADC_Start_DMA+0x1ac>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d106      	bne.n	80043ce <HAL_ADC_Start_DMA+0x32>
 80043c0:	4b60      	ldr	r3, [pc, #384]	@ (8004544 <HAL_ADC_Start_DMA+0x1a8>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 80b3 	bne.w	8004534 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_Start_DMA+0x40>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0ae      	b.n	800453a <HAL_ADC_Start_DMA+0x19e>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fa19 	bl	800481c <ADC_Enable>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 809a 	bne.w	800452a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a4e      	ldr	r2, [pc, #312]	@ (8004548 <HAL_ADC_Start_DMA+0x1ac>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d105      	bne.n	8004420 <HAL_ADC_Start_DMA+0x84>
 8004414:	4b4b      	ldr	r3, [pc, #300]	@ (8004544 <HAL_ADC_Start_DMA+0x1a8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d115      	bne.n	800444c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004436:	2b00      	cmp	r3, #0
 8004438:	d026      	beq.n	8004488 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800444a:	e01d      	b.n	8004488 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a39      	ldr	r2, [pc, #228]	@ (8004544 <HAL_ADC_Start_DMA+0x1a8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_ADC_Start_DMA+0xd0>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a38      	ldr	r2, [pc, #224]	@ (8004548 <HAL_ADC_Start_DMA+0x1ac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d10d      	bne.n	8004488 <HAL_ADC_Start_DMA+0xec>
 800446c:	4b35      	ldr	r3, [pc, #212]	@ (8004544 <HAL_ADC_Start_DMA+0x1a8>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004480:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	f023 0206 	bic.w	r2, r3, #6
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044a0:	e002      	b.n	80044a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <HAL_ADC_Start_DMA+0x1b0>)
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <HAL_ADC_Start_DMA+0x1b4>)
 80044be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <HAL_ADC_Start_DMA+0x1b8>)
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0202 	mvn.w	r2, #2
 80044d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a18      	ldr	r0, [r3, #32]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	334c      	adds	r3, #76	@ 0x4c
 80044ec:	4619      	mov	r1, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f000 fbfd 	bl	8004cf0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004500:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004504:	d108      	bne.n	8004518 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004514:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004516:	e00f      	b.n	8004538 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004526:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004528:	e006      	b.n	8004538 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004532:	e001      	b.n	8004538 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40012400 	.word	0x40012400
 8004548:	40012800 	.word	0x40012800
 800454c:	08004953 	.word	0x08004953
 8004550:	080049cf 	.word	0x080049cf
 8004554:	080049eb 	.word	0x080049eb

08004558 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_ADC_Stop_DMA+0x1a>
 800456e:	2302      	movs	r3, #2
 8004570:	e03a      	b.n	80045e8 <HAL_ADC_Stop_DMA+0x90>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9a8 	bl	80048d0 <ADC_ConversionStop_Disable>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d129      	bne.n	80045de <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004598:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d11a      	bne.n	80045de <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fbff 	bl	8004db0 <HAL_DMA_Abort>
 80045b2:	4603      	mov	r3, r0
 80045b4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80045d0:	e005      	b.n	80045de <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_ADC_ConfigChannel+0x20>
 8004648:	2302      	movs	r3, #2
 800464a:	e0dc      	b.n	8004806 <HAL_ADC_ConfigChannel+0x1da>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d81c      	bhi.n	8004696 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3b05      	subs	r3, #5
 800466e:	221f      	movs	r2, #31
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	4019      	ands	r1, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3b05      	subs	r3, #5
 8004688:	fa00 f203 	lsl.w	r2, r0, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	635a      	str	r2, [r3, #52]	@ 0x34
 8004694:	e03c      	b.n	8004710 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d81c      	bhi.n	80046d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	3b23      	subs	r3, #35	@ 0x23
 80046b0:	221f      	movs	r2, #31
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	4019      	ands	r1, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	3b23      	subs	r3, #35	@ 0x23
 80046ca:	fa00 f203 	lsl.w	r2, r0, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80046d6:	e01b      	b.n	8004710 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	3b41      	subs	r3, #65	@ 0x41
 80046ea:	221f      	movs	r2, #31
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	4019      	ands	r1, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	3b41      	subs	r3, #65	@ 0x41
 8004704:	fa00 f203 	lsl.w	r2, r0, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b09      	cmp	r3, #9
 8004716:	d91c      	bls.n	8004752 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68d9      	ldr	r1, [r3, #12]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	3b1e      	subs	r3, #30
 800472a:	2207      	movs	r2, #7
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	4019      	ands	r1, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6898      	ldr	r0, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	3b1e      	subs	r3, #30
 8004744:	fa00 f203 	lsl.w	r2, r0, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	e019      	b.n	8004786 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6919      	ldr	r1, [r3, #16]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	2207      	movs	r2, #7
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	4019      	ands	r1, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6898      	ldr	r0, [r3, #8]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	fa00 f203 	lsl.w	r2, r0, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b10      	cmp	r3, #16
 800478c:	d003      	beq.n	8004796 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004792:	2b11      	cmp	r3, #17
 8004794:	d132      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1d      	ldr	r2, [pc, #116]	@ (8004810 <HAL_ADC_ConfigChannel+0x1e4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d125      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d126      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80047bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d11a      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047c6:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <HAL_ADC_ConfigChannel+0x1e8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a13      	ldr	r2, [pc, #76]	@ (8004818 <HAL_ADC_ConfigChannel+0x1ec>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0c9a      	lsrs	r2, r3, #18
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047dc:	e002      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f9      	bne.n	80047de <HAL_ADC_ConfigChannel+0x1b2>
 80047ea:	e007      	b.n	80047fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40012400 	.word	0x40012400
 8004814:	20000210 	.word	0x20000210
 8004818:	431bde83 	.word	0x431bde83

0800481c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b01      	cmp	r3, #1
 8004838:	d040      	beq.n	80048bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800484a:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <ADC_Enable+0xac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <ADC_Enable+0xb0>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	0c9b      	lsrs	r3, r3, #18
 8004856:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004858:	e002      	b.n	8004860 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f9      	bne.n	800485a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004866:	f7ff fadf 	bl	8003e28 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800486c:	e01f      	b.n	80048ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800486e:	f7ff fadb 	bl	8003e28 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d918      	bls.n	80048ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d011      	beq.n	80048ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	f043 0210 	orr.w	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	f043 0201 	orr.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e007      	b.n	80048be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d1d8      	bne.n	800486e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000210 	.word	0x20000210
 80048cc:	431bde83 	.word	0x431bde83

080048d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d12e      	bne.n	8004948 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048fa:	f7ff fa95 	bl	8003e28 <HAL_GetTick>
 80048fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004900:	e01b      	b.n	800493a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004902:	f7ff fa91 	bl	8003e28 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d914      	bls.n	800493a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10d      	bne.n	800493a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e007      	b.n	800494a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d0dc      	beq.n	8004902 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004968:	2b00      	cmp	r3, #0
 800496a:	d127      	bne.n	80049bc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004982:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004986:	d115      	bne.n	80049b4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800498c:	2b00      	cmp	r3, #0
 800498e:	d111      	bne.n	80049b4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7fd faaf 	bl	8001f18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80049ba:	e004      	b.n	80049c6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff fe13 	bl	8004608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fe02 	bl	800461a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <__NVIC_SetPriorityGrouping>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <__NVIC_SetPriorityGrouping+0x44>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a52:	4a04      	ldr	r2, [pc, #16]	@ (8004a64 <__NVIC_SetPriorityGrouping+0x44>)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	60d3      	str	r3, [r2, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_GetPriorityGrouping>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a6c:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <__NVIC_GetPriorityGrouping+0x18>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	f003 0307 	and.w	r3, r3, #7
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <__NVIC_EnableIRQ>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db0b      	blt.n	8004aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	4906      	ldr	r1, [pc, #24]	@ (8004ab8 <__NVIC_EnableIRQ+0x34>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	@ (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	@ (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b84:	d301      	bcc.n	8004b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00f      	b.n	8004baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb4 <SysTick_Config+0x40>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b92:	210f      	movs	r1, #15
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	f7ff ff90 	bl	8004abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <SysTick_Config+0x40>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba2:	4b04      	ldr	r3, [pc, #16]	@ (8004bb4 <SysTick_Config+0x40>)
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	e000e010 	.word	0xe000e010

08004bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff2d 	bl	8004a20 <__NVIC_SetPriorityGrouping>
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004be0:	f7ff ff42 	bl	8004a68 <__NVIC_GetPriorityGrouping>
 8004be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ff90 	bl	8004b10 <NVIC_EncodePriority>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff5f 	bl	8004abc <__NVIC_SetPriority>
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff35 	bl	8004a84 <__NVIC_EnableIRQ>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff ffa2 	bl	8004b74 <SysTick_Config>
 8004c30:	4603      	mov	r3, r0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e043      	b.n	8004cda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b22      	ldr	r3, [pc, #136]	@ (8004ce4 <HAL_DMA_Init+0xa8>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <HAL_DMA_Init+0xac>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	009a      	lsls	r2, r3, #2
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <HAL_DMA_Init+0xb0>)
 8004c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	bffdfff8 	.word	0xbffdfff8
 8004ce8:	cccccccd 	.word	0xcccccccd
 8004cec:	40020000 	.word	0x40020000

08004cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_DMA_Start_IT+0x20>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e04b      	b.n	8004da8 <HAL_DMA_Start_IT+0xb8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d13a      	bne.n	8004d9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f9eb 	bl	8005124 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 020e 	orr.w	r2, r2, #14
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e00f      	b.n	8004d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 020a 	orr.w	r2, r2, #10
 8004d86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e005      	b.n	8004da6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
 8004da4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d008      	beq.n	8004dda <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e020      	b.n	8004e1c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 020e 	bic.w	r2, r2, #14
 8004de8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d005      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2204      	movs	r2, #4
 8004e44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e051      	b.n	8004ef0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020e 	bic.w	r2, r2, #14
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a22      	ldr	r2, [pc, #136]	@ (8004efc <HAL_DMA_Abort_IT+0xd4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d029      	beq.n	8004eca <HAL_DMA_Abort_IT+0xa2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <HAL_DMA_Abort_IT+0xd8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <HAL_DMA_Abort_IT+0x9e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <HAL_DMA_Abort_IT+0xdc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01a      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0x98>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <HAL_DMA_Abort_IT+0xe0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d012      	beq.n	8004eba <HAL_DMA_Abort_IT+0x92>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_DMA_Abort_IT+0xe4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0x8c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <HAL_DMA_Abort_IT+0xe8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d102      	bne.n	8004eae <HAL_DMA_Abort_IT+0x86>
 8004ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004eac:	e00e      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004eae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb2:	e00b      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004eb8:	e008      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ebe:	e005      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ec4:	e002      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	e000      	b.n	8004ecc <HAL_DMA_Abort_IT+0xa4>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <HAL_DMA_Abort_IT+0xec>)
 8004ece:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
    } 
  }
  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40020008 	.word	0x40020008
 8004f00:	4002001c 	.word	0x4002001c
 8004f04:	40020030 	.word	0x40020030
 8004f08:	40020044 	.word	0x40020044
 8004f0c:	40020058 	.word	0x40020058
 8004f10:	4002006c 	.word	0x4002006c
 8004f14:	40020000 	.word	0x40020000

08004f18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	2204      	movs	r2, #4
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d04f      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0xc8>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d04a      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a66      	ldr	r2, [pc, #408]	@ (8005108 <HAL_DMA_IRQHandler+0x1f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d029      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0xae>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a65      	ldr	r2, [pc, #404]	@ (800510c <HAL_DMA_IRQHandler+0x1f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d022      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xaa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a63      	ldr	r2, [pc, #396]	@ (8005110 <HAL_DMA_IRQHandler+0x1f8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01a      	beq.n	8004fbc <HAL_DMA_IRQHandler+0xa4>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a62      	ldr	r2, [pc, #392]	@ (8005114 <HAL_DMA_IRQHandler+0x1fc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d012      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x9e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a60      	ldr	r2, [pc, #384]	@ (8005118 <HAL_DMA_IRQHandler+0x200>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00a      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x98>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800511c <HAL_DMA_IRQHandler+0x204>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d102      	bne.n	8004faa <HAL_DMA_IRQHandler+0x92>
 8004fa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004fa8:	e00e      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004faa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004fae:	e00b      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004fb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fb4:	e008      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004fb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fba:	e005      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fc0:	e002      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004fc2:	2340      	movs	r3, #64	@ 0x40
 8004fc4:	e000      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xb0>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	4a55      	ldr	r2, [pc, #340]	@ (8005120 <HAL_DMA_IRQHandler+0x208>)
 8004fca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8094 	beq.w	80050fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004fde:	e08e      	b.n	80050fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d056      	beq.n	800509e <HAL_DMA_IRQHandler+0x186>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d051      	beq.n	800509e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 020a 	bic.w	r2, r2, #10
 8005016:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a38      	ldr	r2, [pc, #224]	@ (8005108 <HAL_DMA_IRQHandler+0x1f0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d029      	beq.n	800507e <HAL_DMA_IRQHandler+0x166>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a37      	ldr	r2, [pc, #220]	@ (800510c <HAL_DMA_IRQHandler+0x1f4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_DMA_IRQHandler+0x162>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a35      	ldr	r2, [pc, #212]	@ (8005110 <HAL_DMA_IRQHandler+0x1f8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01a      	beq.n	8005074 <HAL_DMA_IRQHandler+0x15c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a34      	ldr	r2, [pc, #208]	@ (8005114 <HAL_DMA_IRQHandler+0x1fc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d012      	beq.n	800506e <HAL_DMA_IRQHandler+0x156>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a32      	ldr	r2, [pc, #200]	@ (8005118 <HAL_DMA_IRQHandler+0x200>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00a      	beq.n	8005068 <HAL_DMA_IRQHandler+0x150>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a31      	ldr	r2, [pc, #196]	@ (800511c <HAL_DMA_IRQHandler+0x204>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d102      	bne.n	8005062 <HAL_DMA_IRQHandler+0x14a>
 800505c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005060:	e00e      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 8005062:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005066:	e00b      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 8005068:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800506c:	e008      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 800506e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005072:	e005      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 8005074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005078:	e002      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 800507a:	2320      	movs	r3, #32
 800507c:	e000      	b.n	8005080 <HAL_DMA_IRQHandler+0x168>
 800507e:	2302      	movs	r3, #2
 8005080:	4a27      	ldr	r2, [pc, #156]	@ (8005120 <HAL_DMA_IRQHandler+0x208>)
 8005082:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d034      	beq.n	80050fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800509c:	e02f      	b.n	80050fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2208      	movs	r2, #8
 80050a4:	409a      	lsls	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_DMA_IRQHandler+0x1e8>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d023      	beq.n	8005100 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f202 	lsl.w	r2, r1, r2
 80050d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
    }
  }
  return;
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
}
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40020008 	.word	0x40020008
 800510c:	4002001c 	.word	0x4002001c
 8005110:	40020030 	.word	0x40020030
 8005114:	40020044 	.word	0x40020044
 8005118:	40020058 	.word	0x40020058
 800511c:	4002006c 	.word	0x4002006c
 8005120:	40020000 	.word	0x40020000

08005124 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b10      	cmp	r3, #16
 8005150:	d108      	bne.n	8005164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005162:	e007      	b.n	8005174 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
	...

08005180 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_FLASH_Program+0xd8>)
 800519c:	7e1b      	ldrb	r3, [r3, #24]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_FLASH_Program+0x26>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e054      	b.n	8005250 <HAL_FLASH_Program+0xd0>
 80051a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005258 <HAL_FLASH_Program+0xd8>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80051ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80051b0:	f000 f8a8 	bl	8005304 <FLASH_WaitForLastOperation>
 80051b4:	4603      	mov	r3, r0
 80051b6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d144      	bne.n	8005248 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d102      	bne.n	80051ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	757b      	strb	r3, [r7, #21]
 80051c8:	e007      	b.n	80051da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d102      	bne.n	80051d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80051d0:	2302      	movs	r3, #2
 80051d2:	757b      	strb	r3, [r7, #21]
 80051d4:	e001      	b.n	80051da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80051d6:	2304      	movs	r3, #4
 80051d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80051da:	2300      	movs	r3, #0
 80051dc:	75bb      	strb	r3, [r7, #22]
 80051de:	e02d      	b.n	800523c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80051e0:	7dbb      	ldrb	r3, [r7, #22]
 80051e2:	005a      	lsls	r2, r3, #1
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	eb02 0c03 	add.w	ip, r2, r3
 80051ea:	7dbb      	ldrb	r3, [r7, #22]
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f2:	f1c1 0620 	rsb	r6, r1, #32
 80051f6:	f1a1 0020 	sub.w	r0, r1, #32
 80051fa:	fa22 f401 	lsr.w	r4, r2, r1
 80051fe:	fa03 f606 	lsl.w	r6, r3, r6
 8005202:	4334      	orrs	r4, r6
 8005204:	fa23 f000 	lsr.w	r0, r3, r0
 8005208:	4304      	orrs	r4, r0
 800520a:	fa23 f501 	lsr.w	r5, r3, r1
 800520e:	b2a3      	uxth	r3, r4
 8005210:	4619      	mov	r1, r3
 8005212:	4660      	mov	r0, ip
 8005214:	f000 f85a 	bl	80052cc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005218:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800521c:	f000 f872 	bl	8005304 <FLASH_WaitForLastOperation>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005224:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <HAL_FLASH_Program+0xdc>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	4a0c      	ldr	r2, [pc, #48]	@ (800525c <HAL_FLASH_Program+0xdc>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005236:	7dbb      	ldrb	r3, [r7, #22]
 8005238:	3301      	adds	r3, #1
 800523a:	75bb      	strb	r3, [r7, #22]
 800523c:	7dba      	ldrb	r2, [r7, #22]
 800523e:	7d7b      	ldrb	r3, [r7, #21]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3cd      	bcc.n	80051e0 <HAL_FLASH_Program+0x60>
 8005244:	e000      	b.n	8005248 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005246:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <HAL_FLASH_Program+0xd8>)
 800524a:	2200      	movs	r2, #0
 800524c:	761a      	strb	r2, [r3, #24]

  return status;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005258:	20000680 	.word	0x20000680
 800525c:	40022000 	.word	0x40022000

08005260 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <HAL_FLASH_Unlock+0x40>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <HAL_FLASH_Unlock+0x40>)
 8005278:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <HAL_FLASH_Unlock+0x44>)
 800527a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800527c:	4b08      	ldr	r3, [pc, #32]	@ (80052a0 <HAL_FLASH_Unlock+0x40>)
 800527e:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <HAL_FLASH_Unlock+0x48>)
 8005280:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_FLASH_Unlock+0x40>)
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005292:	79fb      	ldrb	r3, [r7, #7]
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40022000 	.word	0x40022000
 80052a4:	45670123 	.word	0x45670123
 80052a8:	cdef89ab 	.word	0xcdef89ab

080052ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_FLASH_Lock+0x1c>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <HAL_FLASH_Lock+0x1c>)
 80052b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40022000 	.word	0x40022000

080052cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052d8:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <FLASH_Program_HalfWord+0x30>)
 80052da:	2200      	movs	r2, #0
 80052dc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <FLASH_Program_HalfWord+0x34>)
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	4a07      	ldr	r2, [pc, #28]	@ (8005300 <FLASH_Program_HalfWord+0x34>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	801a      	strh	r2, [r3, #0]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000680 	.word	0x20000680
 8005300:	40022000 	.word	0x40022000

08005304 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800530c:	f7fe fd8c 	bl	8003e28 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005312:	e010      	b.n	8005336 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d00c      	beq.n	8005336 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <FLASH_WaitForLastOperation+0x2e>
 8005322:	f7fe fd81 	bl	8003e28 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d201      	bcs.n	8005336 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e025      	b.n	8005382 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005336:	4b15      	ldr	r3, [pc, #84]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e8      	bne.n	8005314 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 8005350:	2220      	movs	r2, #32
 8005352:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005354:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005360:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <FLASH_WaitForLastOperation+0x88>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005378:	f000 f80a 	bl	8005390 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40022000 	.word	0x40022000

08005390 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800539a:	4b23      	ldr	r3, [pc, #140]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80053a6:	4b21      	ldr	r3, [pc, #132]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f043 0302 	orr.w	r3, r3, #2
 80053ae:	4a1f      	ldr	r2, [pc, #124]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f043 0310 	orr.w	r3, r3, #16
 80053b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80053c6:	4b19      	ldr	r3, [pc, #100]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	4a17      	ldr	r2, [pc, #92]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80053da:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80053e6:	4b11      	ldr	r3, [pc, #68]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f043 0304 	orr.w	r3, r3, #4
 80053ee:	4a0f      	ldr	r2, [pc, #60]	@ (800542c <FLASH_SetErrorCode+0x9c>)
 80053f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f240 1201 	movw	r2, #257	@ 0x101
 8005404:	4293      	cmp	r3, r2
 8005406:	d106      	bne.n	8005416 <FLASH_SetErrorCode+0x86>
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a06      	ldr	r2, [pc, #24]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	61d3      	str	r3, [r2, #28]
}  
 8005414:	e002      	b.n	800541c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005416:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <FLASH_SetErrorCode+0x98>)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60d3      	str	r3, [r2, #12]
}  
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40022000 	.word	0x40022000
 800542c:	20000680 	.word	0x20000680

08005430 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005442:	4b2f      	ldr	r3, [pc, #188]	@ (8005500 <HAL_FLASHEx_Erase+0xd0>)
 8005444:	7e1b      	ldrb	r3, [r3, #24]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_FLASHEx_Erase+0x1e>
 800544a:	2302      	movs	r3, #2
 800544c:	e053      	b.n	80054f6 <HAL_FLASHEx_Erase+0xc6>
 800544e:	4b2c      	ldr	r3, [pc, #176]	@ (8005500 <HAL_FLASHEx_Erase+0xd0>)
 8005450:	2201      	movs	r2, #1
 8005452:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d116      	bne.n	800548a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800545c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005460:	f7ff ff50 	bl	8005304 <FLASH_WaitForLastOperation>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d141      	bne.n	80054ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800546a:	2001      	movs	r0, #1
 800546c:	f000 f84c 	bl	8005508 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005470:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005474:	f7ff ff46 	bl	8005304 <FLASH_WaitForLastOperation>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800547c:	4b21      	ldr	r3, [pc, #132]	@ (8005504 <HAL_FLASHEx_Erase+0xd4>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a20      	ldr	r2, [pc, #128]	@ (8005504 <HAL_FLASHEx_Erase+0xd4>)
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	6113      	str	r3, [r2, #16]
 8005488:	e031      	b.n	80054ee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800548a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800548e:	f7ff ff39 	bl	8005304 <FLASH_WaitForLastOperation>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d12a      	bne.n	80054ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	e019      	b.n	80054dc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80054a8:	68b8      	ldr	r0, [r7, #8]
 80054aa:	f000 f849 	bl	8005540 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80054b2:	f7ff ff27 	bl	8005304 <FLASH_WaitForLastOperation>
 80054b6:	4603      	mov	r3, r0
 80054b8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <HAL_FLASHEx_Erase+0xd4>)
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4a11      	ldr	r2, [pc, #68]	@ (8005504 <HAL_FLASHEx_Erase+0xd4>)
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	601a      	str	r2, [r3, #0]
            break;
 80054d2:	e00c      	b.n	80054ee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054da:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	029a      	lsls	r2, r3, #10
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4413      	add	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d3dc      	bcc.n	80054a8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054ee:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <HAL_FLASHEx_Erase+0xd0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	761a      	strb	r2, [r3, #24]

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000680 	.word	0x20000680
 8005504:	40022000 	.word	0x40022000

08005508 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005510:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <FLASH_MassErase+0x30>)
 8005512:	2200      	movs	r2, #0
 8005514:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005516:	4b09      	ldr	r3, [pc, #36]	@ (800553c <FLASH_MassErase+0x34>)
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4a08      	ldr	r2, [pc, #32]	@ (800553c <FLASH_MassErase+0x34>)
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <FLASH_MassErase+0x34>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <FLASH_MassErase+0x34>)
 8005528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	20000680 	.word	0x20000680
 800553c:	40022000 	.word	0x40022000

08005540 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <FLASH_PageErase+0x38>)
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800554e:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <FLASH_PageErase+0x3c>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <FLASH_PageErase+0x3c>)
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800555a:	4a08      	ldr	r2, [pc, #32]	@ (800557c <FLASH_PageErase+0x3c>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005560:	4b06      	ldr	r3, [pc, #24]	@ (800557c <FLASH_PageErase+0x3c>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	4a05      	ldr	r2, [pc, #20]	@ (800557c <FLASH_PageErase+0x3c>)
 8005566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000680 	.word	0x20000680
 800557c:	40022000 	.word	0x40022000

08005580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005580:	b480      	push	{r7}
 8005582:	b08b      	sub	sp, #44	@ 0x2c
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800558e:	2300      	movs	r3, #0
 8005590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005592:	e169      	b.n	8005868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005594:	2201      	movs	r2, #1
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f040 8158 	bne.w	8005862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4a9a      	ldr	r2, [pc, #616]	@ (8005820 <HAL_GPIO_Init+0x2a0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d05e      	beq.n	800567a <HAL_GPIO_Init+0xfa>
 80055bc:	4a98      	ldr	r2, [pc, #608]	@ (8005820 <HAL_GPIO_Init+0x2a0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d875      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055c2:	4a98      	ldr	r2, [pc, #608]	@ (8005824 <HAL_GPIO_Init+0x2a4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d058      	beq.n	800567a <HAL_GPIO_Init+0xfa>
 80055c8:	4a96      	ldr	r2, [pc, #600]	@ (8005824 <HAL_GPIO_Init+0x2a4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d86f      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055ce:	4a96      	ldr	r2, [pc, #600]	@ (8005828 <HAL_GPIO_Init+0x2a8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d052      	beq.n	800567a <HAL_GPIO_Init+0xfa>
 80055d4:	4a94      	ldr	r2, [pc, #592]	@ (8005828 <HAL_GPIO_Init+0x2a8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d869      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055da:	4a94      	ldr	r2, [pc, #592]	@ (800582c <HAL_GPIO_Init+0x2ac>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04c      	beq.n	800567a <HAL_GPIO_Init+0xfa>
 80055e0:	4a92      	ldr	r2, [pc, #584]	@ (800582c <HAL_GPIO_Init+0x2ac>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d863      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055e6:	4a92      	ldr	r2, [pc, #584]	@ (8005830 <HAL_GPIO_Init+0x2b0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d046      	beq.n	800567a <HAL_GPIO_Init+0xfa>
 80055ec:	4a90      	ldr	r2, [pc, #576]	@ (8005830 <HAL_GPIO_Init+0x2b0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d85d      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055f2:	2b12      	cmp	r3, #18
 80055f4:	d82a      	bhi.n	800564c <HAL_GPIO_Init+0xcc>
 80055f6:	2b12      	cmp	r3, #18
 80055f8:	d859      	bhi.n	80056ae <HAL_GPIO_Init+0x12e>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <HAL_GPIO_Init+0x80>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	0800567b 	.word	0x0800567b
 8005604:	08005655 	.word	0x08005655
 8005608:	08005667 	.word	0x08005667
 800560c:	080056a9 	.word	0x080056a9
 8005610:	080056af 	.word	0x080056af
 8005614:	080056af 	.word	0x080056af
 8005618:	080056af 	.word	0x080056af
 800561c:	080056af 	.word	0x080056af
 8005620:	080056af 	.word	0x080056af
 8005624:	080056af 	.word	0x080056af
 8005628:	080056af 	.word	0x080056af
 800562c:	080056af 	.word	0x080056af
 8005630:	080056af 	.word	0x080056af
 8005634:	080056af 	.word	0x080056af
 8005638:	080056af 	.word	0x080056af
 800563c:	080056af 	.word	0x080056af
 8005640:	080056af 	.word	0x080056af
 8005644:	0800565d 	.word	0x0800565d
 8005648:	08005671 	.word	0x08005671
 800564c:	4a79      	ldr	r2, [pc, #484]	@ (8005834 <HAL_GPIO_Init+0x2b4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005652:	e02c      	b.n	80056ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	623b      	str	r3, [r7, #32]
          break;
 800565a:	e029      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	623b      	str	r3, [r7, #32]
          break;
 8005664:	e024      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	3308      	adds	r3, #8
 800566c:	623b      	str	r3, [r7, #32]
          break;
 800566e:	e01f      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	330c      	adds	r3, #12
 8005676:	623b      	str	r3, [r7, #32]
          break;
 8005678:	e01a      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005682:	2304      	movs	r3, #4
 8005684:	623b      	str	r3, [r7, #32]
          break;
 8005686:	e013      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d105      	bne.n	800569c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005690:	2308      	movs	r3, #8
 8005692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	611a      	str	r2, [r3, #16]
          break;
 800569a:	e009      	b.n	80056b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800569c:	2308      	movs	r3, #8
 800569e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	615a      	str	r2, [r3, #20]
          break;
 80056a6:	e003      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80056a8:	2300      	movs	r3, #0
 80056aa:	623b      	str	r3, [r7, #32]
          break;
 80056ac:	e000      	b.n	80056b0 <HAL_GPIO_Init+0x130>
          break;
 80056ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2bff      	cmp	r3, #255	@ 0xff
 80056b4:	d801      	bhi.n	80056ba <HAL_GPIO_Init+0x13a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	e001      	b.n	80056be <HAL_GPIO_Init+0x13e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2bff      	cmp	r3, #255	@ 0xff
 80056c4:	d802      	bhi.n	80056cc <HAL_GPIO_Init+0x14c>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	e002      	b.n	80056d2 <HAL_GPIO_Init+0x152>
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	3b08      	subs	r3, #8
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	210f      	movs	r1, #15
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	6a39      	ldr	r1, [r7, #32]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80b1 	beq.w	8005862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005700:	4b4d      	ldr	r3, [pc, #308]	@ (8005838 <HAL_GPIO_Init+0x2b8>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4a4c      	ldr	r2, [pc, #304]	@ (8005838 <HAL_GPIO_Init+0x2b8>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6193      	str	r3, [r2, #24]
 800570c:	4b4a      	ldr	r3, [pc, #296]	@ (8005838 <HAL_GPIO_Init+0x2b8>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005718:	4a48      	ldr	r2, [pc, #288]	@ (800583c <HAL_GPIO_Init+0x2bc>)
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	089b      	lsrs	r3, r3, #2
 800571e:	3302      	adds	r3, #2
 8005720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	220f      	movs	r2, #15
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4013      	ands	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a40      	ldr	r2, [pc, #256]	@ (8005840 <HAL_GPIO_Init+0x2c0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_GPIO_Init+0x1ec>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3f      	ldr	r2, [pc, #252]	@ (8005844 <HAL_GPIO_Init+0x2c4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00d      	beq.n	8005768 <HAL_GPIO_Init+0x1e8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3e      	ldr	r2, [pc, #248]	@ (8005848 <HAL_GPIO_Init+0x2c8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <HAL_GPIO_Init+0x1e4>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3d      	ldr	r2, [pc, #244]	@ (800584c <HAL_GPIO_Init+0x2cc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_GPIO_Init+0x1e0>
 800575c:	2303      	movs	r3, #3
 800575e:	e006      	b.n	800576e <HAL_GPIO_Init+0x1ee>
 8005760:	2304      	movs	r3, #4
 8005762:	e004      	b.n	800576e <HAL_GPIO_Init+0x1ee>
 8005764:	2302      	movs	r3, #2
 8005766:	e002      	b.n	800576e <HAL_GPIO_Init+0x1ee>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_GPIO_Init+0x1ee>
 800576c:	2300      	movs	r3, #0
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	f002 0203 	and.w	r2, r2, #3
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	4093      	lsls	r3, r2
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800577e:	492f      	ldr	r1, [pc, #188]	@ (800583c <HAL_GPIO_Init+0x2bc>)
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	3302      	adds	r3, #2
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005798:	4b2d      	ldr	r3, [pc, #180]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	492c      	ldr	r1, [pc, #176]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]
 80057a4:	e006      	b.n	80057b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	4928      	ldr	r1, [pc, #160]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057c0:	4b23      	ldr	r3, [pc, #140]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4922      	ldr	r1, [pc, #136]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60cb      	str	r3, [r1, #12]
 80057cc:	e006      	b.n	80057dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057ce:	4b20      	ldr	r3, [pc, #128]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	491e      	ldr	r1, [pc, #120]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d006      	beq.n	80057f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057e8:	4b19      	ldr	r3, [pc, #100]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4918      	ldr	r1, [pc, #96]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e006      	b.n	8005804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80057f6:	4b16      	ldr	r3, [pc, #88]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	43db      	mvns	r3, r3
 80057fe:	4914      	ldr	r1, [pc, #80]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 8005800:	4013      	ands	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d021      	beq.n	8005854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005810:	4b0f      	ldr	r3, [pc, #60]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	490e      	ldr	r1, [pc, #56]	@ (8005850 <HAL_GPIO_Init+0x2d0>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
 800581c:	e021      	b.n	8005862 <HAL_GPIO_Init+0x2e2>
 800581e:	bf00      	nop
 8005820:	10320000 	.word	0x10320000
 8005824:	10310000 	.word	0x10310000
 8005828:	10220000 	.word	0x10220000
 800582c:	10210000 	.word	0x10210000
 8005830:	10120000 	.word	0x10120000
 8005834:	10110000 	.word	0x10110000
 8005838:	40021000 	.word	0x40021000
 800583c:	40010000 	.word	0x40010000
 8005840:	40010800 	.word	0x40010800
 8005844:	40010c00 	.word	0x40010c00
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005854:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <HAL_GPIO_Init+0x304>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	43db      	mvns	r3, r3
 800585c:	4909      	ldr	r1, [pc, #36]	@ (8005884 <HAL_GPIO_Init+0x304>)
 800585e:	4013      	ands	r3, r2
 8005860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	3301      	adds	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f ae8e 	bne.w	8005594 <HAL_GPIO_Init+0x14>
  }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	372c      	adds	r7, #44	@ 0x2c
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	40010400 	.word	0x40010400

08005888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
 80058a4:	e001      	b.n	80058aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	807b      	strh	r3, [r7, #2]
 80058c2:	4613      	mov	r3, r2
 80058c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c6:	787b      	ldrb	r3, [r7, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058d2:	e003      	b.n	80058dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	041a      	lsls	r2, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	611a      	str	r2, [r3, #16]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058fe:	4a05      	ldr	r2, [pc, #20]	@ (8005914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc fa96 	bl	8001e38 <HAL_GPIO_EXTI_Callback>
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40010400 	.word	0x40010400

08005918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e12b      	b.n	8005b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fd ff86 	bl	8003850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	@ 0x24
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800596a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800597a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800597c:	f001 fd7c 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a81      	ldr	r2, [pc, #516]	@ (8005b8c <HAL_I2C_Init+0x274>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d807      	bhi.n	800599c <HAL_I2C_Init+0x84>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a80      	ldr	r2, [pc, #512]	@ (8005b90 <HAL_I2C_Init+0x278>)
 8005990:	4293      	cmp	r3, r2
 8005992:	bf94      	ite	ls
 8005994:	2301      	movls	r3, #1
 8005996:	2300      	movhi	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e006      	b.n	80059aa <HAL_I2C_Init+0x92>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a7d      	ldr	r2, [pc, #500]	@ (8005b94 <HAL_I2C_Init+0x27c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	bf94      	ite	ls
 80059a4:	2301      	movls	r3, #1
 80059a6:	2300      	movhi	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0e7      	b.n	8005b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a78      	ldr	r2, [pc, #480]	@ (8005b98 <HAL_I2C_Init+0x280>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0c9b      	lsrs	r3, r3, #18
 80059bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a6a      	ldr	r2, [pc, #424]	@ (8005b8c <HAL_I2C_Init+0x274>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d802      	bhi.n	80059ec <HAL_I2C_Init+0xd4>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3301      	adds	r3, #1
 80059ea:	e009      	b.n	8005a00 <HAL_I2C_Init+0xe8>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	4a69      	ldr	r2, [pc, #420]	@ (8005b9c <HAL_I2C_Init+0x284>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	099b      	lsrs	r3, r3, #6
 80059fe:	3301      	adds	r3, #1
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	495c      	ldr	r1, [pc, #368]	@ (8005b8c <HAL_I2C_Init+0x274>)
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	d819      	bhi.n	8005a54 <HAL_I2C_Init+0x13c>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1e59      	subs	r1, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a34:	400b      	ands	r3, r1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_I2C_Init+0x138>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1e59      	subs	r1, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	e051      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005a50:	2304      	movs	r3, #4
 8005a52:	e04f      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <HAL_I2C_Init+0x168>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1e58      	subs	r0, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	440b      	add	r3, r1
 8005a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e012      	b.n	8005aa6 <HAL_I2C_Init+0x18e>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	0099      	lsls	r1, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Init+0x196>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e022      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_I2C_Init+0x1bc>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1e58      	subs	r0, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	440b      	add	r3, r1
 8005ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad2:	e00f      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1e58      	subs	r0, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	0099      	lsls	r1, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	6809      	ldr	r1, [r1, #0]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6911      	ldr	r1, [r2, #16]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	000186a0 	.word	0x000186a0
 8005b90:	001e847f 	.word	0x001e847f
 8005b94:	003d08ff 	.word	0x003d08ff
 8005b98:	431bde83 	.word	0x431bde83
 8005b9c:	10624dd3 	.word	0x10624dd3

08005ba0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	4608      	mov	r0, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	817b      	strh	r3, [r7, #10]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	813b      	strh	r3, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bba:	f7fe f935 	bl	8003e28 <HAL_GetTick>
 8005bbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	f040 80d9 	bne.w	8005d80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	2319      	movs	r3, #25
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	496d      	ldr	r1, [pc, #436]	@ (8005d8c <HAL_I2C_Mem_Write+0x1ec>)
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fdfb 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0cc      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2C_Mem_Write+0x56>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e0c5      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d007      	beq.n	8005c1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2221      	movs	r2, #33	@ 0x21
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2240      	movs	r2, #64	@ 0x40
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005d90 <HAL_I2C_Mem_Write+0x1f0>)
 8005c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5e:	88f8      	ldrh	r0, [r7, #6]
 8005c60:	893a      	ldrh	r2, [r7, #8]
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fc32 	bl	80064d8 <I2C_RequestMemoryWrite>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d052      	beq.n	8005d20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e081      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fec0 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00d      	beq.n	8005caa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d107      	bne.n	8005ca6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e06b      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	781a      	ldrb	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d11b      	bne.n	8005d20 <HAL_I2C_Mem_Write+0x180>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1aa      	bne.n	8005c7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 feb3 	bl	8006a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00d      	beq.n	8005d54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d107      	bne.n	8005d50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e016      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	00100002 	.word	0x00100002
 8005d90:	ffff0000 	.word	0xffff0000

08005d94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	@ 0x30
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	817b      	strh	r3, [r7, #10]
 8005da6:	460b      	mov	r3, r1
 8005da8:	813b      	strh	r3, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005db2:	f7fe f839 	bl	8003e28 <HAL_GetTick>
 8005db6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	f040 8250 	bne.w	8006266 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2319      	movs	r3, #25
 8005dcc:	2201      	movs	r2, #1
 8005dce:	4982      	ldr	r1, [pc, #520]	@ (8005fd8 <HAL_I2C_Mem_Read+0x244>)
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fcff 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e243      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_Mem_Read+0x5a>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e23c      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d007      	beq.n	8005e14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2222      	movs	r2, #34	@ 0x22
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a62      	ldr	r2, [pc, #392]	@ (8005fdc <HAL_I2C_Mem_Read+0x248>)
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e56:	88f8      	ldrh	r0, [r7, #6]
 8005e58:	893a      	ldrh	r2, [r7, #8]
 8005e5a:	8979      	ldrh	r1, [r7, #10]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4603      	mov	r3, r0
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fbcc 	bl	8006604 <I2C_RequestMemoryRead>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e1f8      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d113      	bne.n	8005ea6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e1cc      	b.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d11e      	bne.n	8005eec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ebc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ebe:	b672      	cpsid	i
}
 8005ec0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ee8:	b662      	cpsie	i
}
 8005eea:	e035      	b.n	8005f58 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d11e      	bne.n	8005f32 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f04:	b672      	cpsid	i
}
 8005f06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f2e:	b662      	cpsie	i
}
 8005f30:	e012      	b.n	8005f58 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f40:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005f58:	e172      	b.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	f200 811f 	bhi.w	80061a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d123      	bne.n	8005fb4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fdd9 	bl	8006b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e173      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fb2:	e145      	b.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d152      	bne.n	8006062 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4906      	ldr	r1, [pc, #24]	@ (8005fe0 <HAL_I2C_Mem_Read+0x24c>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fc04 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e148      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
 8005fd6:	bf00      	nop
 8005fd8:	00100002 	.word	0x00100002
 8005fdc:	ffff0000 	.word	0xffff0000
 8005fe0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005fe4:	b672      	cpsid	i
}
 8005fe6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800602a:	b662      	cpsie	i
}
 800602c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006060:	e0ee      	b.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	2200      	movs	r2, #0
 800606a:	4981      	ldr	r1, [pc, #516]	@ (8006270 <HAL_I2C_Mem_Read+0x4dc>)
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fbb1 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0f5      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800608a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800608c:	b672      	cpsid	i
}
 800608e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006274 <HAL_I2C_Mem_Read+0x4e0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	08db      	lsrs	r3, r3, #3
 80060c8:	4a6b      	ldr	r2, [pc, #428]	@ (8006278 <HAL_I2C_Mem_Read+0x4e4>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	0a1a      	lsrs	r2, r3, #8
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00da      	lsls	r2, r3, #3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	3b01      	subs	r3, #1
 80060e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d118      	bne.n	800611a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800610a:	b662      	cpsie	i
}
 800610c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0a6      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d1d9      	bne.n	80060dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800616a:	b662      	cpsie	i
}
 800616c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061a0:	e04e      	b.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fcbe 	bl	8006b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e058      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d124      	bne.n	8006240 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d107      	bne.n	800620e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f ae88 	bne.w	8005f5a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8006266:	2302      	movs	r3, #2
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	@ 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	00010004 	.word	0x00010004
 8006274:	20000210 	.word	0x20000210
 8006278:	14f8b589 	.word	0x14f8b589

0800627c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	460b      	mov	r3, r1
 800628a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800628c:	f7fd fdcc 	bl	8003e28 <HAL_GetTick>
 8006290:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b20      	cmp	r3, #32
 80062a0:	f040 8111 	bne.w	80064c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2319      	movs	r3, #25
 80062aa:	2201      	movs	r2, #1
 80062ac:	4988      	ldr	r1, [pc, #544]	@ (80064d0 <HAL_I2C_IsDeviceReady+0x254>)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fa90 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
 80062bc:	e104      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_I2C_IsDeviceReady+0x50>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0fd      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d007      	beq.n	80062f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2224      	movs	r2, #36	@ 0x24
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a70      	ldr	r2, [pc, #448]	@ (80064d4 <HAL_I2C_IsDeviceReady+0x258>)
 8006314:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006324:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa4e 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634c:	d103      	bne.n	8006356 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e0b6      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800635a:	897b      	ldrh	r3, [r7, #10]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006368:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800636a:	f7fd fd5d 	bl	8003e28 <HAL_GetTick>
 800636e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800639e:	e025      	b.n	80063ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063a0:	f7fd fd42 	bl	8003e28 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <HAL_I2C_IsDeviceReady+0x13a>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22a0      	movs	r2, #160	@ 0xa0
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80063f6:	d005      	beq.n	8006404 <HAL_I2C_IsDeviceReady+0x188>
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <HAL_I2C_IsDeviceReady+0x188>
 80063fe:	7dbb      	ldrb	r3, [r7, #22]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0cd      	beq.n	80063a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d129      	bne.n	800646e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006428:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2319      	movs	r3, #25
 8006446:	2201      	movs	r2, #1
 8006448:	4921      	ldr	r1, [pc, #132]	@ (80064d0 <HAL_I2C_IsDeviceReady+0x254>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f9c2 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e036      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e02c      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006486:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2319      	movs	r3, #25
 800648e:	2201      	movs	r2, #1
 8006490:	490f      	ldr	r1, [pc, #60]	@ (80064d0 <HAL_I2C_IsDeviceReady+0x254>)
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f99e 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e012      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	3301      	adds	r3, #1
 80064a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	f4ff af32 	bcc.w	8006316 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	00100002 	.word	0x00100002
 80064d4:	ffff0000 	.word	0xffff0000

080064d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	817b      	strh	r3, [r7, #10]
 80064ea:	460b      	mov	r3, r1
 80064ec:	813b      	strh	r3, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2200      	movs	r2, #0
 800650a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f960 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006528:	d103      	bne.n	8006532 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006530:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e05f      	b.n	80065f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	492d      	ldr	r1, [pc, #180]	@ (8006600 <I2C_RequestMemoryWrite+0x128>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f9bb 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e04c      	b.n	80065f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	6a39      	ldr	r1, [r7, #32]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fa46 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	2b04      	cmp	r3, #4
 8006588:	d107      	bne.n	800659a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e02b      	b.n	80065f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065a4:	893b      	ldrh	r3, [r7, #8]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]
 80065ae:	e021      	b.n	80065f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065b0:	893b      	ldrh	r3, [r7, #8]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c0:	6a39      	ldr	r1, [r7, #32]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fa20 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d107      	bne.n	80065e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e005      	b.n	80065f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	00010002 	.word	0x00010002

08006604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	4608      	mov	r0, r1
 800660e:	4611      	mov	r1, r2
 8006610:	461a      	mov	r2, r3
 8006612:	4603      	mov	r3, r0
 8006614:	817b      	strh	r3, [r7, #10]
 8006616:	460b      	mov	r3, r1
 8006618:	813b      	strh	r3, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800662c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800663c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	2200      	movs	r2, #0
 8006646:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f8c2 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00d      	beq.n	8006672 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006664:	d103      	bne.n	800666e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800666c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e0aa      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006672:	897b      	ldrh	r3, [r7, #10]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	4952      	ldr	r1, [pc, #328]	@ (80067d0 <I2C_RequestMemoryRead+0x1cc>)
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f91d 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e097      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b0:	6a39      	ldr	r1, [r7, #32]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f9a8 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d107      	bne.n	80066d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e076      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066e0:	893b      	ldrh	r3, [r7, #8]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	611a      	str	r2, [r3, #16]
 80066ea:	e021      	b.n	8006730 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066ec:	893b      	ldrh	r3, [r7, #8]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	6a39      	ldr	r1, [r7, #32]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f982 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	2b04      	cmp	r3, #4
 8006710:	d107      	bne.n	8006722 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e050      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006726:	893b      	ldrh	r3, [r7, #8]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006732:	6a39      	ldr	r1, [r7, #32]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f967 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	2b04      	cmp	r3, #4
 8006746:	d107      	bne.n	8006758 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006756:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e035      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800676a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2200      	movs	r2, #0
 8006774:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f82b 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00d      	beq.n	80067a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006792:	d103      	bne.n	800679c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800679a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e013      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067a0:	897b      	ldrh	r3, [r7, #10]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	6a3a      	ldr	r2, [r7, #32]
 80067b4:	4906      	ldr	r1, [pc, #24]	@ (80067d0 <I2C_RequestMemoryRead+0x1cc>)
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f886 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	00010002 	.word	0x00010002

080067d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067e4:	e048      	b.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d044      	beq.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fd fb1b 	bl	8003e28 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d139      	bne.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10d      	bne.n	800682a <I2C_WaitOnFlagUntilTimeout+0x56>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	e00c      	b.n	8006844 <I2C_WaitOnFlagUntilTimeout+0x70>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	43da      	mvns	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	429a      	cmp	r2, r3
 8006848:	d116      	bne.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e023      	b.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10d      	bne.n	800689e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	43da      	mvns	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	e00c      	b.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	43da      	mvns	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d093      	beq.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068d6:	e071      	b.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e6:	d123      	bne.n	8006930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	f043 0204 	orr.w	r2, r3, #4
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e067      	b.n	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d041      	beq.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006938:	f7fd fa76 	bl	8003e28 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d302      	bcc.n	800694e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d136      	bne.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10c      	bne.n	8006972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	43da      	mvns	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e00b      	b.n	800698a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	43da      	mvns	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4013      	ands	r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e021      	b.n	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10c      	bne.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	43da      	mvns	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4013      	ands	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e00b      	b.n	80069f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	43da      	mvns	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f af6d 	bne.w	80068d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a14:	e034      	b.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f8e3 	bl	8006be2 <I2C_IsAcknowledgeFailed>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e034      	b.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	d028      	beq.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2e:	f7fd f9fb 	bl	8003e28 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d302      	bcc.n	8006a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11d      	bne.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d016      	beq.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	f043 0220 	orr.w	r2, r3, #32
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e007      	b.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8a:	2b80      	cmp	r3, #128	@ 0x80
 8006a8c:	d1c3      	bne.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa4:	e034      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f89b 	bl	8006be2 <I2C_IsAcknowledgeFailed>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e034      	b.n	8006b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d028      	beq.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fd f9b3 	bl	8003e28 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11d      	bne.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d016      	beq.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afc:	f043 0220 	orr.w	r2, r3, #32
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e007      	b.n	8006b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d1c3      	bne.n	8006aa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b34:	e049      	b.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d119      	bne.n	8006b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f06f 0210 	mvn.w	r2, #16
 8006b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e030      	b.n	8006bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b78:	f7fd f956 	bl	8003e28 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d302      	bcc.n	8006b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11d      	bne.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b40      	cmp	r3, #64	@ 0x40
 8006b9a:	d016      	beq.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e007      	b.n	8006bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b40      	cmp	r3, #64	@ 0x40
 8006bd6:	d1ae      	bne.n	8006b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf8:	d11b      	bne.n	8006c32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	f043 0204 	orr.w	r2, r3, #4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e036      	b.n	8006cbe <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006c58:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006c62:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6852      	ldr	r2, [r2, #4]
 8006c6c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6892      	ldr	r2, [r2, #8]
 8006c76:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c78:	f7fd f8d6 	bl	8003e28 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c7e:	e011      	b.n	8006ca4 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c80:	f7fd f8d2 	bl	8003e28 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f241 323c 	movw	r2, #4924	@ 0x133c
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d908      	bls.n	8006ca4 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e00c      	b.n	8006cbe <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006cba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e272      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8087 	beq.w	8006e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d04:	4b92      	ldr	r3, [pc, #584]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d00c      	beq.n	8006d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d10:	4b8f      	ldr	r3, [pc, #572]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f003 030c 	and.w	r3, r3, #12
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d112      	bne.n	8006d42 <HAL_RCC_OscConfig+0x5e>
 8006d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d28:	d10b      	bne.n	8006d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2a:	4b89      	ldr	r3, [pc, #548]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d06c      	beq.n	8006e10 <HAL_RCC_OscConfig+0x12c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d168      	bne.n	8006e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e24c      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCC_OscConfig+0x76>
 8006d4c:	4b80      	ldr	r3, [pc, #512]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a7f      	ldr	r2, [pc, #508]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e02e      	b.n	8006db8 <HAL_RCC_OscConfig+0xd4>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <HAL_RCC_OscConfig+0x98>
 8006d62:	4b7b      	ldr	r3, [pc, #492]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a7a      	ldr	r2, [pc, #488]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	4b78      	ldr	r3, [pc, #480]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a77      	ldr	r2, [pc, #476]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e01d      	b.n	8006db8 <HAL_RCC_OscConfig+0xd4>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCC_OscConfig+0xbc>
 8006d86:	4b72      	ldr	r3, [pc, #456]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a71      	ldr	r2, [pc, #452]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b6f      	ldr	r3, [pc, #444]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6e      	ldr	r2, [pc, #440]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e00b      	b.n	8006db8 <HAL_RCC_OscConfig+0xd4>
 8006da0:	4b6b      	ldr	r3, [pc, #428]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a6a      	ldr	r2, [pc, #424]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4b68      	ldr	r3, [pc, #416]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a67      	ldr	r2, [pc, #412]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d013      	beq.n	8006de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fd f832 	bl	8003e28 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7fd f82e 	bl	8003e28 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	@ 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e200      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dda:	4b5d      	ldr	r3, [pc, #372]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0xe4>
 8006de6:	e014      	b.n	8006e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fd f81e 	bl	8003e28 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df0:	f7fd f81a 	bl	8003e28 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b64      	cmp	r3, #100	@ 0x64
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e1ec      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e02:	4b53      	ldr	r3, [pc, #332]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x10c>
 8006e0e:	e000      	b.n	8006e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d063      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e2a:	4b49      	ldr	r3, [pc, #292]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f003 030c 	and.w	r3, r3, #12
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d11c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x18c>
 8006e36:	4b46      	ldr	r3, [pc, #280]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d116      	bne.n	8006e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e42:	4b43      	ldr	r3, [pc, #268]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_RCC_OscConfig+0x176>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e1c0      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4939      	ldr	r1, [pc, #228]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6e:	e03a      	b.n	8006ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d020      	beq.n	8006eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e78:	4b36      	ldr	r3, [pc, #216]	@ (8006f54 <HAL_RCC_OscConfig+0x270>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e7e:	f7fc ffd3 	bl	8003e28 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e86:	f7fc ffcf 	bl	8003e28 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e1a1      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e98:	4b2d      	ldr	r3, [pc, #180]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	4927      	ldr	r1, [pc, #156]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
 8006eb8:	e015      	b.n	8006ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eba:	4b26      	ldr	r3, [pc, #152]	@ (8006f54 <HAL_RCC_OscConfig+0x270>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec0:	f7fc ffb2 	bl	8003e28 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec8:	f7fc ffae 	bl	8003e28 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e180      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eda:	4b1d      	ldr	r3, [pc, #116]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d03a      	beq.n	8006f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d019      	beq.n	8006f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <HAL_RCC_OscConfig+0x274>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f00:	f7fc ff92 	bl	8003e28 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f08:	f7fc ff8e 	bl	8003e28 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e160      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <HAL_RCC_OscConfig+0x26c>)
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f26:	2001      	movs	r0, #1
 8006f28:	f000 face 	bl	80074c8 <RCC_Delay>
 8006f2c:	e01c      	b.n	8006f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <HAL_RCC_OscConfig+0x274>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f34:	f7fc ff78 	bl	8003e28 <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f3a:	e00f      	b.n	8006f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3c:	f7fc ff74 	bl	8003e28 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d908      	bls.n	8006f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e146      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	42420000 	.word	0x42420000
 8006f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f5c:	4b92      	ldr	r3, [pc, #584]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e9      	bne.n	8006f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80a6 	beq.w	80070c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f76:	2300      	movs	r3, #0
 8006f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f86:	4b88      	ldr	r3, [pc, #544]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	4a87      	ldr	r2, [pc, #540]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f90:	61d3      	str	r3, [r2, #28]
 8006f92:	4b85      	ldr	r3, [pc, #532]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f9a:	60bb      	str	r3, [r7, #8]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa2:	4b82      	ldr	r3, [pc, #520]	@ (80071ac <HAL_RCC_OscConfig+0x4c8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d118      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fae:	4b7f      	ldr	r3, [pc, #508]	@ (80071ac <HAL_RCC_OscConfig+0x4c8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80071ac <HAL_RCC_OscConfig+0x4c8>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fba:	f7fc ff35 	bl	8003e28 <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc2:	f7fc ff31 	bl	8003e28 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b64      	cmp	r3, #100	@ 0x64
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e103      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd4:	4b75      	ldr	r3, [pc, #468]	@ (80071ac <HAL_RCC_OscConfig+0x4c8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d106      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x312>
 8006fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	4a6e      	ldr	r2, [pc, #440]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	6213      	str	r3, [r2, #32]
 8006ff4:	e02d      	b.n	8007052 <HAL_RCC_OscConfig+0x36e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <HAL_RCC_OscConfig+0x334>
 8006ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4a69      	ldr	r2, [pc, #420]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	6213      	str	r3, [r2, #32]
 800700a:	4b67      	ldr	r3, [pc, #412]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	4a66      	ldr	r2, [pc, #408]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	6213      	str	r3, [r2, #32]
 8007016:	e01c      	b.n	8007052 <HAL_RCC_OscConfig+0x36e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b05      	cmp	r3, #5
 800701e:	d10c      	bne.n	800703a <HAL_RCC_OscConfig+0x356>
 8007020:	4b61      	ldr	r3, [pc, #388]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	4a60      	ldr	r2, [pc, #384]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007026:	f043 0304 	orr.w	r3, r3, #4
 800702a:	6213      	str	r3, [r2, #32]
 800702c:	4b5e      	ldr	r3, [pc, #376]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	4a5d      	ldr	r2, [pc, #372]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	6213      	str	r3, [r2, #32]
 8007038:	e00b      	b.n	8007052 <HAL_RCC_OscConfig+0x36e>
 800703a:	4b5b      	ldr	r3, [pc, #364]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	4a5a      	ldr	r2, [pc, #360]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	6213      	str	r3, [r2, #32]
 8007046:	4b58      	ldr	r3, [pc, #352]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	4a57      	ldr	r2, [pc, #348]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800704c:	f023 0304 	bic.w	r3, r3, #4
 8007050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d015      	beq.n	8007086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705a:	f7fc fee5 	bl	8003e28 <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007060:	e00a      	b.n	8007078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007062:	f7fc fee1 	bl	8003e28 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e0b1      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007078:	4b4b      	ldr	r3, [pc, #300]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0ee      	beq.n	8007062 <HAL_RCC_OscConfig+0x37e>
 8007084:	e014      	b.n	80070b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007086:	f7fc fecf 	bl	8003e28 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800708c:	e00a      	b.n	80070a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708e:	f7fc fecb 	bl	8003e28 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709c:	4293      	cmp	r3, r2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e09b      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a4:	4b40      	ldr	r3, [pc, #256]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ee      	bne.n	800708e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d105      	bne.n	80070c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b6:	4b3c      	ldr	r3, [pc, #240]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	4a3b      	ldr	r2, [pc, #236]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 80070bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8087 	beq.w	80071da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070cc:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 030c 	and.w	r3, r3, #12
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d061      	beq.n	800719c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d146      	bne.n	800716e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e0:	4b33      	ldr	r3, [pc, #204]	@ (80071b0 <HAL_RCC_OscConfig+0x4cc>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e6:	f7fc fe9f 	bl	8003e28 <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ee:	f7fc fe9b 	bl	8003e28 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e06d      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007100:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f0      	bne.n	80070ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007114:	d108      	bne.n	8007128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007116:	4b24      	ldr	r3, [pc, #144]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	4921      	ldr	r1, [pc, #132]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007124:	4313      	orrs	r3, r2
 8007126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007128:	4b1f      	ldr	r3, [pc, #124]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a19      	ldr	r1, [r3, #32]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	430b      	orrs	r3, r1
 800713a:	491b      	ldr	r1, [pc, #108]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 800713c:	4313      	orrs	r3, r2
 800713e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007140:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <HAL_RCC_OscConfig+0x4cc>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fc fe6f 	bl	8003e28 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800714e:	f7fc fe6b 	bl	8003e28 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e03d      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x46a>
 800716c:	e035      	b.n	80071da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b10      	ldr	r3, [pc, #64]	@ (80071b0 <HAL_RCC_OscConfig+0x4cc>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fc fe58 	bl	8003e28 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fc fe54 	bl	8003e28 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e026      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_RCC_OscConfig+0x4c4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x498>
 800719a:	e01e      	b.n	80071da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e019      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40007000 	.word	0x40007000
 80071b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071b4:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RCC_OscConfig+0x500>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40021000 	.word	0x40021000

080071e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0d0      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071fc:	4b6a      	ldr	r3, [pc, #424]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d910      	bls.n	800722c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800720a:	4b67      	ldr	r3, [pc, #412]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f023 0207 	bic.w	r2, r3, #7
 8007212:	4965      	ldr	r1, [pc, #404]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	4313      	orrs	r3, r2
 8007218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	4b63      	ldr	r3, [pc, #396]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0b8      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d020      	beq.n	800727a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007244:	4b59      	ldr	r3, [pc, #356]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a58      	ldr	r2, [pc, #352]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 800724a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800724e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800725c:	4b53      	ldr	r3, [pc, #332]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4a52      	ldr	r2, [pc, #328]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007262:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007268:	4b50      	ldr	r3, [pc, #320]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	494d      	ldr	r1, [pc, #308]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007276:	4313      	orrs	r3, r2
 8007278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d040      	beq.n	8007308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	4b47      	ldr	r3, [pc, #284]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d115      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e07f      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d107      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a6:	4b41      	ldr	r3, [pc, #260]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e073      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b6:	4b3d      	ldr	r3, [pc, #244]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e06b      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072c6:	4b39      	ldr	r3, [pc, #228]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f023 0203 	bic.w	r2, r3, #3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4936      	ldr	r1, [pc, #216]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072d8:	f7fc fda6 	bl	8003e28 <HAL_GetTick>
 80072dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	e00a      	b.n	80072f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e0:	f7fc fda2 	bl	8003e28 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e053      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f6:	4b2d      	ldr	r3, [pc, #180]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 020c 	and.w	r2, r3, #12
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	429a      	cmp	r2, r3
 8007306:	d1eb      	bne.n	80072e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007308:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d210      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007316:	4b24      	ldr	r3, [pc, #144]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f023 0207 	bic.w	r2, r3, #7
 800731e:	4922      	ldr	r1, [pc, #136]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	4313      	orrs	r3, r2
 8007324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007326:	4b20      	ldr	r3, [pc, #128]	@ (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d001      	beq.n	8007338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e032      	b.n	800739e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007344:	4b19      	ldr	r3, [pc, #100]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4916      	ldr	r1, [pc, #88]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007352:	4313      	orrs	r3, r2
 8007354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	490e      	ldr	r1, [pc, #56]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007376:	f000 f821 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 800737a:	4602      	mov	r2, r0
 800737c:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	490a      	ldr	r1, [pc, #40]	@ (80073b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007388:	5ccb      	ldrb	r3, [r1, r3]
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	4a09      	ldr	r2, [pc, #36]	@ (80073b4 <HAL_RCC_ClockConfig+0x1cc>)
 8007390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <HAL_RCC_ClockConfig+0x1d0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fc fd04 	bl	8003da4 <HAL_InitTick>

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40022000 	.word	0x40022000
 80073ac:	40021000 	.word	0x40021000
 80073b0:	0800ced8 	.word	0x0800ced8
 80073b4:	20000210 	.word	0x20000210
 80073b8:	20000214 	.word	0x20000214

080073bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	2300      	movs	r3, #0
 80073d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80073d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x94>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 030c 	and.w	r3, r3, #12
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d002      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x30>
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d003      	beq.n	80073f2 <HAL_RCC_GetSysClockFreq+0x36>
 80073ea:	e027      	b.n	800743c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073ec:	4b19      	ldr	r3, [pc, #100]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x98>)
 80073ee:	613b      	str	r3, [r7, #16]
      break;
 80073f0:	e027      	b.n	8007442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	0c9b      	lsrs	r3, r3, #18
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	4a17      	ldr	r2, [pc, #92]	@ (8007458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80073fc:	5cd3      	ldrb	r3, [r2, r3]
 80073fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d010      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800740a:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x94>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	0c5b      	lsrs	r3, r3, #17
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	4a11      	ldr	r2, [pc, #68]	@ (800745c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007416:	5cd3      	ldrb	r3, [r2, r3]
 8007418:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a0d      	ldr	r2, [pc, #52]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x98>)
 800741e:	fb03 f202 	mul.w	r2, r3, r2
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e004      	b.n	8007436 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a0c      	ldr	r2, [pc, #48]	@ (8007460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007430:	fb02 f303 	mul.w	r3, r2, r3
 8007434:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	613b      	str	r3, [r7, #16]
      break;
 800743a:	e002      	b.n	8007442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x98>)
 800743e:	613b      	str	r3, [r7, #16]
      break;
 8007440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007442:	693b      	ldr	r3, [r7, #16]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000
 8007454:	007a1200 	.word	0x007a1200
 8007458:	0800cef0 	.word	0x0800cef0
 800745c:	0800cf00 	.word	0x0800cf00
 8007460:	003d0900 	.word	0x003d0900

08007464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007468:	4b02      	ldr	r3, [pc, #8]	@ (8007474 <HAL_RCC_GetHCLKFreq+0x10>)
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr
 8007474:	20000210 	.word	0x20000210

08007478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800747c:	f7ff fff2 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4903      	ldr	r1, [pc, #12]	@ (800749c <HAL_RCC_GetPCLK1Freq+0x24>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007494:	4618      	mov	r0, r3
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021000 	.word	0x40021000
 800749c:	0800cee8 	.word	0x0800cee8

080074a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074a4:	f7ff ffde 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	0adb      	lsrs	r3, r3, #11
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	4903      	ldr	r1, [pc, #12]	@ (80074c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074b6:	5ccb      	ldrb	r3, [r1, r3]
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40021000 	.word	0x40021000
 80074c4:	0800cee8 	.word	0x0800cee8

080074c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80074d0:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <RCC_Delay+0x34>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <RCC_Delay+0x38>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	0a5b      	lsrs	r3, r3, #9
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80074e4:	bf00      	nop
  }
  while (Delay --);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1e5a      	subs	r2, r3, #1
 80074ea:	60fa      	str	r2, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f9      	bne.n	80074e4 <RCC_Delay+0x1c>
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	20000210 	.word	0x20000210
 8007500:	10624dd3 	.word	0x10624dd3

08007504 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d07d      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007524:	4b4f      	ldr	r3, [pc, #316]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10d      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007530:	4b4c      	ldr	r3, [pc, #304]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	4a4b      	ldr	r2, [pc, #300]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800753a:	61d3      	str	r3, [r2, #28]
 800753c:	4b49      	ldr	r3, [pc, #292]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800754c:	4b46      	ldr	r3, [pc, #280]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d118      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007558:	4b43      	ldr	r3, [pc, #268]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a42      	ldr	r2, [pc, #264]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800755e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007564:	f7fc fc60 	bl	8003e28 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756a:	e008      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756c:	f7fc fc5c 	bl	8003e28 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	@ 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e06d      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800757e:	4b3a      	ldr	r3, [pc, #232]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0f0      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800758a:	4b36      	ldr	r3, [pc, #216]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d02e      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d027      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075b2:	4b2e      	ldr	r3, [pc, #184]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075b8:	4b2c      	ldr	r3, [pc, #176]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075be:	4a29      	ldr	r2, [pc, #164]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ce:	f7fc fc2b 	bl	8003e28 <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d4:	e00a      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d6:	f7fc fc27 	bl	8003e28 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e036      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ee      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4917      	ldr	r1, [pc, #92]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007606:	4313      	orrs	r3, r2
 8007608:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d105      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007610:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	4a13      	ldr	r2, [pc, #76]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800761a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007628:	4b0e      	ldr	r3, [pc, #56]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	490b      	ldr	r1, [pc, #44]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007636:	4313      	orrs	r3, r2
 8007638:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007646:	4b07      	ldr	r3, [pc, #28]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	4904      	ldr	r1, [pc, #16]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007654:	4313      	orrs	r3, r2
 8007656:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40021000 	.word	0x40021000
 8007668:	40007000 	.word	0x40007000
 800766c:	42420440 	.word	0x42420440

08007670 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	2300      	movs	r3, #0
 800768a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b10      	cmp	r3, #16
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b10      	cmp	r3, #16
 8007696:	f200 808a 	bhi.w	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d045      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d075      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80076a6:	e082      	b.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80076a8:	4b46      	ldr	r3, [pc, #280]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80076ae:	4b45      	ldr	r3, [pc, #276]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d07b      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	0c9b      	lsrs	r3, r3, #18
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	4a41      	ldr	r2, [pc, #260]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80076c4:	5cd3      	ldrb	r3, [r2, r3]
 80076c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d015      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076d2:	4b3c      	ldr	r3, [pc, #240]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	0c5b      	lsrs	r3, r3, #17
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	4a3b      	ldr	r2, [pc, #236]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80076de:	5cd3      	ldrb	r3, [r2, r3]
 80076e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00d      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80076ec:	4a38      	ldr	r2, [pc, #224]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4a34      	ldr	r2, [pc, #208]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007708:	4b2e      	ldr	r3, [pc, #184]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007714:	d102      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	61bb      	str	r3, [r7, #24]
      break;
 800771a:	e04a      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	4a2d      	ldr	r2, [pc, #180]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	61bb      	str	r3, [r7, #24]
      break;
 800772a:	e042      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800772c:	4b25      	ldr	r3, [pc, #148]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773c:	d108      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e01f      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800775a:	d109      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800775c:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007768:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	e00f      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800777a:	d11c      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d016      	beq.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007788:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800778c:	61bb      	str	r3, [r7, #24]
      break;
 800778e:	e012      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007790:	e011      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007792:	f7ff fe85 	bl	80074a0 <HAL_RCC_GetPCLK2Freq>
 8007796:	4602      	mov	r2, r0
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	0b9b      	lsrs	r3, r3, #14
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	3301      	adds	r3, #1
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077aa:	61bb      	str	r3, [r7, #24]
      break;
 80077ac:	e004      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80077b6:	bf00      	nop
    }
  }
  return (frequency);
 80077b8:	69bb      	ldr	r3, [r7, #24]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40021000 	.word	0x40021000
 80077c8:	0800cf04 	.word	0x0800cf04
 80077cc:	0800cf14 	.word	0x0800cf14
 80077d0:	007a1200 	.word	0x007a1200
 80077d4:	003d0900 	.word	0x003d0900
 80077d8:	aaaaaaab 	.word	0xaaaaaaab

080077dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e041      	b.n	8007872 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fc f862 	bl	80038cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f000 fcea 	bl	80081f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <HAL_TIM_PWM_Start+0x24>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf14      	ite	ne
 8007898:	2301      	movne	r3, #1
 800789a:	2300      	moveq	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e022      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d109      	bne.n	80078ba <HAL_TIM_PWM_Start+0x3e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e015      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d109      	bne.n	80078d4 <HAL_TIM_PWM_Start+0x58>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	e008      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e05e      	b.n	80079ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_PWM_Start+0x82>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078fc:	e013      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b04      	cmp	r3, #4
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0x92>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800790c:	e00b      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xa2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800791c:	e003      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2201      	movs	r2, #1
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 ff63 	bl	80087fa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1e      	ldr	r2, [pc, #120]	@ (80079b4 <HAL_TIM_PWM_Start+0x138>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d107      	bne.n	800794e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800794c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a18      	ldr	r2, [pc, #96]	@ (80079b4 <HAL_TIM_PWM_Start+0x138>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_TIM_PWM_Start+0xfa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007960:	d009      	beq.n	8007976 <HAL_TIM_PWM_Start+0xfa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a14      	ldr	r2, [pc, #80]	@ (80079b8 <HAL_TIM_PWM_Start+0x13c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_TIM_PWM_Start+0xfa>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a12      	ldr	r2, [pc, #72]	@ (80079bc <HAL_TIM_PWM_Start+0x140>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d111      	bne.n	800799a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b06      	cmp	r3, #6
 8007986:	d010      	beq.n	80079aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	e007      	b.n	80079aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40012c00 	.word	0x40012c00
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800

080079c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e041      	b.n	8007a56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f839 	bl	8007a5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f000 fbf8 	bl	80081f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_IC_Start_IT+0x1e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	e013      	b.n	8007ab6 <HAL_TIM_IC_Start_IT+0x46>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_IC_Start_IT+0x2e>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	e00b      	b.n	8007ab6 <HAL_TIM_IC_Start_IT+0x46>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_IC_Start_IT+0x3e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e003      	b.n	8007ab6 <HAL_TIM_IC_Start_IT+0x46>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <HAL_TIM_IC_Start_IT+0x58>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e013      	b.n	8007af0 <HAL_TIM_IC_Start_IT+0x80>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d104      	bne.n	8007ad8 <HAL_TIM_IC_Start_IT+0x68>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	e00b      	b.n	8007af0 <HAL_TIM_IC_Start_IT+0x80>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b08      	cmp	r3, #8
 8007adc:	d104      	bne.n	8007ae8 <HAL_TIM_IC_Start_IT+0x78>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e003      	b.n	8007af0 <HAL_TIM_IC_Start_IT+0x80>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d102      	bne.n	8007afe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007af8:	7b7b      	ldrb	r3, [r7, #13]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d001      	beq.n	8007b02 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e0b8      	b.n	8007c74 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_IC_Start_IT+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b10:	e013      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0xca>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_IC_Start_IT+0xb2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b20:	e00b      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0xca>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_IC_Start_IT+0xc2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b30:	e003      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0xca>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_IC_Start_IT+0xda>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b48:	e013      	b.n	8007b72 <HAL_TIM_IC_Start_IT+0x102>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_IC_Start_IT+0xea>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b58:	e00b      	b.n	8007b72 <HAL_TIM_IC_Start_IT+0x102>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_IC_Start_IT+0xfa>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b68:	e003      	b.n	8007b72 <HAL_TIM_IC_Start_IT+0x102>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d841      	bhi.n	8007bfc <HAL_TIM_IC_Start_IT+0x18c>
 8007b78:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <HAL_TIM_IC_Start_IT+0x110>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007bfd 	.word	0x08007bfd
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007bfd 	.word	0x08007bfd
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bfd 	.word	0x08007bfd
 8007b98:	08007bfd 	.word	0x08007bfd
 8007b9c:	08007bfd 	.word	0x08007bfd
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007beb 	.word	0x08007beb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0202 	orr.w	r2, r2, #2
 8007bc2:	60da      	str	r2, [r3, #12]
      break;
 8007bc4:	e01d      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0204 	orr.w	r2, r2, #4
 8007bd4:	60da      	str	r2, [r3, #12]
      break;
 8007bd6:	e014      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0208 	orr.w	r2, r2, #8
 8007be6:	60da      	str	r2, [r3, #12]
      break;
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0210 	orr.w	r2, r2, #16
 8007bf8:	60da      	str	r2, [r3, #12]
      break;
 8007bfa:	e002      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007c00:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d134      	bne.n	8007c72 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fdf2 	bl	80087fa <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a18      	ldr	r2, [pc, #96]	@ (8007c7c <HAL_TIM_IC_Start_IT+0x20c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00e      	beq.n	8007c3e <HAL_TIM_IC_Start_IT+0x1ce>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c28:	d009      	beq.n	8007c3e <HAL_TIM_IC_Start_IT+0x1ce>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a14      	ldr	r2, [pc, #80]	@ (8007c80 <HAL_TIM_IC_Start_IT+0x210>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <HAL_TIM_IC_Start_IT+0x1ce>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a12      	ldr	r2, [pc, #72]	@ (8007c84 <HAL_TIM_IC_Start_IT+0x214>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d111      	bne.n	8007c62 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d010      	beq.n	8007c72 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	e007      	b.n	8007c72 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800

08007c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d020      	beq.n	8007cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01b      	beq.n	8007cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0202 	mvn.w	r2, #2
 8007cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7f9 fe1e 	bl	8001914 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa6f 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa75 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01b      	beq.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0204 	mvn.w	r2, #4
 8007d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7f9 fdf8 	bl	8001914 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa49 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa4f 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d020      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0208 	mvn.w	r2, #8
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7f9 fdd2 	bl	8001914 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa23 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa29 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01b      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0210 	mvn.w	r2, #16
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2208      	movs	r2, #8
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f9 fdac 	bl	8001914 <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9fd 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa03 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00c      	beq.n	8007df4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d007      	beq.n	8007df4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0201 	mvn.w	r2, #1
 8007dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9dc 	bl	80081ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fd7d 	bl	8008912 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00c      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9d3 	bl	80081e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00c      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0220 	mvn.w	r2, #32
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fd50 	bl	8008900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e088      	b.n	8007f98 <HAL_TIM_IC_ConfigChannel+0x130>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11b      	bne.n	8007ecc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007ea4:	f000 fb9c 	bl	80085e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 020c 	bic.w	r2, r2, #12
 8007eb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	619a      	str	r2, [r3, #24]
 8007eca:	e060      	b.n	8007f8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d11c      	bne.n	8007f0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007ee2:	f000 fbd7 	bl	8008694 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ef4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6999      	ldr	r1, [r3, #24]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	021a      	lsls	r2, r3, #8
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	619a      	str	r2, [r3, #24]
 8007f0a:	e040      	b.n	8007f8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d11b      	bne.n	8007f4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007f22:	f000 fbf3 	bl	800870c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 020c 	bic.w	r2, r2, #12
 8007f34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69d9      	ldr	r1, [r3, #28]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	61da      	str	r2, [r3, #28]
 8007f48:	e021      	b.n	8007f8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b0c      	cmp	r3, #12
 8007f4e:	d11c      	bne.n	8007f8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007f60:	f000 fc0f 	bl	8008782 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007f72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69d9      	ldr	r1, [r3, #28]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	61da      	str	r2, [r3, #28]
 8007f88:	e001      	b.n	8007f8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e0ae      	b.n	800811c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	f200 809f 	bhi.w	800810c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fce:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08008009 	.word	0x08008009
 8007fd8:	0800810d 	.word	0x0800810d
 8007fdc:	0800810d 	.word	0x0800810d
 8007fe0:	0800810d 	.word	0x0800810d
 8007fe4:	08008049 	.word	0x08008049
 8007fe8:	0800810d 	.word	0x0800810d
 8007fec:	0800810d 	.word	0x0800810d
 8007ff0:	0800810d 	.word	0x0800810d
 8007ff4:	0800808b 	.word	0x0800808b
 8007ff8:	0800810d 	.word	0x0800810d
 8007ffc:	0800810d 	.word	0x0800810d
 8008000:	0800810d 	.word	0x0800810d
 8008004:	080080cb 	.word	0x080080cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f95e 	bl	80082d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0208 	orr.w	r2, r2, #8
 8008022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6999      	ldr	r1, [r3, #24]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	619a      	str	r2, [r3, #24]
      break;
 8008046:	e064      	b.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f9a4 	bl	800839c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6999      	ldr	r1, [r3, #24]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	021a      	lsls	r2, r3, #8
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	619a      	str	r2, [r3, #24]
      break;
 8008088:	e043      	b.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f9ed 	bl	8008470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0208 	orr.w	r2, r2, #8
 80080a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69da      	ldr	r2, [r3, #28]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0204 	bic.w	r2, r2, #4
 80080b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69d9      	ldr	r1, [r3, #28]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	61da      	str	r2, [r3, #28]
      break;
 80080c8:	e023      	b.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fa37 	bl	8008544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69da      	ldr	r2, [r3, #28]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69d9      	ldr	r1, [r3, #28]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	021a      	lsls	r2, r3, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	61da      	str	r2, [r3, #28]
      break;
 800810a:	e002      	b.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
      break;
 8008110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b0c      	cmp	r3, #12
 8008136:	d831      	bhi.n	800819c <HAL_TIM_ReadCapturedValue+0x78>
 8008138:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <HAL_TIM_ReadCapturedValue+0x1c>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008175 	.word	0x08008175
 8008144:	0800819d 	.word	0x0800819d
 8008148:	0800819d 	.word	0x0800819d
 800814c:	0800819d 	.word	0x0800819d
 8008150:	0800817f 	.word	0x0800817f
 8008154:	0800819d 	.word	0x0800819d
 8008158:	0800819d 	.word	0x0800819d
 800815c:	0800819d 	.word	0x0800819d
 8008160:	08008189 	.word	0x08008189
 8008164:	0800819d 	.word	0x0800819d
 8008168:	0800819d 	.word	0x0800819d
 800816c:	0800819d 	.word	0x0800819d
 8008170:	08008193 	.word	0x08008193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817a:	60fb      	str	r3, [r7, #12]

      break;
 800817c:	e00f      	b.n	800819e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	60fb      	str	r3, [r7, #12]

      break;
 8008186:	e00a      	b.n	800819e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	60fb      	str	r3, [r7, #12]

      break;
 8008190:	e005      	b.n	800819e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008198:	60fb      	str	r3, [r7, #12]

      break;
 800819a:	e000      	b.n	800819e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800819c:	bf00      	nop
  }

  return tmpreg;
 800819e:	68fb      	ldr	r3, [r7, #12]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop

080081ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a2f      	ldr	r2, [pc, #188]	@ (80082c4 <TIM_Base_SetConfig+0xd0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_Base_SetConfig+0x30>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008212:	d007      	beq.n	8008224 <TIM_Base_SetConfig+0x30>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a2c      	ldr	r2, [pc, #176]	@ (80082c8 <TIM_Base_SetConfig+0xd4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_Base_SetConfig+0x30>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a2b      	ldr	r2, [pc, #172]	@ (80082cc <TIM_Base_SetConfig+0xd8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d108      	bne.n	8008236 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a22      	ldr	r2, [pc, #136]	@ (80082c4 <TIM_Base_SetConfig+0xd0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00b      	beq.n	8008256 <TIM_Base_SetConfig+0x62>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008244:	d007      	beq.n	8008256 <TIM_Base_SetConfig+0x62>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1f      	ldr	r2, [pc, #124]	@ (80082c8 <TIM_Base_SetConfig+0xd4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d003      	beq.n	8008256 <TIM_Base_SetConfig+0x62>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1e      	ldr	r2, [pc, #120]	@ (80082cc <TIM_Base_SetConfig+0xd8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d108      	bne.n	8008268 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800825c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a0d      	ldr	r2, [pc, #52]	@ (80082c4 <TIM_Base_SetConfig+0xd0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d103      	bne.n	800829c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f023 0201 	bic.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	611a      	str	r2, [r3, #16]
  }
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr
 80082c4:	40012c00 	.word	0x40012c00
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800

080082d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f023 0201 	bic.w	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0302 	bic.w	r3, r3, #2
 8008318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a1c      	ldr	r2, [pc, #112]	@ (8008398 <TIM_OC1_SetConfig+0xc8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10c      	bne.n	8008346 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0308 	bic.w	r3, r3, #8
 8008332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f023 0304 	bic.w	r3, r3, #4
 8008344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a13      	ldr	r2, [pc, #76]	@ (8008398 <TIM_OC1_SetConfig+0xc8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d111      	bne.n	8008372 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800835c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	621a      	str	r2, [r3, #32]
}
 800838c:	bf00      	nop
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40012c00 	.word	0x40012c00

0800839c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	f023 0210 	bic.w	r2, r3, #16
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f023 0320 	bic.w	r3, r3, #32
 80083e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a1d      	ldr	r2, [pc, #116]	@ (800846c <TIM_OC2_SetConfig+0xd0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10d      	bne.n	8008418 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a14      	ldr	r2, [pc, #80]	@ (800846c <TIM_OC2_SetConfig+0xd0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d113      	bne.n	8008448 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800842e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	40012c00 	.word	0x40012c00

08008470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0303 	bic.w	r3, r3, #3
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <TIM_OC3_SetConfig+0xd0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10d      	bne.n	80084ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a14      	ldr	r2, [pc, #80]	@ (8008540 <TIM_OC3_SetConfig+0xd0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d113      	bne.n	800851a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	621a      	str	r2, [r3, #32]
}
 8008534:	bf00      	nop
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40012c00 	.word	0x40012c00

08008544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800857a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800858e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	031b      	lsls	r3, r3, #12
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a0f      	ldr	r2, [pc, #60]	@ (80085dc <TIM_OC4_SetConfig+0x98>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d109      	bne.n	80085b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	019b      	lsls	r3, r3, #6
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	621a      	str	r2, [r3, #32]
}
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	40012c00 	.word	0x40012c00

080085e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f023 0201 	bic.w	r2, r3, #1
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a1f      	ldr	r2, [pc, #124]	@ (8008688 <TIM_TI1_SetConfig+0xa8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00b      	beq.n	8008626 <TIM_TI1_SetConfig+0x46>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008614:	d007      	beq.n	8008626 <TIM_TI1_SetConfig+0x46>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <TIM_TI1_SetConfig+0xac>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d003      	beq.n	8008626 <TIM_TI1_SetConfig+0x46>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4a1b      	ldr	r2, [pc, #108]	@ (8008690 <TIM_TI1_SetConfig+0xb0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d101      	bne.n	800862a <TIM_TI1_SetConfig+0x4a>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <TIM_TI1_SetConfig+0x4c>
 800862a:	2300      	movs	r3, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e003      	b.n	800864a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	b2db      	uxtb	r3, r3
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f023 030a 	bic.w	r3, r3, #10
 8008664:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f003 030a 	and.w	r3, r3, #10
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	621a      	str	r2, [r3, #32]
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr
 8008688:	40012c00 	.word	0x40012c00
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800

08008694 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	f023 0210 	bic.w	r2, r3, #16
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	031b      	lsls	r3, r3, #12
 80086d8:	b29b      	uxth	r3, r3
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008748:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	b2db      	uxtb	r3, r3
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800875c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	021b      	lsls	r3, r3, #8
 8008762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	621a      	str	r2, [r3, #32]
}
 8008778:	bf00      	nop
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008782:	b480      	push	{r7}
 8008784:	b087      	sub	sp, #28
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	031b      	lsls	r3, r3, #12
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	031b      	lsls	r3, r3, #12
 80087da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr

080087fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b087      	sub	sp, #28
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	2201      	movs	r2, #1
 800880e:	fa02 f303 	lsl.w	r3, r2, r3
 8008812:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a1a      	ldr	r2, [r3, #32]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	43db      	mvns	r3, r3
 800881c:	401a      	ands	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	fa01 f303 	lsl.w	r3, r1, r3
 8008832:	431a      	orrs	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	621a      	str	r2, [r3, #32]
}
 8008838:	bf00      	nop
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
	...

08008844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008858:	2302      	movs	r3, #2
 800885a:	e046      	b.n	80088ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a16      	ldr	r2, [pc, #88]	@ (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00e      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a8:	d009      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a12      	ldr	r2, [pc, #72]	@ (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d004      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a10      	ldr	r2, [pc, #64]	@ (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d10c      	bne.n	80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr
 80088f4:	40012c00 	.word	0x40012c00
 80088f8:	40000400 	.word	0x40000400
 80088fc:	40000800 	.word	0x40000800

08008900 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr

08008912 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e042      	b.n	80089bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fb f880 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	@ 0x24
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fdb7 	bl	80094dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800897c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800898c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800899c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	@ 0x28
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d175      	bne.n	8008ad0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_UART_Transmit+0x2c>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e06e      	b.n	8008ad2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2221      	movs	r2, #33	@ 0x21
 80089fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a02:	f7fb fa11 	bl	8003e28 <HAL_GetTick>
 8008a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	88fa      	ldrh	r2, [r7, #6]
 8008a0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	88fa      	ldrh	r2, [r7, #6]
 8008a12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1c:	d108      	bne.n	8008a30 <HAL_UART_Transmit+0x6c>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	e003      	b.n	8008a38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a38:	e02e      	b.n	8008a98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2200      	movs	r2, #0
 8008a42:	2180      	movs	r1, #128	@ 0x80
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 fb1c 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e03a      	b.n	8008ad2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	3302      	adds	r3, #2
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	e007      	b.n	8008a8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	3301      	adds	r3, #1
 8008a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1cb      	bne.n	8008a3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2140      	movs	r1, #64	@ 0x40
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fae8 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e006      	b.n	8008ad2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e000      	b.n	8008ad2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d112      	bne.n	8008b1a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_UART_Receive_IT+0x26>
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e00b      	b.n	8008b1c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fb0f 	bl	8009134 <UART_Start_Receive_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	e000      	b.n	8008b1c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b0ba      	sub	sp, #232	@ 0xe8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10f      	bne.n	8008b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <HAL_UART_IRQHandler+0x66>
 8008b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fbec 	bl	8009360 <UART_Receive_IT>
      return;
 8008b88:	e25b      	b.n	8009042 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80de 	beq.w	8008d50 <HAL_UART_IRQHandler+0x22c>
 8008b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 80d1 	beq.w	8008d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <HAL_UART_IRQHandler+0xae>
 8008bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bca:	f043 0201 	orr.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <HAL_UART_IRQHandler+0xd2>
 8008bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	f043 0202 	orr.w	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_UART_IRQHandler+0xf6>
 8008c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c12:	f043 0204 	orr.w	r2, r3, #4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d011      	beq.n	8008c4a <HAL_UART_IRQHandler+0x126>
 8008c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c42:	f043 0208 	orr.w	r2, r3, #8
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 81f2 	beq.w	8009038 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <HAL_UART_IRQHandler+0x14e>
 8008c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb77 	bl	8009360 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <HAL_UART_IRQHandler+0x17a>
 8008c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04f      	beq.n	8008d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa81 	bl	80091a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d041      	beq.n	8008d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3314      	adds	r3, #20
 8008cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1d9      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d013      	beq.n	8008d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8008f04 <HAL_UART_IRQHandler+0x3e0>)
 8008d0c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fc f888 	bl	8004e28 <HAL_DMA_Abort_IT>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d016      	beq.n	8008d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2c:	e00e      	b.n	8008d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f993 	bl	800905a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d34:	e00a      	b.n	8008d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f98f 	bl	800905a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3c:	e006      	b.n	8008d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f98b 	bl	800905a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008d4a:	e175      	b.n	8009038 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4c:	bf00      	nop
    return;
 8008d4e:	e173      	b.n	8009038 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f040 814f 	bne.w	8008ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 8148 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f003 0310 	and.w	r3, r3, #16
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8141 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80b6 	beq.w	8008f08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8145 	beq.w	800903c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	f080 813e 	bcs.w	800903c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	f000 8088 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008df2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	330c      	adds	r3, #12
 8008dfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e00:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1d9      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3314      	adds	r3, #20
 8008e26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3314      	adds	r3, #20
 8008e40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e1      	bne.n	8008e20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3314      	adds	r3, #20
 8008e62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3314      	adds	r3, #20
 8008e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e3      	bne.n	8008e5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	330c      	adds	r3, #12
 8008ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eb4:	f023 0310 	bic.w	r3, r3, #16
 8008eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ec6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008ec8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ecc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e3      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fb ff66 	bl	8004db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8b6 	bl	800906c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f00:	e09c      	b.n	800903c <HAL_UART_IRQHandler+0x518>
 8008f02:	bf00      	nop
 8008f04:	0800926b 	.word	0x0800926b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 808e 	beq.w	8009040 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8089 	beq.w	8009040 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f52:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e3      	bne.n	8008f2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3314      	adds	r3, #20
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	623b      	str	r3, [r7, #32]
   return(result);
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	f023 0301 	bic.w	r3, r3, #1
 8008f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3314      	adds	r3, #20
 8008f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e3      	bne.n	8008f66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0310 	bic.w	r3, r3, #16
 8008fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008fd0:	61fa      	str	r2, [r7, #28]
 8008fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	69b9      	ldr	r1, [r7, #24]
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e3      	bne.n	8008fac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f83b 	bl	800906c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ff6:	e023      	b.n	8009040 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009000:	2b00      	cmp	r3, #0
 8009002:	d009      	beq.n	8009018 <HAL_UART_IRQHandler+0x4f4>
 8009004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f93e 	bl	8009292 <UART_Transmit_IT>
    return;
 8009016:	e014      	b.n	8009042 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00e      	beq.n	8009042 <HAL_UART_IRQHandler+0x51e>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d008      	beq.n	8009042 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f97d 	bl	8009330 <UART_EndTransmit_IT>
    return;
 8009036:	e004      	b.n	8009042 <HAL_UART_IRQHandler+0x51e>
    return;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <HAL_UART_IRQHandler+0x51e>
      return;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <HAL_UART_IRQHandler+0x51e>
      return;
 8009040:	bf00      	nop
  }
}
 8009042:	37e8      	adds	r7, #232	@ 0xe8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b086      	sub	sp, #24
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009092:	e03b      	b.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d037      	beq.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909c:	f7fa fec4 	bl	8003e28 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d302      	bcc.n	80090b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e03a      	b.n	800912c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d023      	beq.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b80      	cmp	r3, #128	@ 0x80
 80090c8:	d020      	beq.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b40      	cmp	r3, #64	@ 0x40
 80090ce:	d01d      	beq.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d116      	bne.n	800910c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f856 	bl	80091a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2208      	movs	r2, #8
 80090fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e00f      	b.n	800912c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4013      	ands	r3, r2
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	429a      	cmp	r2, r3
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	429a      	cmp	r2, r3
 8009128:	d0b4      	beq.n	8009094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	88fa      	ldrh	r2, [r7, #6]
 800914c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2222      	movs	r2, #34	@ 0x22
 800915e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009178:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0201 	orr.w	r2, r2, #1
 8009188:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0220 	orr.w	r2, r2, #32
 8009198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr

080091a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b095      	sub	sp, #84	@ 0x54
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	330c      	adds	r3, #12
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	330c      	adds	r3, #12
 80091cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e5      	bne.n	80091ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3314      	adds	r3, #20
 80091e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3314      	adds	r3, #20
 8009200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e5      	bne.n	80091e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921a:	2b01      	cmp	r3, #1
 800921c:	d119      	bne.n	8009252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	60bb      	str	r3, [r7, #8]
   return(result);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f023 0310 	bic.w	r3, r3, #16
 8009234:	647b      	str	r3, [r7, #68]	@ 0x44
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	330c      	adds	r3, #12
 800923c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800923e:	61ba      	str	r2, [r7, #24]
 8009240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6979      	ldr	r1, [r7, #20]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	613b      	str	r3, [r7, #16]
   return(result);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e5      	bne.n	800921e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009260:	bf00      	nop
 8009262:	3754      	adds	r7, #84	@ 0x54
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr

0800926a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff fee8 	bl	800905a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b21      	cmp	r3, #33	@ 0x21
 80092a4:	d13e      	bne.n	8009324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ae:	d114      	bne.n	80092da <UART_Transmit_IT+0x48>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d110      	bne.n	80092da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	1c9a      	adds	r2, r3, #2
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	621a      	str	r2, [r3, #32]
 80092d8:	e008      	b.n	80092ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	1c59      	adds	r1, r3, #1
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6211      	str	r1, [r2, #32]
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4619      	mov	r1, r3
 80092fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10f      	bne.n	8009320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800930e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800931e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009346:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fe79 	bl	8009048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	@ 0x30
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b22      	cmp	r3, #34	@ 0x22
 8009372:	f040 80ae 	bne.w	80094d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800937e:	d117      	bne.n	80093b0 <UART_Receive_IT+0x50>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d113      	bne.n	80093b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	b29a      	uxth	r2, r3
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	1c9a      	adds	r2, r3, #2
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80093ae:	e026      	b.n	80093fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093c2:	d007      	beq.n	80093d4 <UART_Receive_IT+0x74>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <UART_Receive_IT+0x82>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	e008      	b.n	80093f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29b      	uxth	r3, r3
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	4619      	mov	r1, r3
 800940c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800940e:	2b00      	cmp	r3, #0
 8009410:	d15d      	bne.n	80094ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0220 	bic.w	r2, r2, #32
 8009420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695a      	ldr	r2, [r3, #20]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0201 	bic.w	r2, r2, #1
 8009440:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009454:	2b01      	cmp	r3, #1
 8009456:	d135      	bne.n	80094c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	330c      	adds	r3, #12
 8009464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	613b      	str	r3, [r7, #16]
   return(result);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f023 0310 	bic.w	r3, r3, #16
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947e:	623a      	str	r2, [r7, #32]
 8009480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	69f9      	ldr	r1, [r7, #28]
 8009484:	6a3a      	ldr	r2, [r7, #32]
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	61bb      	str	r3, [r7, #24]
   return(result);
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e5      	bne.n	800945e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0310 	and.w	r3, r3, #16
 800949c:	2b10      	cmp	r3, #16
 800949e:	d10a      	bne.n	80094b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff fdd5 	bl	800906c <HAL_UARTEx_RxEventCallback>
 80094c2:	e002      	b.n	80094ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7f8 fce5 	bl	8001e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e002      	b.n	80094d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e000      	b.n	80094d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80094d2:	2302      	movs	r3, #2
  }
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3730      	adds	r7, #48	@ 0x30
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	4313      	orrs	r3, r2
 800950a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009516:	f023 030c 	bic.w	r3, r3, #12
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	430b      	orrs	r3, r1
 8009522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a2c      	ldr	r2, [pc, #176]	@ (80095f0 <UART_SetConfig+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d103      	bne.n	800954c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009544:	f7fd ffac 	bl	80074a0 <HAL_RCC_GetPCLK2Freq>
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	e002      	b.n	8009552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800954c:	f7fd ff94 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8009550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009a      	lsls	r2, r3, #2
 800955c:	441a      	add	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	4a22      	ldr	r2, [pc, #136]	@ (80095f4 <UART_SetConfig+0x118>)
 800956a:	fba2 2303 	umull	r2, r3, r2, r3
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	0119      	lsls	r1, r3, #4
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009a      	lsls	r2, r3, #2
 800957c:	441a      	add	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	fbb2 f2f3 	udiv	r2, r2, r3
 8009588:	4b1a      	ldr	r3, [pc, #104]	@ (80095f4 <UART_SetConfig+0x118>)
 800958a:	fba3 0302 	umull	r0, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	2064      	movs	r0, #100	@ 0x64
 8009592:	fb00 f303 	mul.w	r3, r0, r3
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	3332      	adds	r3, #50	@ 0x32
 800959c:	4a15      	ldr	r2, [pc, #84]	@ (80095f4 <UART_SetConfig+0x118>)
 800959e:	fba2 2303 	umull	r2, r3, r2, r3
 80095a2:	095b      	lsrs	r3, r3, #5
 80095a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095a8:	4419      	add	r1, r3
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009a      	lsls	r2, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <UART_SetConfig+0x118>)
 80095c2:	fba3 0302 	umull	r0, r3, r3, r2
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	2064      	movs	r0, #100	@ 0x64
 80095ca:	fb00 f303 	mul.w	r3, r0, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	3332      	adds	r3, #50	@ 0x32
 80095d4:	4a07      	ldr	r2, [pc, #28]	@ (80095f4 <UART_SetConfig+0x118>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	440a      	add	r2, r1
 80095e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40013800 	.word	0x40013800
 80095f4:	51eb851f 	.word	0x51eb851f

080095f8 <atoi>:
 80095f8:	220a      	movs	r2, #10
 80095fa:	2100      	movs	r1, #0
 80095fc:	f000 b87a 	b.w	80096f4 <strtol>

08009600 <_strtol_l.isra.0>:
 8009600:	2b24      	cmp	r3, #36	@ 0x24
 8009602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009606:	4686      	mov	lr, r0
 8009608:	4690      	mov	r8, r2
 800960a:	d801      	bhi.n	8009610 <_strtol_l.isra.0+0x10>
 800960c:	2b01      	cmp	r3, #1
 800960e:	d106      	bne.n	800961e <_strtol_l.isra.0+0x1e>
 8009610:	f001 f814 	bl	800a63c <__errno>
 8009614:	2316      	movs	r3, #22
 8009616:	6003      	str	r3, [r0, #0]
 8009618:	2000      	movs	r0, #0
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	460d      	mov	r5, r1
 8009620:	4833      	ldr	r0, [pc, #204]	@ (80096f0 <_strtol_l.isra.0+0xf0>)
 8009622:	462a      	mov	r2, r5
 8009624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009628:	5d06      	ldrb	r6, [r0, r4]
 800962a:	f016 0608 	ands.w	r6, r6, #8
 800962e:	d1f8      	bne.n	8009622 <_strtol_l.isra.0+0x22>
 8009630:	2c2d      	cmp	r4, #45	@ 0x2d
 8009632:	d110      	bne.n	8009656 <_strtol_l.isra.0+0x56>
 8009634:	2601      	movs	r6, #1
 8009636:	782c      	ldrb	r4, [r5, #0]
 8009638:	1c95      	adds	r5, r2, #2
 800963a:	f033 0210 	bics.w	r2, r3, #16
 800963e:	d115      	bne.n	800966c <_strtol_l.isra.0+0x6c>
 8009640:	2c30      	cmp	r4, #48	@ 0x30
 8009642:	d10d      	bne.n	8009660 <_strtol_l.isra.0+0x60>
 8009644:	782a      	ldrb	r2, [r5, #0]
 8009646:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800964a:	2a58      	cmp	r2, #88	@ 0x58
 800964c:	d108      	bne.n	8009660 <_strtol_l.isra.0+0x60>
 800964e:	786c      	ldrb	r4, [r5, #1]
 8009650:	3502      	adds	r5, #2
 8009652:	2310      	movs	r3, #16
 8009654:	e00a      	b.n	800966c <_strtol_l.isra.0+0x6c>
 8009656:	2c2b      	cmp	r4, #43	@ 0x2b
 8009658:	bf04      	itt	eq
 800965a:	782c      	ldrbeq	r4, [r5, #0]
 800965c:	1c95      	addeq	r5, r2, #2
 800965e:	e7ec      	b.n	800963a <_strtol_l.isra.0+0x3a>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f6      	bne.n	8009652 <_strtol_l.isra.0+0x52>
 8009664:	2c30      	cmp	r4, #48	@ 0x30
 8009666:	bf14      	ite	ne
 8009668:	230a      	movne	r3, #10
 800966a:	2308      	moveq	r3, #8
 800966c:	2200      	movs	r2, #0
 800966e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009672:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009676:	fbbc f9f3 	udiv	r9, ip, r3
 800967a:	4610      	mov	r0, r2
 800967c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009680:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009684:	2f09      	cmp	r7, #9
 8009686:	d80f      	bhi.n	80096a8 <_strtol_l.isra.0+0xa8>
 8009688:	463c      	mov	r4, r7
 800968a:	42a3      	cmp	r3, r4
 800968c:	dd1b      	ble.n	80096c6 <_strtol_l.isra.0+0xc6>
 800968e:	1c57      	adds	r7, r2, #1
 8009690:	d007      	beq.n	80096a2 <_strtol_l.isra.0+0xa2>
 8009692:	4581      	cmp	r9, r0
 8009694:	d314      	bcc.n	80096c0 <_strtol_l.isra.0+0xc0>
 8009696:	d101      	bne.n	800969c <_strtol_l.isra.0+0x9c>
 8009698:	45a2      	cmp	sl, r4
 800969a:	db11      	blt.n	80096c0 <_strtol_l.isra.0+0xc0>
 800969c:	2201      	movs	r2, #1
 800969e:	fb00 4003 	mla	r0, r0, r3, r4
 80096a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096a6:	e7eb      	b.n	8009680 <_strtol_l.isra.0+0x80>
 80096a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096ac:	2f19      	cmp	r7, #25
 80096ae:	d801      	bhi.n	80096b4 <_strtol_l.isra.0+0xb4>
 80096b0:	3c37      	subs	r4, #55	@ 0x37
 80096b2:	e7ea      	b.n	800968a <_strtol_l.isra.0+0x8a>
 80096b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096b8:	2f19      	cmp	r7, #25
 80096ba:	d804      	bhi.n	80096c6 <_strtol_l.isra.0+0xc6>
 80096bc:	3c57      	subs	r4, #87	@ 0x57
 80096be:	e7e4      	b.n	800968a <_strtol_l.isra.0+0x8a>
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	e7ed      	b.n	80096a2 <_strtol_l.isra.0+0xa2>
 80096c6:	1c53      	adds	r3, r2, #1
 80096c8:	d108      	bne.n	80096dc <_strtol_l.isra.0+0xdc>
 80096ca:	2322      	movs	r3, #34	@ 0x22
 80096cc:	4660      	mov	r0, ip
 80096ce:	f8ce 3000 	str.w	r3, [lr]
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	d0a0      	beq.n	800961a <_strtol_l.isra.0+0x1a>
 80096d8:	1e69      	subs	r1, r5, #1
 80096da:	e006      	b.n	80096ea <_strtol_l.isra.0+0xea>
 80096dc:	b106      	cbz	r6, 80096e0 <_strtol_l.isra.0+0xe0>
 80096de:	4240      	negs	r0, r0
 80096e0:	f1b8 0f00 	cmp.w	r8, #0
 80096e4:	d099      	beq.n	800961a <_strtol_l.isra.0+0x1a>
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	d1f6      	bne.n	80096d8 <_strtol_l.isra.0+0xd8>
 80096ea:	f8c8 1000 	str.w	r1, [r8]
 80096ee:	e794      	b.n	800961a <_strtol_l.isra.0+0x1a>
 80096f0:	0800cf17 	.word	0x0800cf17

080096f4 <strtol>:
 80096f4:	4613      	mov	r3, r2
 80096f6:	460a      	mov	r2, r1
 80096f8:	4601      	mov	r1, r0
 80096fa:	4802      	ldr	r0, [pc, #8]	@ (8009704 <strtol+0x10>)
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f7ff bf7f 	b.w	8009600 <_strtol_l.isra.0>
 8009702:	bf00      	nop
 8009704:	20000228 	.word	0x20000228

08009708 <_strtoul_l.isra.0>:
 8009708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800970c:	4686      	mov	lr, r0
 800970e:	460d      	mov	r5, r1
 8009710:	4e33      	ldr	r6, [pc, #204]	@ (80097e0 <_strtoul_l.isra.0+0xd8>)
 8009712:	4628      	mov	r0, r5
 8009714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009718:	5d37      	ldrb	r7, [r6, r4]
 800971a:	f017 0708 	ands.w	r7, r7, #8
 800971e:	d1f8      	bne.n	8009712 <_strtoul_l.isra.0+0xa>
 8009720:	2c2d      	cmp	r4, #45	@ 0x2d
 8009722:	d110      	bne.n	8009746 <_strtoul_l.isra.0+0x3e>
 8009724:	2701      	movs	r7, #1
 8009726:	782c      	ldrb	r4, [r5, #0]
 8009728:	1c85      	adds	r5, r0, #2
 800972a:	f033 0010 	bics.w	r0, r3, #16
 800972e:	d115      	bne.n	800975c <_strtoul_l.isra.0+0x54>
 8009730:	2c30      	cmp	r4, #48	@ 0x30
 8009732:	d10d      	bne.n	8009750 <_strtoul_l.isra.0+0x48>
 8009734:	7828      	ldrb	r0, [r5, #0]
 8009736:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800973a:	2858      	cmp	r0, #88	@ 0x58
 800973c:	d108      	bne.n	8009750 <_strtoul_l.isra.0+0x48>
 800973e:	786c      	ldrb	r4, [r5, #1]
 8009740:	3502      	adds	r5, #2
 8009742:	2310      	movs	r3, #16
 8009744:	e00a      	b.n	800975c <_strtoul_l.isra.0+0x54>
 8009746:	2c2b      	cmp	r4, #43	@ 0x2b
 8009748:	bf04      	itt	eq
 800974a:	782c      	ldrbeq	r4, [r5, #0]
 800974c:	1c85      	addeq	r5, r0, #2
 800974e:	e7ec      	b.n	800972a <_strtoul_l.isra.0+0x22>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1f6      	bne.n	8009742 <_strtoul_l.isra.0+0x3a>
 8009754:	2c30      	cmp	r4, #48	@ 0x30
 8009756:	bf14      	ite	ne
 8009758:	230a      	movne	r3, #10
 800975a:	2308      	moveq	r3, #8
 800975c:	f04f 38ff 	mov.w	r8, #4294967295
 8009760:	fbb8 f8f3 	udiv	r8, r8, r3
 8009764:	2600      	movs	r6, #0
 8009766:	fb03 f908 	mul.w	r9, r3, r8
 800976a:	4630      	mov	r0, r6
 800976c:	ea6f 0909 	mvn.w	r9, r9
 8009770:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009774:	f1bc 0f09 	cmp.w	ip, #9
 8009778:	d810      	bhi.n	800979c <_strtoul_l.isra.0+0x94>
 800977a:	4664      	mov	r4, ip
 800977c:	42a3      	cmp	r3, r4
 800977e:	dd1e      	ble.n	80097be <_strtoul_l.isra.0+0xb6>
 8009780:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009784:	d007      	beq.n	8009796 <_strtoul_l.isra.0+0x8e>
 8009786:	4580      	cmp	r8, r0
 8009788:	d316      	bcc.n	80097b8 <_strtoul_l.isra.0+0xb0>
 800978a:	d101      	bne.n	8009790 <_strtoul_l.isra.0+0x88>
 800978c:	45a1      	cmp	r9, r4
 800978e:	db13      	blt.n	80097b8 <_strtoul_l.isra.0+0xb0>
 8009790:	2601      	movs	r6, #1
 8009792:	fb00 4003 	mla	r0, r0, r3, r4
 8009796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800979a:	e7e9      	b.n	8009770 <_strtoul_l.isra.0+0x68>
 800979c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80097a0:	f1bc 0f19 	cmp.w	ip, #25
 80097a4:	d801      	bhi.n	80097aa <_strtoul_l.isra.0+0xa2>
 80097a6:	3c37      	subs	r4, #55	@ 0x37
 80097a8:	e7e8      	b.n	800977c <_strtoul_l.isra.0+0x74>
 80097aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80097ae:	f1bc 0f19 	cmp.w	ip, #25
 80097b2:	d804      	bhi.n	80097be <_strtoul_l.isra.0+0xb6>
 80097b4:	3c57      	subs	r4, #87	@ 0x57
 80097b6:	e7e1      	b.n	800977c <_strtoul_l.isra.0+0x74>
 80097b8:	f04f 36ff 	mov.w	r6, #4294967295
 80097bc:	e7eb      	b.n	8009796 <_strtoul_l.isra.0+0x8e>
 80097be:	1c73      	adds	r3, r6, #1
 80097c0:	d106      	bne.n	80097d0 <_strtoul_l.isra.0+0xc8>
 80097c2:	2322      	movs	r3, #34	@ 0x22
 80097c4:	4630      	mov	r0, r6
 80097c6:	f8ce 3000 	str.w	r3, [lr]
 80097ca:	b932      	cbnz	r2, 80097da <_strtoul_l.isra.0+0xd2>
 80097cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d0:	b107      	cbz	r7, 80097d4 <_strtoul_l.isra.0+0xcc>
 80097d2:	4240      	negs	r0, r0
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d0f9      	beq.n	80097cc <_strtoul_l.isra.0+0xc4>
 80097d8:	b106      	cbz	r6, 80097dc <_strtoul_l.isra.0+0xd4>
 80097da:	1e69      	subs	r1, r5, #1
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	e7f5      	b.n	80097cc <_strtoul_l.isra.0+0xc4>
 80097e0:	0800cf17 	.word	0x0800cf17

080097e4 <strtoul>:
 80097e4:	4613      	mov	r3, r2
 80097e6:	460a      	mov	r2, r1
 80097e8:	4601      	mov	r1, r0
 80097ea:	4802      	ldr	r0, [pc, #8]	@ (80097f4 <strtoul+0x10>)
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f7ff bf8b 	b.w	8009708 <_strtoul_l.isra.0>
 80097f2:	bf00      	nop
 80097f4:	20000228 	.word	0x20000228

080097f8 <__cvt>:
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fe:	461d      	mov	r5, r3
 8009800:	bfbb      	ittet	lt
 8009802:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009806:	461d      	movlt	r5, r3
 8009808:	2300      	movge	r3, #0
 800980a:	232d      	movlt	r3, #45	@ 0x2d
 800980c:	b088      	sub	sp, #32
 800980e:	4614      	mov	r4, r2
 8009810:	bfb8      	it	lt
 8009812:	4614      	movlt	r4, r2
 8009814:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009816:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009818:	7013      	strb	r3, [r2, #0]
 800981a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800981c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009820:	f023 0820 	bic.w	r8, r3, #32
 8009824:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009828:	d005      	beq.n	8009836 <__cvt+0x3e>
 800982a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800982e:	d100      	bne.n	8009832 <__cvt+0x3a>
 8009830:	3601      	adds	r6, #1
 8009832:	2302      	movs	r3, #2
 8009834:	e000      	b.n	8009838 <__cvt+0x40>
 8009836:	2303      	movs	r3, #3
 8009838:	aa07      	add	r2, sp, #28
 800983a:	9204      	str	r2, [sp, #16]
 800983c:	aa06      	add	r2, sp, #24
 800983e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009842:	e9cd 3600 	strd	r3, r6, [sp]
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	f000 ffd9 	bl	800a800 <_dtoa_r>
 800984e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009852:	4607      	mov	r7, r0
 8009854:	d119      	bne.n	800988a <__cvt+0x92>
 8009856:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009858:	07db      	lsls	r3, r3, #31
 800985a:	d50e      	bpl.n	800987a <__cvt+0x82>
 800985c:	eb00 0906 	add.w	r9, r0, r6
 8009860:	2200      	movs	r2, #0
 8009862:	2300      	movs	r3, #0
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f7 f8a8 	bl	80009bc <__aeabi_dcmpeq>
 800986c:	b108      	cbz	r0, 8009872 <__cvt+0x7a>
 800986e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009872:	2230      	movs	r2, #48	@ 0x30
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	454b      	cmp	r3, r9
 8009878:	d31e      	bcc.n	80098b8 <__cvt+0xc0>
 800987a:	4638      	mov	r0, r7
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009880:	1bdb      	subs	r3, r3, r7
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	b008      	add	sp, #32
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800988e:	eb00 0906 	add.w	r9, r0, r6
 8009892:	d1e5      	bne.n	8009860 <__cvt+0x68>
 8009894:	7803      	ldrb	r3, [r0, #0]
 8009896:	2b30      	cmp	r3, #48	@ 0x30
 8009898:	d10a      	bne.n	80098b0 <__cvt+0xb8>
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f88b 	bl	80009bc <__aeabi_dcmpeq>
 80098a6:	b918      	cbnz	r0, 80098b0 <__cvt+0xb8>
 80098a8:	f1c6 0601 	rsb	r6, r6, #1
 80098ac:	f8ca 6000 	str.w	r6, [sl]
 80098b0:	f8da 3000 	ldr.w	r3, [sl]
 80098b4:	4499      	add	r9, r3
 80098b6:	e7d3      	b.n	8009860 <__cvt+0x68>
 80098b8:	1c59      	adds	r1, r3, #1
 80098ba:	9107      	str	r1, [sp, #28]
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e7d9      	b.n	8009874 <__cvt+0x7c>

080098c0 <__exponent>:
 80098c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c2:	2900      	cmp	r1, #0
 80098c4:	bfb6      	itet	lt
 80098c6:	232d      	movlt	r3, #45	@ 0x2d
 80098c8:	232b      	movge	r3, #43	@ 0x2b
 80098ca:	4249      	neglt	r1, r1
 80098cc:	2909      	cmp	r1, #9
 80098ce:	7002      	strb	r2, [r0, #0]
 80098d0:	7043      	strb	r3, [r0, #1]
 80098d2:	dd29      	ble.n	8009928 <__exponent+0x68>
 80098d4:	f10d 0307 	add.w	r3, sp, #7
 80098d8:	461d      	mov	r5, r3
 80098da:	270a      	movs	r7, #10
 80098dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80098e0:	461a      	mov	r2, r3
 80098e2:	fb07 1416 	mls	r4, r7, r6, r1
 80098e6:	3430      	adds	r4, #48	@ 0x30
 80098e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098ec:	460c      	mov	r4, r1
 80098ee:	2c63      	cmp	r4, #99	@ 0x63
 80098f0:	4631      	mov	r1, r6
 80098f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f6:	dcf1      	bgt.n	80098dc <__exponent+0x1c>
 80098f8:	3130      	adds	r1, #48	@ 0x30
 80098fa:	1e94      	subs	r4, r2, #2
 80098fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009900:	4623      	mov	r3, r4
 8009902:	1c41      	adds	r1, r0, #1
 8009904:	42ab      	cmp	r3, r5
 8009906:	d30a      	bcc.n	800991e <__exponent+0x5e>
 8009908:	f10d 0309 	add.w	r3, sp, #9
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	42ac      	cmp	r4, r5
 8009910:	bf88      	it	hi
 8009912:	2300      	movhi	r3, #0
 8009914:	3302      	adds	r3, #2
 8009916:	4403      	add	r3, r0
 8009918:	1a18      	subs	r0, r3, r0
 800991a:	b003      	add	sp, #12
 800991c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009922:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009926:	e7ed      	b.n	8009904 <__exponent+0x44>
 8009928:	2330      	movs	r3, #48	@ 0x30
 800992a:	3130      	adds	r1, #48	@ 0x30
 800992c:	7083      	strb	r3, [r0, #2]
 800992e:	70c1      	strb	r1, [r0, #3]
 8009930:	1d03      	adds	r3, r0, #4
 8009932:	e7f1      	b.n	8009918 <__exponent+0x58>

08009934 <_printf_float>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	b091      	sub	sp, #68	@ 0x44
 800993a:	460c      	mov	r4, r1
 800993c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009940:	4616      	mov	r6, r2
 8009942:	461f      	mov	r7, r3
 8009944:	4605      	mov	r5, r0
 8009946:	f000 fe2f 	bl	800a5a8 <_localeconv_r>
 800994a:	6803      	ldr	r3, [r0, #0]
 800994c:	4618      	mov	r0, r3
 800994e:	9308      	str	r3, [sp, #32]
 8009950:	f7f6 fc08 	bl	8000164 <strlen>
 8009954:	2300      	movs	r3, #0
 8009956:	930e      	str	r3, [sp, #56]	@ 0x38
 8009958:	f8d8 3000 	ldr.w	r3, [r8]
 800995c:	9009      	str	r0, [sp, #36]	@ 0x24
 800995e:	3307      	adds	r3, #7
 8009960:	f023 0307 	bic.w	r3, r3, #7
 8009964:	f103 0208 	add.w	r2, r3, #8
 8009968:	f894 a018 	ldrb.w	sl, [r4, #24]
 800996c:	f8d4 b000 	ldr.w	fp, [r4]
 8009970:	f8c8 2000 	str.w	r2, [r8]
 8009974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009978:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800997c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800997e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800998a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800998e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c00 <_printf_float+0x2cc>)
 8009990:	f7f7 f846 	bl	8000a20 <__aeabi_dcmpun>
 8009994:	bb70      	cbnz	r0, 80099f4 <_printf_float+0xc0>
 8009996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800999a:	f04f 32ff 	mov.w	r2, #4294967295
 800999e:	4b98      	ldr	r3, [pc, #608]	@ (8009c00 <_printf_float+0x2cc>)
 80099a0:	f7f7 f820 	bl	80009e4 <__aeabi_dcmple>
 80099a4:	bb30      	cbnz	r0, 80099f4 <_printf_float+0xc0>
 80099a6:	2200      	movs	r2, #0
 80099a8:	2300      	movs	r3, #0
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f7 f80f 	bl	80009d0 <__aeabi_dcmplt>
 80099b2:	b110      	cbz	r0, 80099ba <_printf_float+0x86>
 80099b4:	232d      	movs	r3, #45	@ 0x2d
 80099b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ba:	4a92      	ldr	r2, [pc, #584]	@ (8009c04 <_printf_float+0x2d0>)
 80099bc:	4b92      	ldr	r3, [pc, #584]	@ (8009c08 <_printf_float+0x2d4>)
 80099be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099c2:	bf8c      	ite	hi
 80099c4:	4690      	movhi	r8, r2
 80099c6:	4698      	movls	r8, r3
 80099c8:	2303      	movs	r3, #3
 80099ca:	f04f 0900 	mov.w	r9, #0
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	f02b 0304 	bic.w	r3, fp, #4
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	4633      	mov	r3, r6
 80099d8:	4621      	mov	r1, r4
 80099da:	4628      	mov	r0, r5
 80099dc:	9700      	str	r7, [sp, #0]
 80099de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80099e0:	f000 f9d4 	bl	8009d8c <_printf_common>
 80099e4:	3001      	adds	r0, #1
 80099e6:	f040 8090 	bne.w	8009b0a <_printf_float+0x1d6>
 80099ea:	f04f 30ff 	mov.w	r0, #4294967295
 80099ee:	b011      	add	sp, #68	@ 0x44
 80099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f4:	4642      	mov	r2, r8
 80099f6:	464b      	mov	r3, r9
 80099f8:	4640      	mov	r0, r8
 80099fa:	4649      	mov	r1, r9
 80099fc:	f7f7 f810 	bl	8000a20 <__aeabi_dcmpun>
 8009a00:	b148      	cbz	r0, 8009a16 <_printf_float+0xe2>
 8009a02:	464b      	mov	r3, r9
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfb8      	it	lt
 8009a08:	232d      	movlt	r3, #45	@ 0x2d
 8009a0a:	4a80      	ldr	r2, [pc, #512]	@ (8009c0c <_printf_float+0x2d8>)
 8009a0c:	bfb8      	it	lt
 8009a0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a12:	4b7f      	ldr	r3, [pc, #508]	@ (8009c10 <_printf_float+0x2dc>)
 8009a14:	e7d3      	b.n	80099be <_printf_float+0x8a>
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	d13f      	bne.n	8009aa0 <_printf_float+0x16c>
 8009a20:	2306      	movs	r3, #6
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	9206      	str	r2, [sp, #24]
 8009a2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009a34:	aa0d      	add	r2, sp, #52	@ 0x34
 8009a36:	9203      	str	r2, [sp, #12]
 8009a38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009a3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	4642      	mov	r2, r8
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	4628      	mov	r0, r5
 8009a48:	464b      	mov	r3, r9
 8009a4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009a4c:	f7ff fed4 	bl	80097f8 <__cvt>
 8009a50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a52:	4680      	mov	r8, r0
 8009a54:	2947      	cmp	r1, #71	@ 0x47
 8009a56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009a58:	d128      	bne.n	8009aac <_printf_float+0x178>
 8009a5a:	1cc8      	adds	r0, r1, #3
 8009a5c:	db02      	blt.n	8009a64 <_printf_float+0x130>
 8009a5e:	6863      	ldr	r3, [r4, #4]
 8009a60:	4299      	cmp	r1, r3
 8009a62:	dd40      	ble.n	8009ae6 <_printf_float+0x1b2>
 8009a64:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a68:	fa5f fa8a 	uxtb.w	sl, sl
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	3901      	subs	r1, #1
 8009a70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a74:	910d      	str	r1, [sp, #52]	@ 0x34
 8009a76:	f7ff ff23 	bl	80098c0 <__exponent>
 8009a7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	1813      	adds	r3, r2, r0
 8009a80:	2a01      	cmp	r2, #1
 8009a82:	6123      	str	r3, [r4, #16]
 8009a84:	dc02      	bgt.n	8009a8c <_printf_float+0x158>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	07d2      	lsls	r2, r2, #31
 8009a8a:	d501      	bpl.n	8009a90 <_printf_float+0x15c>
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	6123      	str	r3, [r4, #16]
 8009a90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d09e      	beq.n	80099d6 <_printf_float+0xa2>
 8009a98:	232d      	movs	r3, #45	@ 0x2d
 8009a9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a9e:	e79a      	b.n	80099d6 <_printf_float+0xa2>
 8009aa0:	2947      	cmp	r1, #71	@ 0x47
 8009aa2:	d1bf      	bne.n	8009a24 <_printf_float+0xf0>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1bd      	bne.n	8009a24 <_printf_float+0xf0>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e7ba      	b.n	8009a22 <_printf_float+0xee>
 8009aac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ab0:	d9dc      	bls.n	8009a6c <_printf_float+0x138>
 8009ab2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ab6:	d118      	bne.n	8009aea <_printf_float+0x1b6>
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	dd0b      	ble.n	8009ad6 <_printf_float+0x1a2>
 8009abe:	6121      	str	r1, [r4, #16]
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_printf_float+0x194>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	07d0      	lsls	r0, r2, #31
 8009ac6:	d502      	bpl.n	8009ace <_printf_float+0x19a>
 8009ac8:	3301      	adds	r3, #1
 8009aca:	440b      	add	r3, r1
 8009acc:	6123      	str	r3, [r4, #16]
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ad4:	e7dc      	b.n	8009a90 <_printf_float+0x15c>
 8009ad6:	b913      	cbnz	r3, 8009ade <_printf_float+0x1aa>
 8009ad8:	6822      	ldr	r2, [r4, #0]
 8009ada:	07d2      	lsls	r2, r2, #31
 8009adc:	d501      	bpl.n	8009ae2 <_printf_float+0x1ae>
 8009ade:	3302      	adds	r3, #2
 8009ae0:	e7f4      	b.n	8009acc <_printf_float+0x198>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e7f2      	b.n	8009acc <_printf_float+0x198>
 8009ae6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aec:	4299      	cmp	r1, r3
 8009aee:	db05      	blt.n	8009afc <_printf_float+0x1c8>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	6121      	str	r1, [r4, #16]
 8009af4:	07d8      	lsls	r0, r3, #31
 8009af6:	d5ea      	bpl.n	8009ace <_printf_float+0x19a>
 8009af8:	1c4b      	adds	r3, r1, #1
 8009afa:	e7e7      	b.n	8009acc <_printf_float+0x198>
 8009afc:	2900      	cmp	r1, #0
 8009afe:	bfcc      	ite	gt
 8009b00:	2201      	movgt	r2, #1
 8009b02:	f1c1 0202 	rsble	r2, r1, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	e7e0      	b.n	8009acc <_printf_float+0x198>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	055a      	lsls	r2, r3, #21
 8009b0e:	d407      	bmi.n	8009b20 <_printf_float+0x1ec>
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	4642      	mov	r2, r8
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d12b      	bne.n	8009b76 <_printf_float+0x242>
 8009b1e:	e764      	b.n	80099ea <_printf_float+0xb6>
 8009b20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b24:	f240 80dc 	bls.w	8009ce0 <_printf_float+0x3ac>
 8009b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f7f6 ff44 	bl	80009bc <__aeabi_dcmpeq>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d033      	beq.n	8009ba0 <_printf_float+0x26c>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	4a35      	ldr	r2, [pc, #212]	@ (8009c14 <_printf_float+0x2e0>)
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	f43f af51 	beq.w	80099ea <_printf_float+0xb6>
 8009b48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009b4c:	4543      	cmp	r3, r8
 8009b4e:	db02      	blt.n	8009b56 <_printf_float+0x222>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	07d8      	lsls	r0, r3, #31
 8009b54:	d50f      	bpl.n	8009b76 <_printf_float+0x242>
 8009b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	f43f af42 	beq.w	80099ea <_printf_float+0xb6>
 8009b66:	f04f 0900 	mov.w	r9, #0
 8009b6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b6e:	f104 0a1a 	add.w	sl, r4, #26
 8009b72:	45c8      	cmp	r8, r9
 8009b74:	dc09      	bgt.n	8009b8a <_printf_float+0x256>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	079b      	lsls	r3, r3, #30
 8009b7a:	f100 8102 	bmi.w	8009d82 <_printf_float+0x44e>
 8009b7e:	68e0      	ldr	r0, [r4, #12]
 8009b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b82:	4298      	cmp	r0, r3
 8009b84:	bfb8      	it	lt
 8009b86:	4618      	movlt	r0, r3
 8009b88:	e731      	b.n	80099ee <_printf_float+0xba>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4652      	mov	r2, sl
 8009b8e:	4631      	mov	r1, r6
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b8      	blx	r7
 8009b94:	3001      	adds	r0, #1
 8009b96:	f43f af28 	beq.w	80099ea <_printf_float+0xb6>
 8009b9a:	f109 0901 	add.w	r9, r9, #1
 8009b9e:	e7e8      	b.n	8009b72 <_printf_float+0x23e>
 8009ba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dc38      	bgt.n	8009c18 <_printf_float+0x2e4>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	4a19      	ldr	r2, [pc, #100]	@ (8009c14 <_printf_float+0x2e0>)
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	f43f af1a 	beq.w	80099ea <_printf_float+0xb6>
 8009bb6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009bba:	ea59 0303 	orrs.w	r3, r9, r3
 8009bbe:	d102      	bne.n	8009bc6 <_printf_float+0x292>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	07d9      	lsls	r1, r3, #31
 8009bc4:	d5d7      	bpl.n	8009b76 <_printf_float+0x242>
 8009bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b8      	blx	r7
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f43f af0a 	beq.w	80099ea <_printf_float+0xb6>
 8009bd6:	f04f 0a00 	mov.w	sl, #0
 8009bda:	f104 0b1a 	add.w	fp, r4, #26
 8009bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009be0:	425b      	negs	r3, r3
 8009be2:	4553      	cmp	r3, sl
 8009be4:	dc01      	bgt.n	8009bea <_printf_float+0x2b6>
 8009be6:	464b      	mov	r3, r9
 8009be8:	e793      	b.n	8009b12 <_printf_float+0x1de>
 8009bea:	2301      	movs	r3, #1
 8009bec:	465a      	mov	r2, fp
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f aef8 	beq.w	80099ea <_printf_float+0xb6>
 8009bfa:	f10a 0a01 	add.w	sl, sl, #1
 8009bfe:	e7ee      	b.n	8009bde <_printf_float+0x2aa>
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	0800d01b 	.word	0x0800d01b
 8009c08:	0800d017 	.word	0x0800d017
 8009c0c:	0800d023 	.word	0x0800d023
 8009c10:	0800d01f 	.word	0x0800d01f
 8009c14:	0800d027 	.word	0x0800d027
 8009c18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009c1e:	4553      	cmp	r3, sl
 8009c20:	bfa8      	it	ge
 8009c22:	4653      	movge	r3, sl
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	4699      	mov	r9, r3
 8009c28:	dc36      	bgt.n	8009c98 <_printf_float+0x364>
 8009c2a:	f04f 0b00 	mov.w	fp, #0
 8009c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c32:	f104 021a 	add.w	r2, r4, #26
 8009c36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c3a:	eba3 0309 	sub.w	r3, r3, r9
 8009c3e:	455b      	cmp	r3, fp
 8009c40:	dc31      	bgt.n	8009ca6 <_printf_float+0x372>
 8009c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c44:	459a      	cmp	sl, r3
 8009c46:	dc3a      	bgt.n	8009cbe <_printf_float+0x38a>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d437      	bmi.n	8009cbe <_printf_float+0x38a>
 8009c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c50:	ebaa 0903 	sub.w	r9, sl, r3
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	ebaa 0303 	sub.w	r3, sl, r3
 8009c5a:	4599      	cmp	r9, r3
 8009c5c:	bfa8      	it	ge
 8009c5e:	4699      	movge	r9, r3
 8009c60:	f1b9 0f00 	cmp.w	r9, #0
 8009c64:	dc33      	bgt.n	8009cce <_printf_float+0x39a>
 8009c66:	f04f 0800 	mov.w	r8, #0
 8009c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c6e:	f104 0b1a 	add.w	fp, r4, #26
 8009c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c74:	ebaa 0303 	sub.w	r3, sl, r3
 8009c78:	eba3 0309 	sub.w	r3, r3, r9
 8009c7c:	4543      	cmp	r3, r8
 8009c7e:	f77f af7a 	ble.w	8009b76 <_printf_float+0x242>
 8009c82:	2301      	movs	r3, #1
 8009c84:	465a      	mov	r2, fp
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b8      	blx	r7
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	f43f aeac 	beq.w	80099ea <_printf_float+0xb6>
 8009c92:	f108 0801 	add.w	r8, r8, #1
 8009c96:	e7ec      	b.n	8009c72 <_printf_float+0x33e>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d1c2      	bne.n	8009c2a <_printf_float+0x2f6>
 8009ca4:	e6a1      	b.n	80099ea <_printf_float+0xb6>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4628      	mov	r0, r5
 8009cac:	920a      	str	r2, [sp, #40]	@ 0x28
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae9a 	beq.w	80099ea <_printf_float+0xb6>
 8009cb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cb8:	f10b 0b01 	add.w	fp, fp, #1
 8009cbc:	e7bb      	b.n	8009c36 <_printf_float+0x302>
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d1c0      	bne.n	8009c4e <_printf_float+0x31a>
 8009ccc:	e68d      	b.n	80099ea <_printf_float+0xb6>
 8009cce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	4442      	add	r2, r8
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	d1c3      	bne.n	8009c66 <_printf_float+0x332>
 8009cde:	e684      	b.n	80099ea <_printf_float+0xb6>
 8009ce0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009ce4:	f1ba 0f01 	cmp.w	sl, #1
 8009ce8:	dc01      	bgt.n	8009cee <_printf_float+0x3ba>
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d536      	bpl.n	8009d5c <_printf_float+0x428>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f43f ae76 	beq.w	80099ea <_printf_float+0xb6>
 8009cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae6e 	beq.w	80099ea <_printf_float+0xb6>
 8009d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1a:	f7f6 fe4f 	bl	80009bc <__aeabi_dcmpeq>
 8009d1e:	b9c0      	cbnz	r0, 8009d52 <_printf_float+0x41e>
 8009d20:	4653      	mov	r3, sl
 8009d22:	f108 0201 	add.w	r2, r8, #1
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d10c      	bne.n	8009d4a <_printf_float+0x416>
 8009d30:	e65b      	b.n	80099ea <_printf_float+0xb6>
 8009d32:	2301      	movs	r3, #1
 8009d34:	465a      	mov	r2, fp
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae54 	beq.w	80099ea <_printf_float+0xb6>
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	45d0      	cmp	r8, sl
 8009d48:	dbf3      	blt.n	8009d32 <_printf_float+0x3fe>
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d50:	e6e0      	b.n	8009b14 <_printf_float+0x1e0>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	f104 0b1a 	add.w	fp, r4, #26
 8009d5a:	e7f4      	b.n	8009d46 <_printf_float+0x412>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4642      	mov	r2, r8
 8009d60:	e7e1      	b.n	8009d26 <_printf_float+0x3f2>
 8009d62:	2301      	movs	r3, #1
 8009d64:	464a      	mov	r2, r9
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f ae3c 	beq.w	80099ea <_printf_float+0xb6>
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	dcf0      	bgt.n	8009d62 <_printf_float+0x42e>
 8009d80:	e6fd      	b.n	8009b7e <_printf_float+0x24a>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	f104 0919 	add.w	r9, r4, #25
 8009d8a:	e7f4      	b.n	8009d76 <_printf_float+0x442>

08009d8c <_printf_common>:
 8009d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d90:	4616      	mov	r6, r2
 8009d92:	4698      	mov	r8, r3
 8009d94:	688a      	ldr	r2, [r1, #8]
 8009d96:	690b      	ldr	r3, [r1, #16]
 8009d98:	4607      	mov	r7, r0
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	bfb8      	it	lt
 8009d9e:	4613      	movlt	r3, r2
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009da6:	460c      	mov	r4, r1
 8009da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009dac:	b10a      	cbz	r2, 8009db2 <_printf_common+0x26>
 8009dae:	3301      	adds	r3, #1
 8009db0:	6033      	str	r3, [r6, #0]
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	0699      	lsls	r1, r3, #26
 8009db6:	bf42      	ittt	mi
 8009db8:	6833      	ldrmi	r3, [r6, #0]
 8009dba:	3302      	addmi	r3, #2
 8009dbc:	6033      	strmi	r3, [r6, #0]
 8009dbe:	6825      	ldr	r5, [r4, #0]
 8009dc0:	f015 0506 	ands.w	r5, r5, #6
 8009dc4:	d106      	bne.n	8009dd4 <_printf_common+0x48>
 8009dc6:	f104 0a19 	add.w	sl, r4, #25
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	6832      	ldr	r2, [r6, #0]
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	dc2b      	bgt.n	8009e2c <_printf_common+0xa0>
 8009dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	3b00      	subs	r3, #0
 8009ddc:	bf18      	it	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	0692      	lsls	r2, r2, #26
 8009de2:	d430      	bmi.n	8009e46 <_printf_common+0xba>
 8009de4:	4641      	mov	r1, r8
 8009de6:	4638      	mov	r0, r7
 8009de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dec:	47c8      	blx	r9
 8009dee:	3001      	adds	r0, #1
 8009df0:	d023      	beq.n	8009e3a <_printf_common+0xae>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	6922      	ldr	r2, [r4, #16]
 8009df6:	f003 0306 	and.w	r3, r3, #6
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	bf14      	ite	ne
 8009dfe:	2500      	movne	r5, #0
 8009e00:	6833      	ldreq	r3, [r6, #0]
 8009e02:	f04f 0600 	mov.w	r6, #0
 8009e06:	bf08      	it	eq
 8009e08:	68e5      	ldreq	r5, [r4, #12]
 8009e0a:	f104 041a 	add.w	r4, r4, #26
 8009e0e:	bf08      	it	eq
 8009e10:	1aed      	subeq	r5, r5, r3
 8009e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e16:	bf08      	it	eq
 8009e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	bfc4      	itt	gt
 8009e20:	1a9b      	subgt	r3, r3, r2
 8009e22:	18ed      	addgt	r5, r5, r3
 8009e24:	42b5      	cmp	r5, r6
 8009e26:	d11a      	bne.n	8009e5e <_printf_common+0xd2>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e008      	b.n	8009e3e <_printf_common+0xb2>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	4652      	mov	r2, sl
 8009e30:	4641      	mov	r1, r8
 8009e32:	4638      	mov	r0, r7
 8009e34:	47c8      	blx	r9
 8009e36:	3001      	adds	r0, #1
 8009e38:	d103      	bne.n	8009e42 <_printf_common+0xb6>
 8009e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e42:	3501      	adds	r5, #1
 8009e44:	e7c1      	b.n	8009dca <_printf_common+0x3e>
 8009e46:	2030      	movs	r0, #48	@ 0x30
 8009e48:	18e1      	adds	r1, r4, r3
 8009e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e54:	4422      	add	r2, r4
 8009e56:	3302      	adds	r3, #2
 8009e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e5c:	e7c2      	b.n	8009de4 <_printf_common+0x58>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4622      	mov	r2, r4
 8009e62:	4641      	mov	r1, r8
 8009e64:	4638      	mov	r0, r7
 8009e66:	47c8      	blx	r9
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d0e6      	beq.n	8009e3a <_printf_common+0xae>
 8009e6c:	3601      	adds	r6, #1
 8009e6e:	e7d9      	b.n	8009e24 <_printf_common+0x98>

08009e70 <_printf_i>:
 8009e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	7e0f      	ldrb	r7, [r1, #24]
 8009e76:	4691      	mov	r9, r2
 8009e78:	2f78      	cmp	r7, #120	@ 0x78
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	469a      	mov	sl, r3
 8009e80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e86:	d807      	bhi.n	8009e98 <_printf_i+0x28>
 8009e88:	2f62      	cmp	r7, #98	@ 0x62
 8009e8a:	d80a      	bhi.n	8009ea2 <_printf_i+0x32>
 8009e8c:	2f00      	cmp	r7, #0
 8009e8e:	f000 80d1 	beq.w	800a034 <_printf_i+0x1c4>
 8009e92:	2f58      	cmp	r7, #88	@ 0x58
 8009e94:	f000 80b8 	beq.w	800a008 <_printf_i+0x198>
 8009e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ea0:	e03a      	b.n	8009f18 <_printf_i+0xa8>
 8009ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ea6:	2b15      	cmp	r3, #21
 8009ea8:	d8f6      	bhi.n	8009e98 <_printf_i+0x28>
 8009eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb0 <_printf_i+0x40>)
 8009eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb0:	08009f09 	.word	0x08009f09
 8009eb4:	08009f1d 	.word	0x08009f1d
 8009eb8:	08009e99 	.word	0x08009e99
 8009ebc:	08009e99 	.word	0x08009e99
 8009ec0:	08009e99 	.word	0x08009e99
 8009ec4:	08009e99 	.word	0x08009e99
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009e99 	.word	0x08009e99
 8009ed0:	08009e99 	.word	0x08009e99
 8009ed4:	08009e99 	.word	0x08009e99
 8009ed8:	08009e99 	.word	0x08009e99
 8009edc:	0800a01b 	.word	0x0800a01b
 8009ee0:	08009f47 	.word	0x08009f47
 8009ee4:	08009fd5 	.word	0x08009fd5
 8009ee8:	08009e99 	.word	0x08009e99
 8009eec:	08009e99 	.word	0x08009e99
 8009ef0:	0800a03d 	.word	0x0800a03d
 8009ef4:	08009e99 	.word	0x08009e99
 8009ef8:	08009f47 	.word	0x08009f47
 8009efc:	08009e99 	.word	0x08009e99
 8009f00:	08009e99 	.word	0x08009e99
 8009f04:	08009fdd 	.word	0x08009fdd
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6032      	str	r2, [r6, #0]
 8009f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e09c      	b.n	800a056 <_printf_i+0x1e6>
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	6031      	str	r1, [r6, #0]
 8009f24:	0606      	lsls	r6, r0, #24
 8009f26:	d501      	bpl.n	8009f2c <_printf_i+0xbc>
 8009f28:	681d      	ldr	r5, [r3, #0]
 8009f2a:	e003      	b.n	8009f34 <_printf_i+0xc4>
 8009f2c:	0645      	lsls	r5, r0, #25
 8009f2e:	d5fb      	bpl.n	8009f28 <_printf_i+0xb8>
 8009f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	da03      	bge.n	8009f40 <_printf_i+0xd0>
 8009f38:	232d      	movs	r3, #45	@ 0x2d
 8009f3a:	426d      	negs	r5, r5
 8009f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f40:	230a      	movs	r3, #10
 8009f42:	4858      	ldr	r0, [pc, #352]	@ (800a0a4 <_printf_i+0x234>)
 8009f44:	e011      	b.n	8009f6a <_printf_i+0xfa>
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	0608      	lsls	r0, r1, #24
 8009f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f50:	d402      	bmi.n	8009f58 <_printf_i+0xe8>
 8009f52:	0649      	lsls	r1, r1, #25
 8009f54:	bf48      	it	mi
 8009f56:	b2ad      	uxthmi	r5, r5
 8009f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f5a:	6033      	str	r3, [r6, #0]
 8009f5c:	bf14      	ite	ne
 8009f5e:	230a      	movne	r3, #10
 8009f60:	2308      	moveq	r3, #8
 8009f62:	4850      	ldr	r0, [pc, #320]	@ (800a0a4 <_printf_i+0x234>)
 8009f64:	2100      	movs	r1, #0
 8009f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f6a:	6866      	ldr	r6, [r4, #4]
 8009f6c:	2e00      	cmp	r6, #0
 8009f6e:	60a6      	str	r6, [r4, #8]
 8009f70:	db05      	blt.n	8009f7e <_printf_i+0x10e>
 8009f72:	6821      	ldr	r1, [r4, #0]
 8009f74:	432e      	orrs	r6, r5
 8009f76:	f021 0104 	bic.w	r1, r1, #4
 8009f7a:	6021      	str	r1, [r4, #0]
 8009f7c:	d04b      	beq.n	800a016 <_printf_i+0x1a6>
 8009f7e:	4616      	mov	r6, r2
 8009f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f84:	fb03 5711 	mls	r7, r3, r1, r5
 8009f88:	5dc7      	ldrb	r7, [r0, r7]
 8009f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f8e:	462f      	mov	r7, r5
 8009f90:	42bb      	cmp	r3, r7
 8009f92:	460d      	mov	r5, r1
 8009f94:	d9f4      	bls.n	8009f80 <_printf_i+0x110>
 8009f96:	2b08      	cmp	r3, #8
 8009f98:	d10b      	bne.n	8009fb2 <_printf_i+0x142>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	07df      	lsls	r7, r3, #31
 8009f9e:	d508      	bpl.n	8009fb2 <_printf_i+0x142>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	6861      	ldr	r1, [r4, #4]
 8009fa4:	4299      	cmp	r1, r3
 8009fa6:	bfde      	ittt	le
 8009fa8:	2330      	movle	r3, #48	@ 0x30
 8009faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fb2:	1b92      	subs	r2, r2, r6
 8009fb4:	6122      	str	r2, [r4, #16]
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f8cd a000 	str.w	sl, [sp]
 8009fc0:	aa03      	add	r2, sp, #12
 8009fc2:	f7ff fee3 	bl	8009d8c <_printf_common>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d14a      	bne.n	800a060 <_printf_i+0x1f0>
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	b004      	add	sp, #16
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	f043 0320 	orr.w	r3, r3, #32
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	2778      	movs	r7, #120	@ 0x78
 8009fde:	4832      	ldr	r0, [pc, #200]	@ (800a0a8 <_printf_i+0x238>)
 8009fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	6831      	ldr	r1, [r6, #0]
 8009fe8:	061f      	lsls	r7, r3, #24
 8009fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fee:	d402      	bmi.n	8009ff6 <_printf_i+0x186>
 8009ff0:	065f      	lsls	r7, r3, #25
 8009ff2:	bf48      	it	mi
 8009ff4:	b2ad      	uxthmi	r5, r5
 8009ff6:	6031      	str	r1, [r6, #0]
 8009ff8:	07d9      	lsls	r1, r3, #31
 8009ffa:	bf44      	itt	mi
 8009ffc:	f043 0320 	orrmi.w	r3, r3, #32
 800a000:	6023      	strmi	r3, [r4, #0]
 800a002:	b11d      	cbz	r5, 800a00c <_printf_i+0x19c>
 800a004:	2310      	movs	r3, #16
 800a006:	e7ad      	b.n	8009f64 <_printf_i+0xf4>
 800a008:	4826      	ldr	r0, [pc, #152]	@ (800a0a4 <_printf_i+0x234>)
 800a00a:	e7e9      	b.n	8009fe0 <_printf_i+0x170>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	f023 0320 	bic.w	r3, r3, #32
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	e7f6      	b.n	800a004 <_printf_i+0x194>
 800a016:	4616      	mov	r6, r2
 800a018:	e7bd      	b.n	8009f96 <_printf_i+0x126>
 800a01a:	6833      	ldr	r3, [r6, #0]
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	1d18      	adds	r0, r3, #4
 800a020:	6961      	ldr	r1, [r4, #20]
 800a022:	6030      	str	r0, [r6, #0]
 800a024:	062e      	lsls	r6, r5, #24
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	d501      	bpl.n	800a02e <_printf_i+0x1be>
 800a02a:	6019      	str	r1, [r3, #0]
 800a02c:	e002      	b.n	800a034 <_printf_i+0x1c4>
 800a02e:	0668      	lsls	r0, r5, #25
 800a030:	d5fb      	bpl.n	800a02a <_printf_i+0x1ba>
 800a032:	8019      	strh	r1, [r3, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	4616      	mov	r6, r2
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	e7bc      	b.n	8009fb6 <_printf_i+0x146>
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	2100      	movs	r1, #0
 800a040:	1d1a      	adds	r2, r3, #4
 800a042:	6032      	str	r2, [r6, #0]
 800a044:	681e      	ldr	r6, [r3, #0]
 800a046:	6862      	ldr	r2, [r4, #4]
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fb24 	bl	800a696 <memchr>
 800a04e:	b108      	cbz	r0, 800a054 <_printf_i+0x1e4>
 800a050:	1b80      	subs	r0, r0, r6
 800a052:	6060      	str	r0, [r4, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	2300      	movs	r3, #0
 800a05a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a05e:	e7aa      	b.n	8009fb6 <_printf_i+0x146>
 800a060:	4632      	mov	r2, r6
 800a062:	4649      	mov	r1, r9
 800a064:	4640      	mov	r0, r8
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	47d0      	blx	sl
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0ad      	beq.n	8009fca <_printf_i+0x15a>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	079b      	lsls	r3, r3, #30
 800a072:	d413      	bmi.n	800a09c <_printf_i+0x22c>
 800a074:	68e0      	ldr	r0, [r4, #12]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	4298      	cmp	r0, r3
 800a07a:	bfb8      	it	lt
 800a07c:	4618      	movlt	r0, r3
 800a07e:	e7a6      	b.n	8009fce <_printf_i+0x15e>
 800a080:	2301      	movs	r3, #1
 800a082:	4632      	mov	r2, r6
 800a084:	4649      	mov	r1, r9
 800a086:	4640      	mov	r0, r8
 800a088:	47d0      	blx	sl
 800a08a:	3001      	adds	r0, #1
 800a08c:	d09d      	beq.n	8009fca <_printf_i+0x15a>
 800a08e:	3501      	adds	r5, #1
 800a090:	68e3      	ldr	r3, [r4, #12]
 800a092:	9903      	ldr	r1, [sp, #12]
 800a094:	1a5b      	subs	r3, r3, r1
 800a096:	42ab      	cmp	r3, r5
 800a098:	dcf2      	bgt.n	800a080 <_printf_i+0x210>
 800a09a:	e7eb      	b.n	800a074 <_printf_i+0x204>
 800a09c:	2500      	movs	r5, #0
 800a09e:	f104 0619 	add.w	r6, r4, #25
 800a0a2:	e7f5      	b.n	800a090 <_printf_i+0x220>
 800a0a4:	0800d029 	.word	0x0800d029
 800a0a8:	0800d03a 	.word	0x0800d03a

0800a0ac <std>:
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ba:	6083      	str	r3, [r0, #8]
 800a0bc:	8181      	strh	r1, [r0, #12]
 800a0be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a0c0:	81c2      	strh	r2, [r0, #14]
 800a0c2:	6183      	str	r3, [r0, #24]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	2208      	movs	r2, #8
 800a0c8:	305c      	adds	r0, #92	@ 0x5c
 800a0ca:	f000 fa09 	bl	800a4e0 <memset>
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a104 <std+0x58>)
 800a0d0:	6224      	str	r4, [r4, #32]
 800a0d2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <std+0x5c>)
 800a0d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <std+0x60>)
 800a0da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <std+0x64>)
 800a0de:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a114 <std+0x68>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d006      	beq.n	800a0f4 <std+0x48>
 800a0e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0ea:	4294      	cmp	r4, r2
 800a0ec:	d002      	beq.n	800a0f4 <std+0x48>
 800a0ee:	33d0      	adds	r3, #208	@ 0xd0
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	d105      	bne.n	800a100 <std+0x54>
 800a0f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0fc:	f000 bac8 	b.w	800a690 <__retarget_lock_init_recursive>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	bf00      	nop
 800a104:	0800a331 	.word	0x0800a331
 800a108:	0800a353 	.word	0x0800a353
 800a10c:	0800a38b 	.word	0x0800a38b
 800a110:	0800a3af 	.word	0x0800a3af
 800a114:	200006a0 	.word	0x200006a0

0800a118 <stdio_exit_handler>:
 800a118:	4a02      	ldr	r2, [pc, #8]	@ (800a124 <stdio_exit_handler+0xc>)
 800a11a:	4903      	ldr	r1, [pc, #12]	@ (800a128 <stdio_exit_handler+0x10>)
 800a11c:	4803      	ldr	r0, [pc, #12]	@ (800a12c <stdio_exit_handler+0x14>)
 800a11e:	f000 b869 	b.w	800a1f4 <_fwalk_sglue>
 800a122:	bf00      	nop
 800a124:	2000021c 	.word	0x2000021c
 800a128:	0800c049 	.word	0x0800c049
 800a12c:	2000022c 	.word	0x2000022c

0800a130 <cleanup_stdio>:
 800a130:	6841      	ldr	r1, [r0, #4]
 800a132:	4b0c      	ldr	r3, [pc, #48]	@ (800a164 <cleanup_stdio+0x34>)
 800a134:	b510      	push	{r4, lr}
 800a136:	4299      	cmp	r1, r3
 800a138:	4604      	mov	r4, r0
 800a13a:	d001      	beq.n	800a140 <cleanup_stdio+0x10>
 800a13c:	f001 ff84 	bl	800c048 <_fflush_r>
 800a140:	68a1      	ldr	r1, [r4, #8]
 800a142:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <cleanup_stdio+0x38>)
 800a144:	4299      	cmp	r1, r3
 800a146:	d002      	beq.n	800a14e <cleanup_stdio+0x1e>
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 ff7d 	bl	800c048 <_fflush_r>
 800a14e:	68e1      	ldr	r1, [r4, #12]
 800a150:	4b06      	ldr	r3, [pc, #24]	@ (800a16c <cleanup_stdio+0x3c>)
 800a152:	4299      	cmp	r1, r3
 800a154:	d004      	beq.n	800a160 <cleanup_stdio+0x30>
 800a156:	4620      	mov	r0, r4
 800a158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15c:	f001 bf74 	b.w	800c048 <_fflush_r>
 800a160:	bd10      	pop	{r4, pc}
 800a162:	bf00      	nop
 800a164:	200006a0 	.word	0x200006a0
 800a168:	20000708 	.word	0x20000708
 800a16c:	20000770 	.word	0x20000770

0800a170 <global_stdio_init.part.0>:
 800a170:	b510      	push	{r4, lr}
 800a172:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a0 <global_stdio_init.part.0+0x30>)
 800a174:	4c0b      	ldr	r4, [pc, #44]	@ (800a1a4 <global_stdio_init.part.0+0x34>)
 800a176:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a8 <global_stdio_init.part.0+0x38>)
 800a178:	4620      	mov	r0, r4
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	2104      	movs	r1, #4
 800a17e:	2200      	movs	r2, #0
 800a180:	f7ff ff94 	bl	800a0ac <std>
 800a184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a188:	2201      	movs	r2, #1
 800a18a:	2109      	movs	r1, #9
 800a18c:	f7ff ff8e 	bl	800a0ac <std>
 800a190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a194:	2202      	movs	r2, #2
 800a196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a19a:	2112      	movs	r1, #18
 800a19c:	f7ff bf86 	b.w	800a0ac <std>
 800a1a0:	200007d8 	.word	0x200007d8
 800a1a4:	200006a0 	.word	0x200006a0
 800a1a8:	0800a119 	.word	0x0800a119

0800a1ac <__sfp_lock_acquire>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	@ (800a1b4 <__sfp_lock_acquire+0x8>)
 800a1ae:	f000 ba70 	b.w	800a692 <__retarget_lock_acquire_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	200007e1 	.word	0x200007e1

0800a1b8 <__sfp_lock_release>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	@ (800a1c0 <__sfp_lock_release+0x8>)
 800a1ba:	f000 ba6b 	b.w	800a694 <__retarget_lock_release_recursive>
 800a1be:	bf00      	nop
 800a1c0:	200007e1 	.word	0x200007e1

0800a1c4 <__sinit>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	f7ff fff0 	bl	800a1ac <__sfp_lock_acquire>
 800a1cc:	6a23      	ldr	r3, [r4, #32]
 800a1ce:	b11b      	cbz	r3, 800a1d8 <__sinit+0x14>
 800a1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d4:	f7ff bff0 	b.w	800a1b8 <__sfp_lock_release>
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <__sinit+0x28>)
 800a1da:	6223      	str	r3, [r4, #32]
 800a1dc:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <__sinit+0x2c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1f5      	bne.n	800a1d0 <__sinit+0xc>
 800a1e4:	f7ff ffc4 	bl	800a170 <global_stdio_init.part.0>
 800a1e8:	e7f2      	b.n	800a1d0 <__sinit+0xc>
 800a1ea:	bf00      	nop
 800a1ec:	0800a131 	.word	0x0800a131
 800a1f0:	200007d8 	.word	0x200007d8

0800a1f4 <_fwalk_sglue>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	4688      	mov	r8, r1
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	2600      	movs	r6, #0
 800a200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a204:	f1b9 0901 	subs.w	r9, r9, #1
 800a208:	d505      	bpl.n	800a216 <_fwalk_sglue+0x22>
 800a20a:	6824      	ldr	r4, [r4, #0]
 800a20c:	2c00      	cmp	r4, #0
 800a20e:	d1f7      	bne.n	800a200 <_fwalk_sglue+0xc>
 800a210:	4630      	mov	r0, r6
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d907      	bls.n	800a22c <_fwalk_sglue+0x38>
 800a21c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a220:	3301      	adds	r3, #1
 800a222:	d003      	beq.n	800a22c <_fwalk_sglue+0x38>
 800a224:	4629      	mov	r1, r5
 800a226:	4638      	mov	r0, r7
 800a228:	47c0      	blx	r8
 800a22a:	4306      	orrs	r6, r0
 800a22c:	3568      	adds	r5, #104	@ 0x68
 800a22e:	e7e9      	b.n	800a204 <_fwalk_sglue+0x10>

0800a230 <_puts_r>:
 800a230:	6a03      	ldr	r3, [r0, #32]
 800a232:	b570      	push	{r4, r5, r6, lr}
 800a234:	4605      	mov	r5, r0
 800a236:	460e      	mov	r6, r1
 800a238:	6884      	ldr	r4, [r0, #8]
 800a23a:	b90b      	cbnz	r3, 800a240 <_puts_r+0x10>
 800a23c:	f7ff ffc2 	bl	800a1c4 <__sinit>
 800a240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a242:	07db      	lsls	r3, r3, #31
 800a244:	d405      	bmi.n	800a252 <_puts_r+0x22>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	0598      	lsls	r0, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_puts_r+0x22>
 800a24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a24e:	f000 fa20 	bl	800a692 <__retarget_lock_acquire_recursive>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	0719      	lsls	r1, r3, #28
 800a256:	d502      	bpl.n	800a25e <_puts_r+0x2e>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d135      	bne.n	800a2ca <_puts_r+0x9a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f8e7 	bl	800a434 <__swsetup_r>
 800a266:	b380      	cbz	r0, 800a2ca <_puts_r+0x9a>
 800a268:	f04f 35ff 	mov.w	r5, #4294967295
 800a26c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a26e:	07da      	lsls	r2, r3, #31
 800a270:	d405      	bmi.n	800a27e <_puts_r+0x4e>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d402      	bmi.n	800a27e <_puts_r+0x4e>
 800a278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27a:	f000 fa0b 	bl	800a694 <__retarget_lock_release_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	2b00      	cmp	r3, #0
 800a284:	da04      	bge.n	800a290 <_puts_r+0x60>
 800a286:	69a2      	ldr	r2, [r4, #24]
 800a288:	429a      	cmp	r2, r3
 800a28a:	dc17      	bgt.n	800a2bc <_puts_r+0x8c>
 800a28c:	290a      	cmp	r1, #10
 800a28e:	d015      	beq.n	800a2bc <_puts_r+0x8c>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	7019      	strb	r1, [r3, #0]
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	d1ed      	bne.n	800a282 <_puts_r+0x52>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da11      	bge.n	800a2ce <_puts_r+0x9e>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	210a      	movs	r1, #10
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 f881 	bl	800a3b6 <__swbuf_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d0d7      	beq.n	800a268 <_puts_r+0x38>
 800a2b8:	250a      	movs	r5, #10
 800a2ba:	e7d7      	b.n	800a26c <_puts_r+0x3c>
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f879 	bl	800a3b6 <__swbuf_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d1e7      	bne.n	800a298 <_puts_r+0x68>
 800a2c8:	e7ce      	b.n	800a268 <_puts_r+0x38>
 800a2ca:	3e01      	subs	r6, #1
 800a2cc:	e7e4      	b.n	800a298 <_puts_r+0x68>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e7ee      	b.n	800a2b8 <_puts_r+0x88>
	...

0800a2dc <puts>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	@ (800a2e8 <puts+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfa5 	b.w	800a230 <_puts_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000228 	.word	0x20000228

0800a2ec <siprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	2400      	movs	r4, #0
 800a2f6:	b09d      	sub	sp, #116	@ 0x74
 800a2f8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a2fa:	9002      	str	r0, [sp, #8]
 800a2fc:	9006      	str	r0, [sp, #24]
 800a2fe:	9107      	str	r1, [sp, #28]
 800a300:	9104      	str	r1, [sp, #16]
 800a302:	4809      	ldr	r0, [pc, #36]	@ (800a328 <siprintf+0x3c>)
 800a304:	4909      	ldr	r1, [pc, #36]	@ (800a32c <siprintf+0x40>)
 800a306:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30a:	9105      	str	r1, [sp, #20]
 800a30c:	6800      	ldr	r0, [r0, #0]
 800a30e:	a902      	add	r1, sp, #8
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a314:	f001 fd1c 	bl	800bd50 <_svfiprintf_r>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	701c      	strb	r4, [r3, #0]
 800a31c:	b01d      	add	sp, #116	@ 0x74
 800a31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a322:	b003      	add	sp, #12
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000228 	.word	0x20000228
 800a32c:	ffff0208 	.word	0xffff0208

0800a330 <__sread>:
 800a330:	b510      	push	{r4, lr}
 800a332:	460c      	mov	r4, r1
 800a334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a338:	f000 f95c 	bl	800a5f4 <_read_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	bfab      	itete	ge
 800a340:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a342:	89a3      	ldrhlt	r3, [r4, #12]
 800a344:	181b      	addge	r3, r3, r0
 800a346:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a34a:	bfac      	ite	ge
 800a34c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a34e:	81a3      	strhlt	r3, [r4, #12]
 800a350:	bd10      	pop	{r4, pc}

0800a352 <__swrite>:
 800a352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	461f      	mov	r7, r3
 800a358:	898b      	ldrh	r3, [r1, #12]
 800a35a:	4605      	mov	r5, r0
 800a35c:	05db      	lsls	r3, r3, #23
 800a35e:	460c      	mov	r4, r1
 800a360:	4616      	mov	r6, r2
 800a362:	d505      	bpl.n	800a370 <__swrite+0x1e>
 800a364:	2302      	movs	r3, #2
 800a366:	2200      	movs	r2, #0
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	f000 f930 	bl	800a5d0 <_lseek_r>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	4632      	mov	r2, r6
 800a374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	4628      	mov	r0, r5
 800a37c:	463b      	mov	r3, r7
 800a37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	f000 b947 	b.w	800a618 <_write_r>

0800a38a <__sseek>:
 800a38a:	b510      	push	{r4, lr}
 800a38c:	460c      	mov	r4, r1
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 f91d 	bl	800a5d0 <_lseek_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	bf15      	itete	ne
 800a39c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a39e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3a6:	81a3      	strheq	r3, [r4, #12]
 800a3a8:	bf18      	it	ne
 800a3aa:	81a3      	strhne	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__sclose>:
 800a3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b2:	f000 b8fd 	b.w	800a5b0 <_close_r>

0800a3b6 <__swbuf_r>:
 800a3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	4605      	mov	r5, r0
 800a3be:	b118      	cbz	r0, 800a3c8 <__swbuf_r+0x12>
 800a3c0:	6a03      	ldr	r3, [r0, #32]
 800a3c2:	b90b      	cbnz	r3, 800a3c8 <__swbuf_r+0x12>
 800a3c4:	f7ff fefe 	bl	800a1c4 <__sinit>
 800a3c8:	69a3      	ldr	r3, [r4, #24]
 800a3ca:	60a3      	str	r3, [r4, #8]
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	071a      	lsls	r2, r3, #28
 800a3d0:	d501      	bpl.n	800a3d6 <__swbuf_r+0x20>
 800a3d2:	6923      	ldr	r3, [r4, #16]
 800a3d4:	b943      	cbnz	r3, 800a3e8 <__swbuf_r+0x32>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 f82b 	bl	800a434 <__swsetup_r>
 800a3de:	b118      	cbz	r0, 800a3e8 <__swbuf_r+0x32>
 800a3e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	6922      	ldr	r2, [r4, #16]
 800a3ec:	b2f6      	uxtb	r6, r6
 800a3ee:	1a98      	subs	r0, r3, r2
 800a3f0:	6963      	ldr	r3, [r4, #20]
 800a3f2:	4637      	mov	r7, r6
 800a3f4:	4283      	cmp	r3, r0
 800a3f6:	dc05      	bgt.n	800a404 <__swbuf_r+0x4e>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f001 fe24 	bl	800c048 <_fflush_r>
 800a400:	2800      	cmp	r0, #0
 800a402:	d1ed      	bne.n	800a3e0 <__swbuf_r+0x2a>
 800a404:	68a3      	ldr	r3, [r4, #8]
 800a406:	3b01      	subs	r3, #1
 800a408:	60a3      	str	r3, [r4, #8]
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	701e      	strb	r6, [r3, #0]
 800a412:	6962      	ldr	r2, [r4, #20]
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	429a      	cmp	r2, r3
 800a418:	d004      	beq.n	800a424 <__swbuf_r+0x6e>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	07db      	lsls	r3, r3, #31
 800a41e:	d5e1      	bpl.n	800a3e4 <__swbuf_r+0x2e>
 800a420:	2e0a      	cmp	r6, #10
 800a422:	d1df      	bne.n	800a3e4 <__swbuf_r+0x2e>
 800a424:	4621      	mov	r1, r4
 800a426:	4628      	mov	r0, r5
 800a428:	f001 fe0e 	bl	800c048 <_fflush_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d0d9      	beq.n	800a3e4 <__swbuf_r+0x2e>
 800a430:	e7d6      	b.n	800a3e0 <__swbuf_r+0x2a>
	...

0800a434 <__swsetup_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4b29      	ldr	r3, [pc, #164]	@ (800a4dc <__swsetup_r+0xa8>)
 800a438:	4605      	mov	r5, r0
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	460c      	mov	r4, r1
 800a43e:	b118      	cbz	r0, 800a448 <__swsetup_r+0x14>
 800a440:	6a03      	ldr	r3, [r0, #32]
 800a442:	b90b      	cbnz	r3, 800a448 <__swsetup_r+0x14>
 800a444:	f7ff febe 	bl	800a1c4 <__sinit>
 800a448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44c:	0719      	lsls	r1, r3, #28
 800a44e:	d422      	bmi.n	800a496 <__swsetup_r+0x62>
 800a450:	06da      	lsls	r2, r3, #27
 800a452:	d407      	bmi.n	800a464 <__swsetup_r+0x30>
 800a454:	2209      	movs	r2, #9
 800a456:	602a      	str	r2, [r5, #0]
 800a458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	e033      	b.n	800a4cc <__swsetup_r+0x98>
 800a464:	0758      	lsls	r0, r3, #29
 800a466:	d512      	bpl.n	800a48e <__swsetup_r+0x5a>
 800a468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a46a:	b141      	cbz	r1, 800a47e <__swsetup_r+0x4a>
 800a46c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a470:	4299      	cmp	r1, r3
 800a472:	d002      	beq.n	800a47a <__swsetup_r+0x46>
 800a474:	4628      	mov	r0, r5
 800a476:	f000 ff97 	bl	800b3a8 <_free_r>
 800a47a:	2300      	movs	r3, #0
 800a47c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a484:	81a3      	strh	r3, [r4, #12]
 800a486:	2300      	movs	r3, #0
 800a488:	6063      	str	r3, [r4, #4]
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	f043 0308 	orr.w	r3, r3, #8
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	b94b      	cbnz	r3, 800a4ae <__swsetup_r+0x7a>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a4:	d003      	beq.n	800a4ae <__swsetup_r+0x7a>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f001 fe2c 	bl	800c106 <__smakebuf_r>
 800a4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4b2:	f013 0201 	ands.w	r2, r3, #1
 800a4b6:	d00a      	beq.n	800a4ce <__swsetup_r+0x9a>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	60a2      	str	r2, [r4, #8]
 800a4bc:	6962      	ldr	r2, [r4, #20]
 800a4be:	4252      	negs	r2, r2
 800a4c0:	61a2      	str	r2, [r4, #24]
 800a4c2:	6922      	ldr	r2, [r4, #16]
 800a4c4:	b942      	cbnz	r2, 800a4d8 <__swsetup_r+0xa4>
 800a4c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4ca:	d1c5      	bne.n	800a458 <__swsetup_r+0x24>
 800a4cc:	bd38      	pop	{r3, r4, r5, pc}
 800a4ce:	0799      	lsls	r1, r3, #30
 800a4d0:	bf58      	it	pl
 800a4d2:	6962      	ldrpl	r2, [r4, #20]
 800a4d4:	60a2      	str	r2, [r4, #8]
 800a4d6:	e7f4      	b.n	800a4c2 <__swsetup_r+0x8e>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e7f7      	b.n	800a4cc <__swsetup_r+0x98>
 800a4dc:	20000228 	.word	0x20000228

0800a4e0 <memset>:
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4402      	add	r2, r0
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d100      	bne.n	800a4ea <memset+0xa>
 800a4e8:	4770      	bx	lr
 800a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ee:	e7f9      	b.n	800a4e4 <memset+0x4>

0800a4f0 <strtok>:
 800a4f0:	4b16      	ldr	r3, [pc, #88]	@ (800a54c <strtok+0x5c>)
 800a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f6:	681f      	ldr	r7, [r3, #0]
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	b9ec      	cbnz	r4, 800a53c <strtok+0x4c>
 800a500:	2050      	movs	r0, #80	@ 0x50
 800a502:	f000 ff99 	bl	800b438 <malloc>
 800a506:	4602      	mov	r2, r0
 800a508:	6478      	str	r0, [r7, #68]	@ 0x44
 800a50a:	b920      	cbnz	r0, 800a516 <strtok+0x26>
 800a50c:	215b      	movs	r1, #91	@ 0x5b
 800a50e:	4b10      	ldr	r3, [pc, #64]	@ (800a550 <strtok+0x60>)
 800a510:	4810      	ldr	r0, [pc, #64]	@ (800a554 <strtok+0x64>)
 800a512:	f000 f8cf 	bl	800a6b4 <__assert_func>
 800a516:	e9c0 4400 	strd	r4, r4, [r0]
 800a51a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a51e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a522:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a526:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a52a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a52e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a532:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a536:	6184      	str	r4, [r0, #24]
 800a538:	7704      	strb	r4, [r0, #28]
 800a53a:	6244      	str	r4, [r0, #36]	@ 0x24
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a542:	2301      	movs	r3, #1
 800a544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	f000 b806 	b.w	800a558 <__strtok_r>
 800a54c:	20000228 	.word	0x20000228
 800a550:	0800d04b 	.word	0x0800d04b
 800a554:	0800d062 	.word	0x0800d062

0800a558 <__strtok_r>:
 800a558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	b908      	cbnz	r0, 800a562 <__strtok_r+0xa>
 800a55e:	6814      	ldr	r4, [r2, #0]
 800a560:	b144      	cbz	r4, 800a574 <__strtok_r+0x1c>
 800a562:	460f      	mov	r7, r1
 800a564:	4620      	mov	r0, r4
 800a566:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a56a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a56e:	b91e      	cbnz	r6, 800a578 <__strtok_r+0x20>
 800a570:	b965      	cbnz	r5, 800a58c <__strtok_r+0x34>
 800a572:	6015      	str	r5, [r2, #0]
 800a574:	2000      	movs	r0, #0
 800a576:	e005      	b.n	800a584 <__strtok_r+0x2c>
 800a578:	42b5      	cmp	r5, r6
 800a57a:	d1f6      	bne.n	800a56a <__strtok_r+0x12>
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1f0      	bne.n	800a562 <__strtok_r+0xa>
 800a580:	6014      	str	r4, [r2, #0]
 800a582:	7003      	strb	r3, [r0, #0]
 800a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a586:	461c      	mov	r4, r3
 800a588:	e00c      	b.n	800a5a4 <__strtok_r+0x4c>
 800a58a:	b91d      	cbnz	r5, 800a594 <__strtok_r+0x3c>
 800a58c:	460e      	mov	r6, r1
 800a58e:	4627      	mov	r7, r4
 800a590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a594:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a598:	42ab      	cmp	r3, r5
 800a59a:	d1f6      	bne.n	800a58a <__strtok_r+0x32>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0f2      	beq.n	800a586 <__strtok_r+0x2e>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	703b      	strb	r3, [r7, #0]
 800a5a4:	6014      	str	r4, [r2, #0]
 800a5a6:	e7ed      	b.n	800a584 <__strtok_r+0x2c>

0800a5a8 <_localeconv_r>:
 800a5a8:	4800      	ldr	r0, [pc, #0]	@ (800a5ac <_localeconv_r+0x4>)
 800a5aa:	4770      	bx	lr
 800a5ac:	20000368 	.word	0x20000368

0800a5b0 <_close_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4d05      	ldr	r5, [pc, #20]	@ (800a5cc <_close_r+0x1c>)
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	602b      	str	r3, [r5, #0]
 800a5bc:	f7f9 fb49 	bl	8003c52 <_close>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_close_r+0x1a>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_close_r+0x1a>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	200007dc 	.word	0x200007dc

0800a5d0 <_lseek_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4d05      	ldr	r5, [pc, #20]	@ (800a5f0 <_lseek_r+0x20>)
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f7f9 fb5b 	bl	8003c9a <_lseek>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_lseek_r+0x1e>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_lseek_r+0x1e>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	200007dc 	.word	0x200007dc

0800a5f4 <_read_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4d05      	ldr	r5, [pc, #20]	@ (800a614 <_read_r+0x20>)
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f9 faec 	bl	8003be0 <_read>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_read_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_read_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200007dc 	.word	0x200007dc

0800a618 <_write_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	2200      	movs	r2, #0
 800a622:	4d05      	ldr	r5, [pc, #20]	@ (800a638 <_write_r+0x20>)
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7f9 faf7 	bl	8003c1a <_write>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_write_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_write_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200007dc 	.word	0x200007dc

0800a63c <__errno>:
 800a63c:	4b01      	ldr	r3, [pc, #4]	@ (800a644 <__errno+0x8>)
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	20000228 	.word	0x20000228

0800a648 <__libc_init_array>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	2600      	movs	r6, #0
 800a64c:	4d0c      	ldr	r5, [pc, #48]	@ (800a680 <__libc_init_array+0x38>)
 800a64e:	4c0d      	ldr	r4, [pc, #52]	@ (800a684 <__libc_init_array+0x3c>)
 800a650:	1b64      	subs	r4, r4, r5
 800a652:	10a4      	asrs	r4, r4, #2
 800a654:	42a6      	cmp	r6, r4
 800a656:	d109      	bne.n	800a66c <__libc_init_array+0x24>
 800a658:	f001 ffe0 	bl	800c61c <_init>
 800a65c:	2600      	movs	r6, #0
 800a65e:	4d0a      	ldr	r5, [pc, #40]	@ (800a688 <__libc_init_array+0x40>)
 800a660:	4c0a      	ldr	r4, [pc, #40]	@ (800a68c <__libc_init_array+0x44>)
 800a662:	1b64      	subs	r4, r4, r5
 800a664:	10a4      	asrs	r4, r4, #2
 800a666:	42a6      	cmp	r6, r4
 800a668:	d105      	bne.n	800a676 <__libc_init_array+0x2e>
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a670:	4798      	blx	r3
 800a672:	3601      	adds	r6, #1
 800a674:	e7ee      	b.n	800a654 <__libc_init_array+0xc>
 800a676:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67a:	4798      	blx	r3
 800a67c:	3601      	adds	r6, #1
 800a67e:	e7f2      	b.n	800a666 <__libc_init_array+0x1e>
 800a680:	0800d2e8 	.word	0x0800d2e8
 800a684:	0800d2e8 	.word	0x0800d2e8
 800a688:	0800d2e8 	.word	0x0800d2e8
 800a68c:	0800d2ec 	.word	0x0800d2ec

0800a690 <__retarget_lock_init_recursive>:
 800a690:	4770      	bx	lr

0800a692 <__retarget_lock_acquire_recursive>:
 800a692:	4770      	bx	lr

0800a694 <__retarget_lock_release_recursive>:
 800a694:	4770      	bx	lr

0800a696 <memchr>:
 800a696:	4603      	mov	r3, r0
 800a698:	b510      	push	{r4, lr}
 800a69a:	b2c9      	uxtb	r1, r1
 800a69c:	4402      	add	r2, r0
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	d101      	bne.n	800a6a8 <memchr+0x12>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e003      	b.n	800a6b0 <memchr+0x1a>
 800a6a8:	7804      	ldrb	r4, [r0, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	428c      	cmp	r4, r1
 800a6ae:	d1f6      	bne.n	800a69e <memchr+0x8>
 800a6b0:	bd10      	pop	{r4, pc}
	...

0800a6b4 <__assert_func>:
 800a6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b09      	ldr	r3, [pc, #36]	@ (800a6e0 <__assert_func+0x2c>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68d8      	ldr	r0, [r3, #12]
 800a6c2:	b14c      	cbz	r4, 800a6d8 <__assert_func+0x24>
 800a6c4:	4b07      	ldr	r3, [pc, #28]	@ (800a6e4 <__assert_func+0x30>)
 800a6c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6ca:	9100      	str	r1, [sp, #0]
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	4906      	ldr	r1, [pc, #24]	@ (800a6e8 <__assert_func+0x34>)
 800a6d0:	f001 fce2 	bl	800c098 <fiprintf>
 800a6d4:	f001 fdae 	bl	800c234 <abort>
 800a6d8:	4b04      	ldr	r3, [pc, #16]	@ (800a6ec <__assert_func+0x38>)
 800a6da:	461c      	mov	r4, r3
 800a6dc:	e7f3      	b.n	800a6c6 <__assert_func+0x12>
 800a6de:	bf00      	nop
 800a6e0:	20000228 	.word	0x20000228
 800a6e4:	0800d0bc 	.word	0x0800d0bc
 800a6e8:	0800d0c9 	.word	0x0800d0c9
 800a6ec:	0800d0f7 	.word	0x0800d0f7

0800a6f0 <quorem>:
 800a6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	6903      	ldr	r3, [r0, #16]
 800a6f6:	690c      	ldr	r4, [r1, #16]
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	42a3      	cmp	r3, r4
 800a6fc:	db7e      	blt.n	800a7fc <quorem+0x10c>
 800a6fe:	3c01      	subs	r4, #1
 800a700:	00a3      	lsls	r3, r4, #2
 800a702:	f100 0514 	add.w	r5, r0, #20
 800a706:	f101 0814 	add.w	r8, r1, #20
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a71a:	3301      	adds	r3, #1
 800a71c:	429a      	cmp	r2, r3
 800a71e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a722:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a726:	d32e      	bcc.n	800a786 <quorem+0x96>
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	46c4      	mov	ip, r8
 800a72e:	46ae      	mov	lr, r5
 800a730:	46d3      	mov	fp, sl
 800a732:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a736:	b298      	uxth	r0, r3
 800a738:	fb06 a000 	mla	r0, r6, r0, sl
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	0c02      	lsrs	r2, r0, #16
 800a740:	fb06 2303 	mla	r3, r6, r3, r2
 800a744:	f8de 2000 	ldr.w	r2, [lr]
 800a748:	b280      	uxth	r0, r0
 800a74a:	b292      	uxth	r2, r2
 800a74c:	1a12      	subs	r2, r2, r0
 800a74e:	445a      	add	r2, fp
 800a750:	f8de 0000 	ldr.w	r0, [lr]
 800a754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a758:	b29b      	uxth	r3, r3
 800a75a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a75e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a762:	b292      	uxth	r2, r2
 800a764:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a768:	45e1      	cmp	r9, ip
 800a76a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a76e:	f84e 2b04 	str.w	r2, [lr], #4
 800a772:	d2de      	bcs.n	800a732 <quorem+0x42>
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	58eb      	ldr	r3, [r5, r3]
 800a778:	b92b      	cbnz	r3, 800a786 <quorem+0x96>
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	429d      	cmp	r5, r3
 800a780:	461a      	mov	r2, r3
 800a782:	d32f      	bcc.n	800a7e4 <quorem+0xf4>
 800a784:	613c      	str	r4, [r7, #16]
 800a786:	4638      	mov	r0, r7
 800a788:	f001 f97e 	bl	800ba88 <__mcmp>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	db25      	blt.n	800a7dc <quorem+0xec>
 800a790:	4629      	mov	r1, r5
 800a792:	2000      	movs	r0, #0
 800a794:	f858 2b04 	ldr.w	r2, [r8], #4
 800a798:	f8d1 c000 	ldr.w	ip, [r1]
 800a79c:	fa1f fe82 	uxth.w	lr, r2
 800a7a0:	fa1f f38c 	uxth.w	r3, ip
 800a7a4:	eba3 030e 	sub.w	r3, r3, lr
 800a7a8:	4403      	add	r3, r0
 800a7aa:	0c12      	lsrs	r2, r2, #16
 800a7ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7ba:	45c1      	cmp	r9, r8
 800a7bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7c0:	f841 3b04 	str.w	r3, [r1], #4
 800a7c4:	d2e6      	bcs.n	800a794 <quorem+0xa4>
 800a7c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ce:	b922      	cbnz	r2, 800a7da <quorem+0xea>
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	d30b      	bcc.n	800a7f0 <quorem+0x100>
 800a7d8:	613c      	str	r4, [r7, #16]
 800a7da:	3601      	adds	r6, #1
 800a7dc:	4630      	mov	r0, r6
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	3b04      	subs	r3, #4
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	d1cb      	bne.n	800a784 <quorem+0x94>
 800a7ec:	3c01      	subs	r4, #1
 800a7ee:	e7c6      	b.n	800a77e <quorem+0x8e>
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	3b04      	subs	r3, #4
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	d1ef      	bne.n	800a7d8 <quorem+0xe8>
 800a7f8:	3c01      	subs	r4, #1
 800a7fa:	e7ea      	b.n	800a7d2 <quorem+0xe2>
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	e7ee      	b.n	800a7de <quorem+0xee>

0800a800 <_dtoa_r>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	4614      	mov	r4, r2
 800a806:	461d      	mov	r5, r3
 800a808:	69c7      	ldr	r7, [r0, #28]
 800a80a:	b097      	sub	sp, #92	@ 0x5c
 800a80c:	4681      	mov	r9, r0
 800a80e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a812:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a814:	b97f      	cbnz	r7, 800a836 <_dtoa_r+0x36>
 800a816:	2010      	movs	r0, #16
 800a818:	f000 fe0e 	bl	800b438 <malloc>
 800a81c:	4602      	mov	r2, r0
 800a81e:	f8c9 001c 	str.w	r0, [r9, #28]
 800a822:	b920      	cbnz	r0, 800a82e <_dtoa_r+0x2e>
 800a824:	21ef      	movs	r1, #239	@ 0xef
 800a826:	4bac      	ldr	r3, [pc, #688]	@ (800aad8 <_dtoa_r+0x2d8>)
 800a828:	48ac      	ldr	r0, [pc, #688]	@ (800aadc <_dtoa_r+0x2dc>)
 800a82a:	f7ff ff43 	bl	800a6b4 <__assert_func>
 800a82e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a832:	6007      	str	r7, [r0, #0]
 800a834:	60c7      	str	r7, [r0, #12]
 800a836:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a83a:	6819      	ldr	r1, [r3, #0]
 800a83c:	b159      	cbz	r1, 800a856 <_dtoa_r+0x56>
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	2301      	movs	r3, #1
 800a842:	4093      	lsls	r3, r2
 800a844:	604a      	str	r2, [r1, #4]
 800a846:	608b      	str	r3, [r1, #8]
 800a848:	4648      	mov	r0, r9
 800a84a:	f000 feeb 	bl	800b624 <_Bfree>
 800a84e:	2200      	movs	r2, #0
 800a850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	1e2b      	subs	r3, r5, #0
 800a858:	bfaf      	iteee	ge
 800a85a:	2300      	movge	r3, #0
 800a85c:	2201      	movlt	r2, #1
 800a85e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a862:	9307      	strlt	r3, [sp, #28]
 800a864:	bfa8      	it	ge
 800a866:	6033      	strge	r3, [r6, #0]
 800a868:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a86c:	4b9c      	ldr	r3, [pc, #624]	@ (800aae0 <_dtoa_r+0x2e0>)
 800a86e:	bfb8      	it	lt
 800a870:	6032      	strlt	r2, [r6, #0]
 800a872:	ea33 0308 	bics.w	r3, r3, r8
 800a876:	d112      	bne.n	800a89e <_dtoa_r+0x9e>
 800a878:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a87c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a884:	4323      	orrs	r3, r4
 800a886:	f000 855e 	beq.w	800b346 <_dtoa_r+0xb46>
 800a88a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a88c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aae4 <_dtoa_r+0x2e4>
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8560 	beq.w	800b356 <_dtoa_r+0xb56>
 800a896:	f10a 0303 	add.w	r3, sl, #3
 800a89a:	f000 bd5a 	b.w	800b352 <_dtoa_r+0xb52>
 800a89e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f7f6 f885 	bl	80009bc <__aeabi_dcmpeq>
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	b158      	cbz	r0, 800a8ce <_dtoa_r+0xce>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8be:	b113      	cbz	r3, 800a8c6 <_dtoa_r+0xc6>
 800a8c0:	4b89      	ldr	r3, [pc, #548]	@ (800aae8 <_dtoa_r+0x2e8>)
 800a8c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800aaec <_dtoa_r+0x2ec>
 800a8ca:	f000 bd44 	b.w	800b356 <_dtoa_r+0xb56>
 800a8ce:	ab14      	add	r3, sp, #80	@ 0x50
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	ab15      	add	r3, sp, #84	@ 0x54
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	4648      	mov	r0, r9
 800a8d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8dc:	f001 f984 	bl	800bbe8 <__d2b>
 800a8e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a8e4:	9003      	str	r0, [sp, #12]
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d078      	beq.n	800a9dc <_dtoa_r+0x1dc>
 800a8ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a900:	9712      	str	r7, [sp, #72]	@ 0x48
 800a902:	4619      	mov	r1, r3
 800a904:	2200      	movs	r2, #0
 800a906:	4b7a      	ldr	r3, [pc, #488]	@ (800aaf0 <_dtoa_r+0x2f0>)
 800a908:	f7f5 fc38 	bl	800017c <__aeabi_dsub>
 800a90c:	a36c      	add	r3, pc, #432	@ (adr r3, 800aac0 <_dtoa_r+0x2c0>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fdeb 	bl	80004ec <__aeabi_dmul>
 800a916:	a36c      	add	r3, pc, #432	@ (adr r3, 800aac8 <_dtoa_r+0x2c8>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc30 	bl	8000180 <__adddf3>
 800a920:	4604      	mov	r4, r0
 800a922:	4630      	mov	r0, r6
 800a924:	460d      	mov	r5, r1
 800a926:	f7f5 fd77 	bl	8000418 <__aeabi_i2d>
 800a92a:	a369      	add	r3, pc, #420	@ (adr r3, 800aad0 <_dtoa_r+0x2d0>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fddc 	bl	80004ec <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fc20 	bl	8000180 <__adddf3>
 800a940:	4604      	mov	r4, r0
 800a942:	460d      	mov	r5, r1
 800a944:	f7f6 f882 	bl	8000a4c <__aeabi_d2iz>
 800a948:	2200      	movs	r2, #0
 800a94a:	4607      	mov	r7, r0
 800a94c:	2300      	movs	r3, #0
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f6 f83d 	bl	80009d0 <__aeabi_dcmplt>
 800a956:	b140      	cbz	r0, 800a96a <_dtoa_r+0x16a>
 800a958:	4638      	mov	r0, r7
 800a95a:	f7f5 fd5d 	bl	8000418 <__aeabi_i2d>
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	f7f6 f82b 	bl	80009bc <__aeabi_dcmpeq>
 800a966:	b900      	cbnz	r0, 800a96a <_dtoa_r+0x16a>
 800a968:	3f01      	subs	r7, #1
 800a96a:	2f16      	cmp	r7, #22
 800a96c:	d854      	bhi.n	800aa18 <_dtoa_r+0x218>
 800a96e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a972:	4b60      	ldr	r3, [pc, #384]	@ (800aaf4 <_dtoa_r+0x2f4>)
 800a974:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f6 f828 	bl	80009d0 <__aeabi_dcmplt>
 800a980:	2800      	cmp	r0, #0
 800a982:	d04b      	beq.n	800aa1c <_dtoa_r+0x21c>
 800a984:	2300      	movs	r3, #0
 800a986:	3f01      	subs	r7, #1
 800a988:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a98c:	1b9b      	subs	r3, r3, r6
 800a98e:	1e5a      	subs	r2, r3, #1
 800a990:	bf49      	itett	mi
 800a992:	f1c3 0301 	rsbmi	r3, r3, #1
 800a996:	2300      	movpl	r3, #0
 800a998:	9304      	strmi	r3, [sp, #16]
 800a99a:	2300      	movmi	r3, #0
 800a99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99e:	bf54      	ite	pl
 800a9a0:	9304      	strpl	r3, [sp, #16]
 800a9a2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a9a4:	2f00      	cmp	r7, #0
 800a9a6:	db3b      	blt.n	800aa20 <_dtoa_r+0x220>
 800a9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9aa:	970e      	str	r7, [sp, #56]	@ 0x38
 800a9ac:	443b      	add	r3, r7
 800a9ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9b6:	2b09      	cmp	r3, #9
 800a9b8:	d865      	bhi.n	800aa86 <_dtoa_r+0x286>
 800a9ba:	2b05      	cmp	r3, #5
 800a9bc:	bfc4      	itt	gt
 800a9be:	3b04      	subgt	r3, #4
 800a9c0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a9c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9c4:	bfc8      	it	gt
 800a9c6:	2400      	movgt	r4, #0
 800a9c8:	f1a3 0302 	sub.w	r3, r3, #2
 800a9cc:	bfd8      	it	le
 800a9ce:	2401      	movle	r4, #1
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d864      	bhi.n	800aa9e <_dtoa_r+0x29e>
 800a9d4:	e8df f003 	tbb	[pc, r3]
 800a9d8:	2c385553 	.word	0x2c385553
 800a9dc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a9e0:	441e      	add	r6, r3
 800a9e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	bfc1      	itttt	gt
 800a9ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9ee:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9fa:	bfd6      	itet	le
 800a9fc:	f1c3 0320 	rsble	r3, r3, #32
 800aa00:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa04:	fa04 f003 	lslle.w	r0, r4, r3
 800aa08:	f7f5 fcf6 	bl	80003f8 <__aeabi_ui2d>
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa12:	3e01      	subs	r6, #1
 800aa14:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa16:	e774      	b.n	800a902 <_dtoa_r+0x102>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7b5      	b.n	800a988 <_dtoa_r+0x188>
 800aa1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aa1e:	e7b4      	b.n	800a98a <_dtoa_r+0x18a>
 800aa20:	9b04      	ldr	r3, [sp, #16]
 800aa22:	1bdb      	subs	r3, r3, r7
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	427b      	negs	r3, r7
 800aa28:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa2e:	e7c1      	b.n	800a9b4 <_dtoa_r+0x1b4>
 800aa30:	2301      	movs	r3, #1
 800aa32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa36:	eb07 0b03 	add.w	fp, r7, r3
 800aa3a:	f10b 0301 	add.w	r3, fp, #1
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	9308      	str	r3, [sp, #32]
 800aa42:	bfb8      	it	lt
 800aa44:	2301      	movlt	r3, #1
 800aa46:	e006      	b.n	800aa56 <_dtoa_r+0x256>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd28      	ble.n	800aaa4 <_dtoa_r+0x2a4>
 800aa52:	469b      	mov	fp, r3
 800aa54:	9308      	str	r3, [sp, #32]
 800aa56:	2100      	movs	r1, #0
 800aa58:	2204      	movs	r2, #4
 800aa5a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aa5e:	f102 0514 	add.w	r5, r2, #20
 800aa62:	429d      	cmp	r5, r3
 800aa64:	d926      	bls.n	800aab4 <_dtoa_r+0x2b4>
 800aa66:	6041      	str	r1, [r0, #4]
 800aa68:	4648      	mov	r0, r9
 800aa6a:	f000 fd9b 	bl	800b5a4 <_Balloc>
 800aa6e:	4682      	mov	sl, r0
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d143      	bne.n	800aafc <_dtoa_r+0x2fc>
 800aa74:	4602      	mov	r2, r0
 800aa76:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa7a:	4b1f      	ldr	r3, [pc, #124]	@ (800aaf8 <_dtoa_r+0x2f8>)
 800aa7c:	e6d4      	b.n	800a828 <_dtoa_r+0x28>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e7e3      	b.n	800aa4a <_dtoa_r+0x24a>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e7d5      	b.n	800aa32 <_dtoa_r+0x232>
 800aa86:	2401      	movs	r4, #1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa8c:	9320      	str	r3, [sp, #128]	@ 0x80
 800aa8e:	f04f 3bff 	mov.w	fp, #4294967295
 800aa92:	2200      	movs	r2, #0
 800aa94:	2312      	movs	r3, #18
 800aa96:	f8cd b020 	str.w	fp, [sp, #32]
 800aa9a:	9221      	str	r2, [sp, #132]	@ 0x84
 800aa9c:	e7db      	b.n	800aa56 <_dtoa_r+0x256>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa2:	e7f4      	b.n	800aa8e <_dtoa_r+0x28e>
 800aaa4:	f04f 0b01 	mov.w	fp, #1
 800aaa8:	465b      	mov	r3, fp
 800aaaa:	f8cd b020 	str.w	fp, [sp, #32]
 800aaae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800aab2:	e7d0      	b.n	800aa56 <_dtoa_r+0x256>
 800aab4:	3101      	adds	r1, #1
 800aab6:	0052      	lsls	r2, r2, #1
 800aab8:	e7d1      	b.n	800aa5e <_dtoa_r+0x25e>
 800aaba:	bf00      	nop
 800aabc:	f3af 8000 	nop.w
 800aac0:	636f4361 	.word	0x636f4361
 800aac4:	3fd287a7 	.word	0x3fd287a7
 800aac8:	8b60c8b3 	.word	0x8b60c8b3
 800aacc:	3fc68a28 	.word	0x3fc68a28
 800aad0:	509f79fb 	.word	0x509f79fb
 800aad4:	3fd34413 	.word	0x3fd34413
 800aad8:	0800d04b 	.word	0x0800d04b
 800aadc:	0800d105 	.word	0x0800d105
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	0800d101 	.word	0x0800d101
 800aae8:	0800d028 	.word	0x0800d028
 800aaec:	0800d027 	.word	0x0800d027
 800aaf0:	3ff80000 	.word	0x3ff80000
 800aaf4:	0800d218 	.word	0x0800d218
 800aaf8:	0800d15d 	.word	0x0800d15d
 800aafc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab00:	6018      	str	r0, [r3, #0]
 800ab02:	9b08      	ldr	r3, [sp, #32]
 800ab04:	2b0e      	cmp	r3, #14
 800ab06:	f200 80a1 	bhi.w	800ac4c <_dtoa_r+0x44c>
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	f000 809e 	beq.w	800ac4c <_dtoa_r+0x44c>
 800ab10:	2f00      	cmp	r7, #0
 800ab12:	dd33      	ble.n	800ab7c <_dtoa_r+0x37c>
 800ab14:	4b9c      	ldr	r3, [pc, #624]	@ (800ad88 <_dtoa_r+0x588>)
 800ab16:	f007 020f 	and.w	r2, r7, #15
 800ab1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab1e:	05f8      	lsls	r0, r7, #23
 800ab20:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab24:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800ab28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab2c:	d516      	bpl.n	800ab5c <_dtoa_r+0x35c>
 800ab2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab32:	4b96      	ldr	r3, [pc, #600]	@ (800ad8c <_dtoa_r+0x58c>)
 800ab34:	2603      	movs	r6, #3
 800ab36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab3a:	f7f5 fe01 	bl	8000740 <__aeabi_ddiv>
 800ab3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab42:	f004 040f 	and.w	r4, r4, #15
 800ab46:	4d91      	ldr	r5, [pc, #580]	@ (800ad8c <_dtoa_r+0x58c>)
 800ab48:	b954      	cbnz	r4, 800ab60 <_dtoa_r+0x360>
 800ab4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab52:	f7f5 fdf5 	bl	8000740 <__aeabi_ddiv>
 800ab56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab5a:	e028      	b.n	800abae <_dtoa_r+0x3ae>
 800ab5c:	2602      	movs	r6, #2
 800ab5e:	e7f2      	b.n	800ab46 <_dtoa_r+0x346>
 800ab60:	07e1      	lsls	r1, r4, #31
 800ab62:	d508      	bpl.n	800ab76 <_dtoa_r+0x376>
 800ab64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab6c:	f7f5 fcbe 	bl	80004ec <__aeabi_dmul>
 800ab70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab74:	3601      	adds	r6, #1
 800ab76:	1064      	asrs	r4, r4, #1
 800ab78:	3508      	adds	r5, #8
 800ab7a:	e7e5      	b.n	800ab48 <_dtoa_r+0x348>
 800ab7c:	f000 80af 	beq.w	800acde <_dtoa_r+0x4de>
 800ab80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab84:	427c      	negs	r4, r7
 800ab86:	4b80      	ldr	r3, [pc, #512]	@ (800ad88 <_dtoa_r+0x588>)
 800ab88:	f004 020f 	and.w	r2, r4, #15
 800ab8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7f5 fcaa 	bl	80004ec <__aeabi_dmul>
 800ab98:	2602      	movs	r6, #2
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aba0:	4d7a      	ldr	r5, [pc, #488]	@ (800ad8c <_dtoa_r+0x58c>)
 800aba2:	1124      	asrs	r4, r4, #4
 800aba4:	2c00      	cmp	r4, #0
 800aba6:	f040 808f 	bne.w	800acc8 <_dtoa_r+0x4c8>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1d3      	bne.n	800ab56 <_dtoa_r+0x356>
 800abae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800abb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 8094 	beq.w	800ace2 <_dtoa_r+0x4e2>
 800abba:	2200      	movs	r2, #0
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	4b73      	ldr	r3, [pc, #460]	@ (800ad90 <_dtoa_r+0x590>)
 800abc2:	f7f5 ff05 	bl	80009d0 <__aeabi_dcmplt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f000 808b 	beq.w	800ace2 <_dtoa_r+0x4e2>
 800abcc:	9b08      	ldr	r3, [sp, #32]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 8087 	beq.w	800ace2 <_dtoa_r+0x4e2>
 800abd4:	f1bb 0f00 	cmp.w	fp, #0
 800abd8:	dd34      	ble.n	800ac44 <_dtoa_r+0x444>
 800abda:	4620      	mov	r0, r4
 800abdc:	2200      	movs	r2, #0
 800abde:	4629      	mov	r1, r5
 800abe0:	4b6c      	ldr	r3, [pc, #432]	@ (800ad94 <_dtoa_r+0x594>)
 800abe2:	f7f5 fc83 	bl	80004ec <__aeabi_dmul>
 800abe6:	465c      	mov	r4, fp
 800abe8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abec:	f107 38ff 	add.w	r8, r7, #4294967295
 800abf0:	3601      	adds	r6, #1
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7f5 fc10 	bl	8000418 <__aeabi_i2d>
 800abf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abfc:	f7f5 fc76 	bl	80004ec <__aeabi_dmul>
 800ac00:	2200      	movs	r2, #0
 800ac02:	4b65      	ldr	r3, [pc, #404]	@ (800ad98 <_dtoa_r+0x598>)
 800ac04:	f7f5 fabc 	bl	8000180 <__adddf3>
 800ac08:	4605      	mov	r5, r0
 800ac0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac0e:	2c00      	cmp	r4, #0
 800ac10:	d16a      	bne.n	800ace8 <_dtoa_r+0x4e8>
 800ac12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac16:	2200      	movs	r2, #0
 800ac18:	4b60      	ldr	r3, [pc, #384]	@ (800ad9c <_dtoa_r+0x59c>)
 800ac1a:	f7f5 faaf 	bl	800017c <__aeabi_dsub>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac26:	462a      	mov	r2, r5
 800ac28:	4633      	mov	r3, r6
 800ac2a:	f7f5 feef 	bl	8000a0c <__aeabi_dcmpgt>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f040 8298 	bne.w	800b164 <_dtoa_r+0x964>
 800ac34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac38:	462a      	mov	r2, r5
 800ac3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac3e:	f7f5 fec7 	bl	80009d0 <__aeabi_dcmplt>
 800ac42:	bb38      	cbnz	r0, 800ac94 <_dtoa_r+0x494>
 800ac44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ac4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f2c0 8157 	blt.w	800af02 <_dtoa_r+0x702>
 800ac54:	2f0e      	cmp	r7, #14
 800ac56:	f300 8154 	bgt.w	800af02 <_dtoa_r+0x702>
 800ac5a:	4b4b      	ldr	r3, [pc, #300]	@ (800ad88 <_dtoa_r+0x588>)
 800ac5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f280 80e5 	bge.w	800ae3a <_dtoa_r+0x63a>
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f300 80e1 	bgt.w	800ae3a <_dtoa_r+0x63a>
 800ac78:	d10c      	bne.n	800ac94 <_dtoa_r+0x494>
 800ac7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	4b46      	ldr	r3, [pc, #280]	@ (800ad9c <_dtoa_r+0x59c>)
 800ac82:	f7f5 fc33 	bl	80004ec <__aeabi_dmul>
 800ac86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac8a:	f7f5 feb5 	bl	80009f8 <__aeabi_dcmpge>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f000 8266 	beq.w	800b160 <_dtoa_r+0x960>
 800ac94:	2400      	movs	r4, #0
 800ac96:	4625      	mov	r5, r4
 800ac98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac9a:	4656      	mov	r6, sl
 800ac9c:	ea6f 0803 	mvn.w	r8, r3
 800aca0:	2700      	movs	r7, #0
 800aca2:	4621      	mov	r1, r4
 800aca4:	4648      	mov	r0, r9
 800aca6:	f000 fcbd 	bl	800b624 <_Bfree>
 800acaa:	2d00      	cmp	r5, #0
 800acac:	f000 80bd 	beq.w	800ae2a <_dtoa_r+0x62a>
 800acb0:	b12f      	cbz	r7, 800acbe <_dtoa_r+0x4be>
 800acb2:	42af      	cmp	r7, r5
 800acb4:	d003      	beq.n	800acbe <_dtoa_r+0x4be>
 800acb6:	4639      	mov	r1, r7
 800acb8:	4648      	mov	r0, r9
 800acba:	f000 fcb3 	bl	800b624 <_Bfree>
 800acbe:	4629      	mov	r1, r5
 800acc0:	4648      	mov	r0, r9
 800acc2:	f000 fcaf 	bl	800b624 <_Bfree>
 800acc6:	e0b0      	b.n	800ae2a <_dtoa_r+0x62a>
 800acc8:	07e2      	lsls	r2, r4, #31
 800acca:	d505      	bpl.n	800acd8 <_dtoa_r+0x4d8>
 800accc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acd0:	f7f5 fc0c 	bl	80004ec <__aeabi_dmul>
 800acd4:	2301      	movs	r3, #1
 800acd6:	3601      	adds	r6, #1
 800acd8:	1064      	asrs	r4, r4, #1
 800acda:	3508      	adds	r5, #8
 800acdc:	e762      	b.n	800aba4 <_dtoa_r+0x3a4>
 800acde:	2602      	movs	r6, #2
 800ace0:	e765      	b.n	800abae <_dtoa_r+0x3ae>
 800ace2:	46b8      	mov	r8, r7
 800ace4:	9c08      	ldr	r4, [sp, #32]
 800ace6:	e784      	b.n	800abf2 <_dtoa_r+0x3f2>
 800ace8:	4b27      	ldr	r3, [pc, #156]	@ (800ad88 <_dtoa_r+0x588>)
 800acea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acf4:	4454      	add	r4, sl
 800acf6:	2900      	cmp	r1, #0
 800acf8:	d054      	beq.n	800ada4 <_dtoa_r+0x5a4>
 800acfa:	2000      	movs	r0, #0
 800acfc:	4928      	ldr	r1, [pc, #160]	@ (800ada0 <_dtoa_r+0x5a0>)
 800acfe:	f7f5 fd1f 	bl	8000740 <__aeabi_ddiv>
 800ad02:	4633      	mov	r3, r6
 800ad04:	462a      	mov	r2, r5
 800ad06:	f7f5 fa39 	bl	800017c <__aeabi_dsub>
 800ad0a:	4656      	mov	r6, sl
 800ad0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad14:	f7f5 fe9a 	bl	8000a4c <__aeabi_d2iz>
 800ad18:	4605      	mov	r5, r0
 800ad1a:	f7f5 fb7d 	bl	8000418 <__aeabi_i2d>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad26:	f7f5 fa29 	bl	800017c <__aeabi_dsub>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	3530      	adds	r5, #48	@ 0x30
 800ad30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad38:	f806 5b01 	strb.w	r5, [r6], #1
 800ad3c:	f7f5 fe48 	bl	80009d0 <__aeabi_dcmplt>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d172      	bne.n	800ae2a <_dtoa_r+0x62a>
 800ad44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad48:	2000      	movs	r0, #0
 800ad4a:	4911      	ldr	r1, [pc, #68]	@ (800ad90 <_dtoa_r+0x590>)
 800ad4c:	f7f5 fa16 	bl	800017c <__aeabi_dsub>
 800ad50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad54:	f7f5 fe3c 	bl	80009d0 <__aeabi_dcmplt>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f040 80b4 	bne.w	800aec6 <_dtoa_r+0x6c6>
 800ad5e:	42a6      	cmp	r6, r4
 800ad60:	f43f af70 	beq.w	800ac44 <_dtoa_r+0x444>
 800ad64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad94 <_dtoa_r+0x594>)
 800ad6c:	f7f5 fbbe 	bl	80004ec <__aeabi_dmul>
 800ad70:	2200      	movs	r2, #0
 800ad72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad7a:	4b06      	ldr	r3, [pc, #24]	@ (800ad94 <_dtoa_r+0x594>)
 800ad7c:	f7f5 fbb6 	bl	80004ec <__aeabi_dmul>
 800ad80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad84:	e7c4      	b.n	800ad10 <_dtoa_r+0x510>
 800ad86:	bf00      	nop
 800ad88:	0800d218 	.word	0x0800d218
 800ad8c:	0800d1f0 	.word	0x0800d1f0
 800ad90:	3ff00000 	.word	0x3ff00000
 800ad94:	40240000 	.word	0x40240000
 800ad98:	401c0000 	.word	0x401c0000
 800ad9c:	40140000 	.word	0x40140000
 800ada0:	3fe00000 	.word	0x3fe00000
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	f7f5 fba0 	bl	80004ec <__aeabi_dmul>
 800adac:	4656      	mov	r6, sl
 800adae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adb2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800adb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adb8:	f7f5 fe48 	bl	8000a4c <__aeabi_d2iz>
 800adbc:	4605      	mov	r5, r0
 800adbe:	f7f5 fb2b 	bl	8000418 <__aeabi_i2d>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adca:	f7f5 f9d7 	bl	800017c <__aeabi_dsub>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	3530      	adds	r5, #48	@ 0x30
 800add4:	f806 5b01 	strb.w	r5, [r6], #1
 800add8:	42a6      	cmp	r6, r4
 800adda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adde:	f04f 0200 	mov.w	r2, #0
 800ade2:	d124      	bne.n	800ae2e <_dtoa_r+0x62e>
 800ade4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ade8:	4bae      	ldr	r3, [pc, #696]	@ (800b0a4 <_dtoa_r+0x8a4>)
 800adea:	f7f5 f9c9 	bl	8000180 <__adddf3>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adf6:	f7f5 fe09 	bl	8000a0c <__aeabi_dcmpgt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d163      	bne.n	800aec6 <_dtoa_r+0x6c6>
 800adfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae02:	2000      	movs	r0, #0
 800ae04:	49a7      	ldr	r1, [pc, #668]	@ (800b0a4 <_dtoa_r+0x8a4>)
 800ae06:	f7f5 f9b9 	bl	800017c <__aeabi_dsub>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae12:	f7f5 fddd 	bl	80009d0 <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f43f af14 	beq.w	800ac44 <_dtoa_r+0x444>
 800ae1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae1e:	1e73      	subs	r3, r6, #1
 800ae20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae26:	2b30      	cmp	r3, #48	@ 0x30
 800ae28:	d0f8      	beq.n	800ae1c <_dtoa_r+0x61c>
 800ae2a:	4647      	mov	r7, r8
 800ae2c:	e03b      	b.n	800aea6 <_dtoa_r+0x6a6>
 800ae2e:	4b9e      	ldr	r3, [pc, #632]	@ (800b0a8 <_dtoa_r+0x8a8>)
 800ae30:	f7f5 fb5c 	bl	80004ec <__aeabi_dmul>
 800ae34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae38:	e7bc      	b.n	800adb4 <_dtoa_r+0x5b4>
 800ae3a:	4656      	mov	r6, sl
 800ae3c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ae40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae44:	4620      	mov	r0, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	f7f5 fc7a 	bl	8000740 <__aeabi_ddiv>
 800ae4c:	f7f5 fdfe 	bl	8000a4c <__aeabi_d2iz>
 800ae50:	4680      	mov	r8, r0
 800ae52:	f7f5 fae1 	bl	8000418 <__aeabi_i2d>
 800ae56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae5a:	f7f5 fb47 	bl	80004ec <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4620      	mov	r0, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	f7f5 f989 	bl	800017c <__aeabi_dsub>
 800ae6a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae6e:	9d08      	ldr	r5, [sp, #32]
 800ae70:	f806 4b01 	strb.w	r4, [r6], #1
 800ae74:	eba6 040a 	sub.w	r4, r6, sl
 800ae78:	42a5      	cmp	r5, r4
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	d133      	bne.n	800aee8 <_dtoa_r+0x6e8>
 800ae80:	f7f5 f97e 	bl	8000180 <__adddf3>
 800ae84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	f7f5 fdbe 	bl	8000a0c <__aeabi_dcmpgt>
 800ae90:	b9c0      	cbnz	r0, 800aec4 <_dtoa_r+0x6c4>
 800ae92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fd8f 	bl	80009bc <__aeabi_dcmpeq>
 800ae9e:	b110      	cbz	r0, 800aea6 <_dtoa_r+0x6a6>
 800aea0:	f018 0f01 	tst.w	r8, #1
 800aea4:	d10e      	bne.n	800aec4 <_dtoa_r+0x6c4>
 800aea6:	4648      	mov	r0, r9
 800aea8:	9903      	ldr	r1, [sp, #12]
 800aeaa:	f000 fbbb 	bl	800b624 <_Bfree>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	7033      	strb	r3, [r6, #0]
 800aeb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aeb4:	3701      	adds	r7, #1
 800aeb6:	601f      	str	r7, [r3, #0]
 800aeb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 824b 	beq.w	800b356 <_dtoa_r+0xb56>
 800aec0:	601e      	str	r6, [r3, #0]
 800aec2:	e248      	b.n	800b356 <_dtoa_r+0xb56>
 800aec4:	46b8      	mov	r8, r7
 800aec6:	4633      	mov	r3, r6
 800aec8:	461e      	mov	r6, r3
 800aeca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aece:	2a39      	cmp	r2, #57	@ 0x39
 800aed0:	d106      	bne.n	800aee0 <_dtoa_r+0x6e0>
 800aed2:	459a      	cmp	sl, r3
 800aed4:	d1f8      	bne.n	800aec8 <_dtoa_r+0x6c8>
 800aed6:	2230      	movs	r2, #48	@ 0x30
 800aed8:	f108 0801 	add.w	r8, r8, #1
 800aedc:	f88a 2000 	strb.w	r2, [sl]
 800aee0:	781a      	ldrb	r2, [r3, #0]
 800aee2:	3201      	adds	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	e7a0      	b.n	800ae2a <_dtoa_r+0x62a>
 800aee8:	2200      	movs	r2, #0
 800aeea:	4b6f      	ldr	r3, [pc, #444]	@ (800b0a8 <_dtoa_r+0x8a8>)
 800aeec:	f7f5 fafe 	bl	80004ec <__aeabi_dmul>
 800aef0:	2200      	movs	r2, #0
 800aef2:	2300      	movs	r3, #0
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	f7f5 fd60 	bl	80009bc <__aeabi_dcmpeq>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d09f      	beq.n	800ae40 <_dtoa_r+0x640>
 800af00:	e7d1      	b.n	800aea6 <_dtoa_r+0x6a6>
 800af02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af04:	2a00      	cmp	r2, #0
 800af06:	f000 80ea 	beq.w	800b0de <_dtoa_r+0x8de>
 800af0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af0c:	2a01      	cmp	r2, #1
 800af0e:	f300 80cd 	bgt.w	800b0ac <_dtoa_r+0x8ac>
 800af12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af14:	2a00      	cmp	r2, #0
 800af16:	f000 80c1 	beq.w	800b09c <_dtoa_r+0x89c>
 800af1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af20:	9e04      	ldr	r6, [sp, #16]
 800af22:	9a04      	ldr	r2, [sp, #16]
 800af24:	2101      	movs	r1, #1
 800af26:	441a      	add	r2, r3
 800af28:	9204      	str	r2, [sp, #16]
 800af2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af2c:	4648      	mov	r0, r9
 800af2e:	441a      	add	r2, r3
 800af30:	9209      	str	r2, [sp, #36]	@ 0x24
 800af32:	f000 fc2b 	bl	800b78c <__i2b>
 800af36:	4605      	mov	r5, r0
 800af38:	b166      	cbz	r6, 800af54 <_dtoa_r+0x754>
 800af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dd09      	ble.n	800af54 <_dtoa_r+0x754>
 800af40:	42b3      	cmp	r3, r6
 800af42:	bfa8      	it	ge
 800af44:	4633      	movge	r3, r6
 800af46:	9a04      	ldr	r2, [sp, #16]
 800af48:	1af6      	subs	r6, r6, r3
 800af4a:	1ad2      	subs	r2, r2, r3
 800af4c:	9204      	str	r2, [sp, #16]
 800af4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	9309      	str	r3, [sp, #36]	@ 0x24
 800af54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af56:	b30b      	cbz	r3, 800af9c <_dtoa_r+0x79c>
 800af58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 80c6 	beq.w	800b0ec <_dtoa_r+0x8ec>
 800af60:	2c00      	cmp	r4, #0
 800af62:	f000 80c0 	beq.w	800b0e6 <_dtoa_r+0x8e6>
 800af66:	4629      	mov	r1, r5
 800af68:	4622      	mov	r2, r4
 800af6a:	4648      	mov	r0, r9
 800af6c:	f000 fcc6 	bl	800b8fc <__pow5mult>
 800af70:	9a03      	ldr	r2, [sp, #12]
 800af72:	4601      	mov	r1, r0
 800af74:	4605      	mov	r5, r0
 800af76:	4648      	mov	r0, r9
 800af78:	f000 fc1e 	bl	800b7b8 <__multiply>
 800af7c:	9903      	ldr	r1, [sp, #12]
 800af7e:	4680      	mov	r8, r0
 800af80:	4648      	mov	r0, r9
 800af82:	f000 fb4f 	bl	800b624 <_Bfree>
 800af86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af88:	1b1b      	subs	r3, r3, r4
 800af8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af8c:	f000 80b1 	beq.w	800b0f2 <_dtoa_r+0x8f2>
 800af90:	4641      	mov	r1, r8
 800af92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af94:	4648      	mov	r0, r9
 800af96:	f000 fcb1 	bl	800b8fc <__pow5mult>
 800af9a:	9003      	str	r0, [sp, #12]
 800af9c:	2101      	movs	r1, #1
 800af9e:	4648      	mov	r0, r9
 800afa0:	f000 fbf4 	bl	800b78c <__i2b>
 800afa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afa6:	4604      	mov	r4, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 81d8 	beq.w	800b35e <_dtoa_r+0xb5e>
 800afae:	461a      	mov	r2, r3
 800afb0:	4601      	mov	r1, r0
 800afb2:	4648      	mov	r0, r9
 800afb4:	f000 fca2 	bl	800b8fc <__pow5mult>
 800afb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800afba:	4604      	mov	r4, r0
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	f300 809f 	bgt.w	800b100 <_dtoa_r+0x900>
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f040 8097 	bne.w	800b0f8 <_dtoa_r+0x8f8>
 800afca:	9b07      	ldr	r3, [sp, #28]
 800afcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f040 8093 	bne.w	800b0fc <_dtoa_r+0x8fc>
 800afd6:	9b07      	ldr	r3, [sp, #28]
 800afd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afdc:	0d1b      	lsrs	r3, r3, #20
 800afde:	051b      	lsls	r3, r3, #20
 800afe0:	b133      	cbz	r3, 800aff0 <_dtoa_r+0x7f0>
 800afe2:	9b04      	ldr	r3, [sp, #16]
 800afe4:	3301      	adds	r3, #1
 800afe6:	9304      	str	r3, [sp, #16]
 800afe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afea:	3301      	adds	r3, #1
 800afec:	9309      	str	r3, [sp, #36]	@ 0x24
 800afee:	2301      	movs	r3, #1
 800aff0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 81b8 	beq.w	800b36a <_dtoa_r+0xb6a>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b000:	6918      	ldr	r0, [r3, #16]
 800b002:	f000 fb77 	bl	800b6f4 <__hi0bits>
 800b006:	f1c0 0020 	rsb	r0, r0, #32
 800b00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00c:	4418      	add	r0, r3
 800b00e:	f010 001f 	ands.w	r0, r0, #31
 800b012:	f000 8082 	beq.w	800b11a <_dtoa_r+0x91a>
 800b016:	f1c0 0320 	rsb	r3, r0, #32
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	dd73      	ble.n	800b106 <_dtoa_r+0x906>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	f1c0 001c 	rsb	r0, r0, #28
 800b024:	4403      	add	r3, r0
 800b026:	9304      	str	r3, [sp, #16]
 800b028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02a:	4406      	add	r6, r0
 800b02c:	4403      	add	r3, r0
 800b02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	dd05      	ble.n	800b042 <_dtoa_r+0x842>
 800b036:	461a      	mov	r2, r3
 800b038:	4648      	mov	r0, r9
 800b03a:	9903      	ldr	r1, [sp, #12]
 800b03c:	f000 fcb8 	bl	800b9b0 <__lshift>
 800b040:	9003      	str	r0, [sp, #12]
 800b042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b044:	2b00      	cmp	r3, #0
 800b046:	dd05      	ble.n	800b054 <_dtoa_r+0x854>
 800b048:	4621      	mov	r1, r4
 800b04a:	461a      	mov	r2, r3
 800b04c:	4648      	mov	r0, r9
 800b04e:	f000 fcaf 	bl	800b9b0 <__lshift>
 800b052:	4604      	mov	r4, r0
 800b054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d061      	beq.n	800b11e <_dtoa_r+0x91e>
 800b05a:	4621      	mov	r1, r4
 800b05c:	9803      	ldr	r0, [sp, #12]
 800b05e:	f000 fd13 	bl	800ba88 <__mcmp>
 800b062:	2800      	cmp	r0, #0
 800b064:	da5b      	bge.n	800b11e <_dtoa_r+0x91e>
 800b066:	2300      	movs	r3, #0
 800b068:	220a      	movs	r2, #10
 800b06a:	4648      	mov	r0, r9
 800b06c:	9903      	ldr	r1, [sp, #12]
 800b06e:	f000 fafb 	bl	800b668 <__multadd>
 800b072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b074:	f107 38ff 	add.w	r8, r7, #4294967295
 800b078:	9003      	str	r0, [sp, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 8177 	beq.w	800b36e <_dtoa_r+0xb6e>
 800b080:	4629      	mov	r1, r5
 800b082:	2300      	movs	r3, #0
 800b084:	220a      	movs	r2, #10
 800b086:	4648      	mov	r0, r9
 800b088:	f000 faee 	bl	800b668 <__multadd>
 800b08c:	f1bb 0f00 	cmp.w	fp, #0
 800b090:	4605      	mov	r5, r0
 800b092:	dc6f      	bgt.n	800b174 <_dtoa_r+0x974>
 800b094:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b096:	2b02      	cmp	r3, #2
 800b098:	dc49      	bgt.n	800b12e <_dtoa_r+0x92e>
 800b09a:	e06b      	b.n	800b174 <_dtoa_r+0x974>
 800b09c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b09e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0a2:	e73c      	b.n	800af1e <_dtoa_r+0x71e>
 800b0a4:	3fe00000 	.word	0x3fe00000
 800b0a8:	40240000 	.word	0x40240000
 800b0ac:	9b08      	ldr	r3, [sp, #32]
 800b0ae:	1e5c      	subs	r4, r3, #1
 800b0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	db09      	blt.n	800b0ca <_dtoa_r+0x8ca>
 800b0b6:	1b1c      	subs	r4, r3, r4
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f6bf af30 	bge.w	800af20 <_dtoa_r+0x720>
 800b0c0:	9b04      	ldr	r3, [sp, #16]
 800b0c2:	9a08      	ldr	r2, [sp, #32]
 800b0c4:	1a9e      	subs	r6, r3, r2
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e72b      	b.n	800af22 <_dtoa_r+0x722>
 800b0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ce:	1ae3      	subs	r3, r4, r3
 800b0d0:	441a      	add	r2, r3
 800b0d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0d4:	9e04      	ldr	r6, [sp, #16]
 800b0d6:	2400      	movs	r4, #0
 800b0d8:	9b08      	ldr	r3, [sp, #32]
 800b0da:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0dc:	e721      	b.n	800af22 <_dtoa_r+0x722>
 800b0de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0e0:	9e04      	ldr	r6, [sp, #16]
 800b0e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0e4:	e728      	b.n	800af38 <_dtoa_r+0x738>
 800b0e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0ea:	e751      	b.n	800af90 <_dtoa_r+0x790>
 800b0ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0ee:	9903      	ldr	r1, [sp, #12]
 800b0f0:	e750      	b.n	800af94 <_dtoa_r+0x794>
 800b0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0f6:	e751      	b.n	800af9c <_dtoa_r+0x79c>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e779      	b.n	800aff0 <_dtoa_r+0x7f0>
 800b0fc:	9b06      	ldr	r3, [sp, #24]
 800b0fe:	e777      	b.n	800aff0 <_dtoa_r+0x7f0>
 800b100:	2300      	movs	r3, #0
 800b102:	930a      	str	r3, [sp, #40]	@ 0x28
 800b104:	e779      	b.n	800affa <_dtoa_r+0x7fa>
 800b106:	d093      	beq.n	800b030 <_dtoa_r+0x830>
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	331c      	adds	r3, #28
 800b10c:	441a      	add	r2, r3
 800b10e:	9204      	str	r2, [sp, #16]
 800b110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b112:	441e      	add	r6, r3
 800b114:	441a      	add	r2, r3
 800b116:	9209      	str	r2, [sp, #36]	@ 0x24
 800b118:	e78a      	b.n	800b030 <_dtoa_r+0x830>
 800b11a:	4603      	mov	r3, r0
 800b11c:	e7f4      	b.n	800b108 <_dtoa_r+0x908>
 800b11e:	9b08      	ldr	r3, [sp, #32]
 800b120:	46b8      	mov	r8, r7
 800b122:	2b00      	cmp	r3, #0
 800b124:	dc20      	bgt.n	800b168 <_dtoa_r+0x968>
 800b126:	469b      	mov	fp, r3
 800b128:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	dd1e      	ble.n	800b16c <_dtoa_r+0x96c>
 800b12e:	f1bb 0f00 	cmp.w	fp, #0
 800b132:	f47f adb1 	bne.w	800ac98 <_dtoa_r+0x498>
 800b136:	4621      	mov	r1, r4
 800b138:	465b      	mov	r3, fp
 800b13a:	2205      	movs	r2, #5
 800b13c:	4648      	mov	r0, r9
 800b13e:	f000 fa93 	bl	800b668 <__multadd>
 800b142:	4601      	mov	r1, r0
 800b144:	4604      	mov	r4, r0
 800b146:	9803      	ldr	r0, [sp, #12]
 800b148:	f000 fc9e 	bl	800ba88 <__mcmp>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f77f ada3 	ble.w	800ac98 <_dtoa_r+0x498>
 800b152:	4656      	mov	r6, sl
 800b154:	2331      	movs	r3, #49	@ 0x31
 800b156:	f108 0801 	add.w	r8, r8, #1
 800b15a:	f806 3b01 	strb.w	r3, [r6], #1
 800b15e:	e59f      	b.n	800aca0 <_dtoa_r+0x4a0>
 800b160:	46b8      	mov	r8, r7
 800b162:	9c08      	ldr	r4, [sp, #32]
 800b164:	4625      	mov	r5, r4
 800b166:	e7f4      	b.n	800b152 <_dtoa_r+0x952>
 800b168:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 8101 	beq.w	800b376 <_dtoa_r+0xb76>
 800b174:	2e00      	cmp	r6, #0
 800b176:	dd05      	ble.n	800b184 <_dtoa_r+0x984>
 800b178:	4629      	mov	r1, r5
 800b17a:	4632      	mov	r2, r6
 800b17c:	4648      	mov	r0, r9
 800b17e:	f000 fc17 	bl	800b9b0 <__lshift>
 800b182:	4605      	mov	r5, r0
 800b184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d05c      	beq.n	800b244 <_dtoa_r+0xa44>
 800b18a:	4648      	mov	r0, r9
 800b18c:	6869      	ldr	r1, [r5, #4]
 800b18e:	f000 fa09 	bl	800b5a4 <_Balloc>
 800b192:	4606      	mov	r6, r0
 800b194:	b928      	cbnz	r0, 800b1a2 <_dtoa_r+0x9a2>
 800b196:	4602      	mov	r2, r0
 800b198:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b19c:	4b80      	ldr	r3, [pc, #512]	@ (800b3a0 <_dtoa_r+0xba0>)
 800b19e:	f7ff bb43 	b.w	800a828 <_dtoa_r+0x28>
 800b1a2:	692a      	ldr	r2, [r5, #16]
 800b1a4:	f105 010c 	add.w	r1, r5, #12
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	0092      	lsls	r2, r2, #2
 800b1ac:	300c      	adds	r0, #12
 800b1ae:	f001 f833 	bl	800c218 <memcpy>
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4648      	mov	r0, r9
 800b1b8:	f000 fbfa 	bl	800b9b0 <__lshift>
 800b1bc:	462f      	mov	r7, r5
 800b1be:	4605      	mov	r5, r0
 800b1c0:	f10a 0301 	add.w	r3, sl, #1
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	eb0a 030b 	add.w	r3, sl, fp
 800b1ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	9803      	ldr	r0, [sp, #12]
 800b1da:	f103 3bff 	add.w	fp, r3, #4294967295
 800b1de:	f7ff fa87 	bl	800a6f0 <quorem>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	3330      	adds	r3, #48	@ 0x30
 800b1e8:	9006      	str	r0, [sp, #24]
 800b1ea:	9803      	ldr	r0, [sp, #12]
 800b1ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ee:	f000 fc4b 	bl	800ba88 <__mcmp>
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	9008      	str	r0, [sp, #32]
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	f000 fc61 	bl	800bac0 <__mdiff>
 800b1fe:	68c2      	ldr	r2, [r0, #12]
 800b200:	4606      	mov	r6, r0
 800b202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b204:	bb02      	cbnz	r2, 800b248 <_dtoa_r+0xa48>
 800b206:	4601      	mov	r1, r0
 800b208:	9803      	ldr	r0, [sp, #12]
 800b20a:	f000 fc3d 	bl	800ba88 <__mcmp>
 800b20e:	4602      	mov	r2, r0
 800b210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b212:	4631      	mov	r1, r6
 800b214:	4648      	mov	r0, r9
 800b216:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b21a:	f000 fa03 	bl	800b624 <_Bfree>
 800b21e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b222:	9e04      	ldr	r6, [sp, #16]
 800b224:	ea42 0103 	orr.w	r1, r2, r3
 800b228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22a:	4319      	orrs	r1, r3
 800b22c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b22e:	d10d      	bne.n	800b24c <_dtoa_r+0xa4c>
 800b230:	2b39      	cmp	r3, #57	@ 0x39
 800b232:	d027      	beq.n	800b284 <_dtoa_r+0xa84>
 800b234:	9a08      	ldr	r2, [sp, #32]
 800b236:	2a00      	cmp	r2, #0
 800b238:	dd01      	ble.n	800b23e <_dtoa_r+0xa3e>
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	3331      	adds	r3, #49	@ 0x31
 800b23e:	f88b 3000 	strb.w	r3, [fp]
 800b242:	e52e      	b.n	800aca2 <_dtoa_r+0x4a2>
 800b244:	4628      	mov	r0, r5
 800b246:	e7b9      	b.n	800b1bc <_dtoa_r+0x9bc>
 800b248:	2201      	movs	r2, #1
 800b24a:	e7e2      	b.n	800b212 <_dtoa_r+0xa12>
 800b24c:	9908      	ldr	r1, [sp, #32]
 800b24e:	2900      	cmp	r1, #0
 800b250:	db04      	blt.n	800b25c <_dtoa_r+0xa5c>
 800b252:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b254:	4301      	orrs	r1, r0
 800b256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b258:	4301      	orrs	r1, r0
 800b25a:	d120      	bne.n	800b29e <_dtoa_r+0xa9e>
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	ddee      	ble.n	800b23e <_dtoa_r+0xa3e>
 800b260:	2201      	movs	r2, #1
 800b262:	9903      	ldr	r1, [sp, #12]
 800b264:	4648      	mov	r0, r9
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	f000 fba2 	bl	800b9b0 <__lshift>
 800b26c:	4621      	mov	r1, r4
 800b26e:	9003      	str	r0, [sp, #12]
 800b270:	f000 fc0a 	bl	800ba88 <__mcmp>
 800b274:	2800      	cmp	r0, #0
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	dc02      	bgt.n	800b280 <_dtoa_r+0xa80>
 800b27a:	d1e0      	bne.n	800b23e <_dtoa_r+0xa3e>
 800b27c:	07da      	lsls	r2, r3, #31
 800b27e:	d5de      	bpl.n	800b23e <_dtoa_r+0xa3e>
 800b280:	2b39      	cmp	r3, #57	@ 0x39
 800b282:	d1da      	bne.n	800b23a <_dtoa_r+0xa3a>
 800b284:	2339      	movs	r3, #57	@ 0x39
 800b286:	f88b 3000 	strb.w	r3, [fp]
 800b28a:	4633      	mov	r3, r6
 800b28c:	461e      	mov	r6, r3
 800b28e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b292:	3b01      	subs	r3, #1
 800b294:	2a39      	cmp	r2, #57	@ 0x39
 800b296:	d04e      	beq.n	800b336 <_dtoa_r+0xb36>
 800b298:	3201      	adds	r2, #1
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	e501      	b.n	800aca2 <_dtoa_r+0x4a2>
 800b29e:	2a00      	cmp	r2, #0
 800b2a0:	dd03      	ble.n	800b2aa <_dtoa_r+0xaaa>
 800b2a2:	2b39      	cmp	r3, #57	@ 0x39
 800b2a4:	d0ee      	beq.n	800b284 <_dtoa_r+0xa84>
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	e7c9      	b.n	800b23e <_dtoa_r+0xa3e>
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b2b2:	428a      	cmp	r2, r1
 800b2b4:	d028      	beq.n	800b308 <_dtoa_r+0xb08>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	220a      	movs	r2, #10
 800b2ba:	9903      	ldr	r1, [sp, #12]
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f000 f9d3 	bl	800b668 <__multadd>
 800b2c2:	42af      	cmp	r7, r5
 800b2c4:	9003      	str	r0, [sp, #12]
 800b2c6:	f04f 0300 	mov.w	r3, #0
 800b2ca:	f04f 020a 	mov.w	r2, #10
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	4648      	mov	r0, r9
 800b2d2:	d107      	bne.n	800b2e4 <_dtoa_r+0xae4>
 800b2d4:	f000 f9c8 	bl	800b668 <__multadd>
 800b2d8:	4607      	mov	r7, r0
 800b2da:	4605      	mov	r5, r0
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	e777      	b.n	800b1d4 <_dtoa_r+0x9d4>
 800b2e4:	f000 f9c0 	bl	800b668 <__multadd>
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	220a      	movs	r2, #10
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f000 f9b9 	bl	800b668 <__multadd>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	e7f0      	b.n	800b2dc <_dtoa_r+0xadc>
 800b2fa:	f1bb 0f00 	cmp.w	fp, #0
 800b2fe:	bfcc      	ite	gt
 800b300:	465e      	movgt	r6, fp
 800b302:	2601      	movle	r6, #1
 800b304:	2700      	movs	r7, #0
 800b306:	4456      	add	r6, sl
 800b308:	2201      	movs	r2, #1
 800b30a:	9903      	ldr	r1, [sp, #12]
 800b30c:	4648      	mov	r0, r9
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	f000 fb4e 	bl	800b9b0 <__lshift>
 800b314:	4621      	mov	r1, r4
 800b316:	9003      	str	r0, [sp, #12]
 800b318:	f000 fbb6 	bl	800ba88 <__mcmp>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dcb4      	bgt.n	800b28a <_dtoa_r+0xa8a>
 800b320:	d102      	bne.n	800b328 <_dtoa_r+0xb28>
 800b322:	9b04      	ldr	r3, [sp, #16]
 800b324:	07db      	lsls	r3, r3, #31
 800b326:	d4b0      	bmi.n	800b28a <_dtoa_r+0xa8a>
 800b328:	4633      	mov	r3, r6
 800b32a:	461e      	mov	r6, r3
 800b32c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b330:	2a30      	cmp	r2, #48	@ 0x30
 800b332:	d0fa      	beq.n	800b32a <_dtoa_r+0xb2a>
 800b334:	e4b5      	b.n	800aca2 <_dtoa_r+0x4a2>
 800b336:	459a      	cmp	sl, r3
 800b338:	d1a8      	bne.n	800b28c <_dtoa_r+0xa8c>
 800b33a:	2331      	movs	r3, #49	@ 0x31
 800b33c:	f108 0801 	add.w	r8, r8, #1
 800b340:	f88a 3000 	strb.w	r3, [sl]
 800b344:	e4ad      	b.n	800aca2 <_dtoa_r+0x4a2>
 800b346:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b348:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b3a4 <_dtoa_r+0xba4>
 800b34c:	b11b      	cbz	r3, 800b356 <_dtoa_r+0xb56>
 800b34e:	f10a 0308 	add.w	r3, sl, #8
 800b352:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4650      	mov	r0, sl
 800b358:	b017      	add	sp, #92	@ 0x5c
 800b35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b360:	2b01      	cmp	r3, #1
 800b362:	f77f ae2e 	ble.w	800afc2 <_dtoa_r+0x7c2>
 800b366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b368:	930a      	str	r3, [sp, #40]	@ 0x28
 800b36a:	2001      	movs	r0, #1
 800b36c:	e64d      	b.n	800b00a <_dtoa_r+0x80a>
 800b36e:	f1bb 0f00 	cmp.w	fp, #0
 800b372:	f77f aed9 	ble.w	800b128 <_dtoa_r+0x928>
 800b376:	4656      	mov	r6, sl
 800b378:	4621      	mov	r1, r4
 800b37a:	9803      	ldr	r0, [sp, #12]
 800b37c:	f7ff f9b8 	bl	800a6f0 <quorem>
 800b380:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b384:	f806 3b01 	strb.w	r3, [r6], #1
 800b388:	eba6 020a 	sub.w	r2, r6, sl
 800b38c:	4593      	cmp	fp, r2
 800b38e:	ddb4      	ble.n	800b2fa <_dtoa_r+0xafa>
 800b390:	2300      	movs	r3, #0
 800b392:	220a      	movs	r2, #10
 800b394:	4648      	mov	r0, r9
 800b396:	9903      	ldr	r1, [sp, #12]
 800b398:	f000 f966 	bl	800b668 <__multadd>
 800b39c:	9003      	str	r0, [sp, #12]
 800b39e:	e7eb      	b.n	800b378 <_dtoa_r+0xb78>
 800b3a0:	0800d15d 	.word	0x0800d15d
 800b3a4:	0800d0f8 	.word	0x0800d0f8

0800b3a8 <_free_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	d040      	beq.n	800b432 <_free_r+0x8a>
 800b3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3b4:	1f0c      	subs	r4, r1, #4
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	bfb8      	it	lt
 800b3ba:	18e4      	addlt	r4, r4, r3
 800b3bc:	f000 f8e6 	bl	800b58c <__malloc_lock>
 800b3c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b434 <_free_r+0x8c>)
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	b933      	cbnz	r3, 800b3d4 <_free_r+0x2c>
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	6014      	str	r4, [r2, #0]
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d0:	f000 b8e2 	b.w	800b598 <__malloc_unlock>
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d908      	bls.n	800b3ea <_free_r+0x42>
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	1821      	adds	r1, r4, r0
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf01      	itttt	eq
 800b3e0:	6819      	ldreq	r1, [r3, #0]
 800b3e2:	685b      	ldreq	r3, [r3, #4]
 800b3e4:	1809      	addeq	r1, r1, r0
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	e7ed      	b.n	800b3c6 <_free_r+0x1e>
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b10b      	cbz	r3, 800b3f4 <_free_r+0x4c>
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	d9fa      	bls.n	800b3ea <_free_r+0x42>
 800b3f4:	6811      	ldr	r1, [r2, #0]
 800b3f6:	1850      	adds	r0, r2, r1
 800b3f8:	42a0      	cmp	r0, r4
 800b3fa:	d10b      	bne.n	800b414 <_free_r+0x6c>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	4401      	add	r1, r0
 800b400:	1850      	adds	r0, r2, r1
 800b402:	4283      	cmp	r3, r0
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	d1e0      	bne.n	800b3ca <_free_r+0x22>
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4408      	add	r0, r1
 800b40e:	6010      	str	r0, [r2, #0]
 800b410:	6053      	str	r3, [r2, #4]
 800b412:	e7da      	b.n	800b3ca <_free_r+0x22>
 800b414:	d902      	bls.n	800b41c <_free_r+0x74>
 800b416:	230c      	movs	r3, #12
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	e7d6      	b.n	800b3ca <_free_r+0x22>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	1821      	adds	r1, r4, r0
 800b420:	428b      	cmp	r3, r1
 800b422:	bf01      	itttt	eq
 800b424:	6819      	ldreq	r1, [r3, #0]
 800b426:	685b      	ldreq	r3, [r3, #4]
 800b428:	1809      	addeq	r1, r1, r0
 800b42a:	6021      	streq	r1, [r4, #0]
 800b42c:	6063      	str	r3, [r4, #4]
 800b42e:	6054      	str	r4, [r2, #4]
 800b430:	e7cb      	b.n	800b3ca <_free_r+0x22>
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	200007e8 	.word	0x200007e8

0800b438 <malloc>:
 800b438:	4b02      	ldr	r3, [pc, #8]	@ (800b444 <malloc+0xc>)
 800b43a:	4601      	mov	r1, r0
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	f000 b825 	b.w	800b48c <_malloc_r>
 800b442:	bf00      	nop
 800b444:	20000228 	.word	0x20000228

0800b448 <sbrk_aligned>:
 800b448:	b570      	push	{r4, r5, r6, lr}
 800b44a:	4e0f      	ldr	r6, [pc, #60]	@ (800b488 <sbrk_aligned+0x40>)
 800b44c:	460c      	mov	r4, r1
 800b44e:	6831      	ldr	r1, [r6, #0]
 800b450:	4605      	mov	r5, r0
 800b452:	b911      	cbnz	r1, 800b45a <sbrk_aligned+0x12>
 800b454:	f000 fed0 	bl	800c1f8 <_sbrk_r>
 800b458:	6030      	str	r0, [r6, #0]
 800b45a:	4621      	mov	r1, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 fecb 	bl	800c1f8 <_sbrk_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	d103      	bne.n	800b46e <sbrk_aligned+0x26>
 800b466:	f04f 34ff 	mov.w	r4, #4294967295
 800b46a:	4620      	mov	r0, r4
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
 800b46e:	1cc4      	adds	r4, r0, #3
 800b470:	f024 0403 	bic.w	r4, r4, #3
 800b474:	42a0      	cmp	r0, r4
 800b476:	d0f8      	beq.n	800b46a <sbrk_aligned+0x22>
 800b478:	1a21      	subs	r1, r4, r0
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 febc 	bl	800c1f8 <_sbrk_r>
 800b480:	3001      	adds	r0, #1
 800b482:	d1f2      	bne.n	800b46a <sbrk_aligned+0x22>
 800b484:	e7ef      	b.n	800b466 <sbrk_aligned+0x1e>
 800b486:	bf00      	nop
 800b488:	200007e4 	.word	0x200007e4

0800b48c <_malloc_r>:
 800b48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b490:	1ccd      	adds	r5, r1, #3
 800b492:	f025 0503 	bic.w	r5, r5, #3
 800b496:	3508      	adds	r5, #8
 800b498:	2d0c      	cmp	r5, #12
 800b49a:	bf38      	it	cc
 800b49c:	250c      	movcc	r5, #12
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	db01      	blt.n	800b4a8 <_malloc_r+0x1c>
 800b4a4:	42a9      	cmp	r1, r5
 800b4a6:	d904      	bls.n	800b4b2 <_malloc_r+0x26>
 800b4a8:	230c      	movs	r3, #12
 800b4aa:	6033      	str	r3, [r6, #0]
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b588 <_malloc_r+0xfc>
 800b4b6:	f000 f869 	bl	800b58c <__malloc_lock>
 800b4ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b4be:	461c      	mov	r4, r3
 800b4c0:	bb44      	cbnz	r4, 800b514 <_malloc_r+0x88>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff ffbf 	bl	800b448 <sbrk_aligned>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	d158      	bne.n	800b582 <_malloc_r+0xf6>
 800b4d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b4d4:	4627      	mov	r7, r4
 800b4d6:	2f00      	cmp	r7, #0
 800b4d8:	d143      	bne.n	800b562 <_malloc_r+0xd6>
 800b4da:	2c00      	cmp	r4, #0
 800b4dc:	d04b      	beq.n	800b576 <_malloc_r+0xea>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	eb04 0903 	add.w	r9, r4, r3
 800b4e8:	f000 fe86 	bl	800c1f8 <_sbrk_r>
 800b4ec:	4581      	cmp	r9, r0
 800b4ee:	d142      	bne.n	800b576 <_malloc_r+0xea>
 800b4f0:	6821      	ldr	r1, [r4, #0]
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	1a6d      	subs	r5, r5, r1
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7ff ffa6 	bl	800b448 <sbrk_aligned>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d03a      	beq.n	800b576 <_malloc_r+0xea>
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	442b      	add	r3, r5
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	f8d8 3000 	ldr.w	r3, [r8]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	bb62      	cbnz	r2, 800b568 <_malloc_r+0xdc>
 800b50e:	f8c8 7000 	str.w	r7, [r8]
 800b512:	e00f      	b.n	800b534 <_malloc_r+0xa8>
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	1b52      	subs	r2, r2, r5
 800b518:	d420      	bmi.n	800b55c <_malloc_r+0xd0>
 800b51a:	2a0b      	cmp	r2, #11
 800b51c:	d917      	bls.n	800b54e <_malloc_r+0xc2>
 800b51e:	1961      	adds	r1, r4, r5
 800b520:	42a3      	cmp	r3, r4
 800b522:	6025      	str	r5, [r4, #0]
 800b524:	bf18      	it	ne
 800b526:	6059      	strne	r1, [r3, #4]
 800b528:	6863      	ldr	r3, [r4, #4]
 800b52a:	bf08      	it	eq
 800b52c:	f8c8 1000 	streq.w	r1, [r8]
 800b530:	5162      	str	r2, [r4, r5]
 800b532:	604b      	str	r3, [r1, #4]
 800b534:	4630      	mov	r0, r6
 800b536:	f000 f82f 	bl	800b598 <__malloc_unlock>
 800b53a:	f104 000b 	add.w	r0, r4, #11
 800b53e:	1d23      	adds	r3, r4, #4
 800b540:	f020 0007 	bic.w	r0, r0, #7
 800b544:	1ac2      	subs	r2, r0, r3
 800b546:	bf1c      	itt	ne
 800b548:	1a1b      	subne	r3, r3, r0
 800b54a:	50a3      	strne	r3, [r4, r2]
 800b54c:	e7af      	b.n	800b4ae <_malloc_r+0x22>
 800b54e:	6862      	ldr	r2, [r4, #4]
 800b550:	42a3      	cmp	r3, r4
 800b552:	bf0c      	ite	eq
 800b554:	f8c8 2000 	streq.w	r2, [r8]
 800b558:	605a      	strne	r2, [r3, #4]
 800b55a:	e7eb      	b.n	800b534 <_malloc_r+0xa8>
 800b55c:	4623      	mov	r3, r4
 800b55e:	6864      	ldr	r4, [r4, #4]
 800b560:	e7ae      	b.n	800b4c0 <_malloc_r+0x34>
 800b562:	463c      	mov	r4, r7
 800b564:	687f      	ldr	r7, [r7, #4]
 800b566:	e7b6      	b.n	800b4d6 <_malloc_r+0x4a>
 800b568:	461a      	mov	r2, r3
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d1fb      	bne.n	800b568 <_malloc_r+0xdc>
 800b570:	2300      	movs	r3, #0
 800b572:	6053      	str	r3, [r2, #4]
 800b574:	e7de      	b.n	800b534 <_malloc_r+0xa8>
 800b576:	230c      	movs	r3, #12
 800b578:	4630      	mov	r0, r6
 800b57a:	6033      	str	r3, [r6, #0]
 800b57c:	f000 f80c 	bl	800b598 <__malloc_unlock>
 800b580:	e794      	b.n	800b4ac <_malloc_r+0x20>
 800b582:	6005      	str	r5, [r0, #0]
 800b584:	e7d6      	b.n	800b534 <_malloc_r+0xa8>
 800b586:	bf00      	nop
 800b588:	200007e8 	.word	0x200007e8

0800b58c <__malloc_lock>:
 800b58c:	4801      	ldr	r0, [pc, #4]	@ (800b594 <__malloc_lock+0x8>)
 800b58e:	f7ff b880 	b.w	800a692 <__retarget_lock_acquire_recursive>
 800b592:	bf00      	nop
 800b594:	200007e0 	.word	0x200007e0

0800b598 <__malloc_unlock>:
 800b598:	4801      	ldr	r0, [pc, #4]	@ (800b5a0 <__malloc_unlock+0x8>)
 800b59a:	f7ff b87b 	b.w	800a694 <__retarget_lock_release_recursive>
 800b59e:	bf00      	nop
 800b5a0:	200007e0 	.word	0x200007e0

0800b5a4 <_Balloc>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	69c6      	ldr	r6, [r0, #28]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	b976      	cbnz	r6, 800b5cc <_Balloc+0x28>
 800b5ae:	2010      	movs	r0, #16
 800b5b0:	f7ff ff42 	bl	800b438 <malloc>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	61e0      	str	r0, [r4, #28]
 800b5b8:	b920      	cbnz	r0, 800b5c4 <_Balloc+0x20>
 800b5ba:	216b      	movs	r1, #107	@ 0x6b
 800b5bc:	4b17      	ldr	r3, [pc, #92]	@ (800b61c <_Balloc+0x78>)
 800b5be:	4818      	ldr	r0, [pc, #96]	@ (800b620 <_Balloc+0x7c>)
 800b5c0:	f7ff f878 	bl	800a6b4 <__assert_func>
 800b5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c8:	6006      	str	r6, [r0, #0]
 800b5ca:	60c6      	str	r6, [r0, #12]
 800b5cc:	69e6      	ldr	r6, [r4, #28]
 800b5ce:	68f3      	ldr	r3, [r6, #12]
 800b5d0:	b183      	cbz	r3, 800b5f4 <_Balloc+0x50>
 800b5d2:	69e3      	ldr	r3, [r4, #28]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5da:	b9b8      	cbnz	r0, 800b60c <_Balloc+0x68>
 800b5dc:	2101      	movs	r1, #1
 800b5de:	fa01 f605 	lsl.w	r6, r1, r5
 800b5e2:	1d72      	adds	r2, r6, #5
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	0092      	lsls	r2, r2, #2
 800b5e8:	f000 fe2b 	bl	800c242 <_calloc_r>
 800b5ec:	b160      	cbz	r0, 800b608 <_Balloc+0x64>
 800b5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5f2:	e00e      	b.n	800b612 <_Balloc+0x6e>
 800b5f4:	2221      	movs	r2, #33	@ 0x21
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 fe22 	bl	800c242 <_calloc_r>
 800b5fe:	69e3      	ldr	r3, [r4, #28]
 800b600:	60f0      	str	r0, [r6, #12]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e4      	bne.n	800b5d2 <_Balloc+0x2e>
 800b608:	2000      	movs	r0, #0
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	6802      	ldr	r2, [r0, #0]
 800b60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b612:	2300      	movs	r3, #0
 800b614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b618:	e7f7      	b.n	800b60a <_Balloc+0x66>
 800b61a:	bf00      	nop
 800b61c:	0800d04b 	.word	0x0800d04b
 800b620:	0800d16e 	.word	0x0800d16e

0800b624 <_Bfree>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	69c6      	ldr	r6, [r0, #28]
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	b976      	cbnz	r6, 800b64c <_Bfree+0x28>
 800b62e:	2010      	movs	r0, #16
 800b630:	f7ff ff02 	bl	800b438 <malloc>
 800b634:	4602      	mov	r2, r0
 800b636:	61e8      	str	r0, [r5, #28]
 800b638:	b920      	cbnz	r0, 800b644 <_Bfree+0x20>
 800b63a:	218f      	movs	r1, #143	@ 0x8f
 800b63c:	4b08      	ldr	r3, [pc, #32]	@ (800b660 <_Bfree+0x3c>)
 800b63e:	4809      	ldr	r0, [pc, #36]	@ (800b664 <_Bfree+0x40>)
 800b640:	f7ff f838 	bl	800a6b4 <__assert_func>
 800b644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b648:	6006      	str	r6, [r0, #0]
 800b64a:	60c6      	str	r6, [r0, #12]
 800b64c:	b13c      	cbz	r4, 800b65e <_Bfree+0x3a>
 800b64e:	69eb      	ldr	r3, [r5, #28]
 800b650:	6862      	ldr	r2, [r4, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b658:	6021      	str	r1, [r4, #0]
 800b65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	0800d04b 	.word	0x0800d04b
 800b664:	0800d16e 	.word	0x0800d16e

0800b668 <__multadd>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	4607      	mov	r7, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	461e      	mov	r6, r3
 800b672:	2000      	movs	r0, #0
 800b674:	690d      	ldr	r5, [r1, #16]
 800b676:	f101 0c14 	add.w	ip, r1, #20
 800b67a:	f8dc 3000 	ldr.w	r3, [ip]
 800b67e:	3001      	adds	r0, #1
 800b680:	b299      	uxth	r1, r3
 800b682:	fb02 6101 	mla	r1, r2, r1, r6
 800b686:	0c1e      	lsrs	r6, r3, #16
 800b688:	0c0b      	lsrs	r3, r1, #16
 800b68a:	fb02 3306 	mla	r3, r2, r6, r3
 800b68e:	b289      	uxth	r1, r1
 800b690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b694:	4285      	cmp	r5, r0
 800b696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b69a:	f84c 1b04 	str.w	r1, [ip], #4
 800b69e:	dcec      	bgt.n	800b67a <__multadd+0x12>
 800b6a0:	b30e      	cbz	r6, 800b6e6 <__multadd+0x7e>
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	42ab      	cmp	r3, r5
 800b6a6:	dc19      	bgt.n	800b6dc <__multadd+0x74>
 800b6a8:	6861      	ldr	r1, [r4, #4]
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	f7ff ff79 	bl	800b5a4 <_Balloc>
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	b928      	cbnz	r0, 800b6c2 <__multadd+0x5a>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	21ba      	movs	r1, #186	@ 0xba
 800b6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <__multadd+0x84>)
 800b6bc:	480c      	ldr	r0, [pc, #48]	@ (800b6f0 <__multadd+0x88>)
 800b6be:	f7fe fff9 	bl	800a6b4 <__assert_func>
 800b6c2:	6922      	ldr	r2, [r4, #16]
 800b6c4:	f104 010c 	add.w	r1, r4, #12
 800b6c8:	3202      	adds	r2, #2
 800b6ca:	0092      	lsls	r2, r2, #2
 800b6cc:	300c      	adds	r0, #12
 800b6ce:	f000 fda3 	bl	800c218 <memcpy>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff ffa5 	bl	800b624 <_Bfree>
 800b6da:	4644      	mov	r4, r8
 800b6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	615e      	str	r6, [r3, #20]
 800b6e4:	6125      	str	r5, [r4, #16]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	0800d15d 	.word	0x0800d15d
 800b6f0:	0800d16e 	.word	0x0800d16e

0800b6f4 <__hi0bits>:
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6fa:	bf3a      	itte	cc
 800b6fc:	0403      	lslcc	r3, r0, #16
 800b6fe:	2010      	movcc	r0, #16
 800b700:	2000      	movcs	r0, #0
 800b702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b706:	bf3c      	itt	cc
 800b708:	021b      	lslcc	r3, r3, #8
 800b70a:	3008      	addcc	r0, #8
 800b70c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b710:	bf3c      	itt	cc
 800b712:	011b      	lslcc	r3, r3, #4
 800b714:	3004      	addcc	r0, #4
 800b716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b71a:	bf3c      	itt	cc
 800b71c:	009b      	lslcc	r3, r3, #2
 800b71e:	3002      	addcc	r0, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	db05      	blt.n	800b730 <__hi0bits+0x3c>
 800b724:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b728:	f100 0001 	add.w	r0, r0, #1
 800b72c:	bf08      	it	eq
 800b72e:	2020      	moveq	r0, #32
 800b730:	4770      	bx	lr

0800b732 <__lo0bits>:
 800b732:	6803      	ldr	r3, [r0, #0]
 800b734:	4602      	mov	r2, r0
 800b736:	f013 0007 	ands.w	r0, r3, #7
 800b73a:	d00b      	beq.n	800b754 <__lo0bits+0x22>
 800b73c:	07d9      	lsls	r1, r3, #31
 800b73e:	d421      	bmi.n	800b784 <__lo0bits+0x52>
 800b740:	0798      	lsls	r0, r3, #30
 800b742:	bf49      	itett	mi
 800b744:	085b      	lsrmi	r3, r3, #1
 800b746:	089b      	lsrpl	r3, r3, #2
 800b748:	2001      	movmi	r0, #1
 800b74a:	6013      	strmi	r3, [r2, #0]
 800b74c:	bf5c      	itt	pl
 800b74e:	2002      	movpl	r0, #2
 800b750:	6013      	strpl	r3, [r2, #0]
 800b752:	4770      	bx	lr
 800b754:	b299      	uxth	r1, r3
 800b756:	b909      	cbnz	r1, 800b75c <__lo0bits+0x2a>
 800b758:	2010      	movs	r0, #16
 800b75a:	0c1b      	lsrs	r3, r3, #16
 800b75c:	b2d9      	uxtb	r1, r3
 800b75e:	b909      	cbnz	r1, 800b764 <__lo0bits+0x32>
 800b760:	3008      	adds	r0, #8
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	0719      	lsls	r1, r3, #28
 800b766:	bf04      	itt	eq
 800b768:	091b      	lsreq	r3, r3, #4
 800b76a:	3004      	addeq	r0, #4
 800b76c:	0799      	lsls	r1, r3, #30
 800b76e:	bf04      	itt	eq
 800b770:	089b      	lsreq	r3, r3, #2
 800b772:	3002      	addeq	r0, #2
 800b774:	07d9      	lsls	r1, r3, #31
 800b776:	d403      	bmi.n	800b780 <__lo0bits+0x4e>
 800b778:	085b      	lsrs	r3, r3, #1
 800b77a:	f100 0001 	add.w	r0, r0, #1
 800b77e:	d003      	beq.n	800b788 <__lo0bits+0x56>
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	4770      	bx	lr
 800b784:	2000      	movs	r0, #0
 800b786:	4770      	bx	lr
 800b788:	2020      	movs	r0, #32
 800b78a:	4770      	bx	lr

0800b78c <__i2b>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	460c      	mov	r4, r1
 800b790:	2101      	movs	r1, #1
 800b792:	f7ff ff07 	bl	800b5a4 <_Balloc>
 800b796:	4602      	mov	r2, r0
 800b798:	b928      	cbnz	r0, 800b7a6 <__i2b+0x1a>
 800b79a:	f240 1145 	movw	r1, #325	@ 0x145
 800b79e:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <__i2b+0x24>)
 800b7a0:	4804      	ldr	r0, [pc, #16]	@ (800b7b4 <__i2b+0x28>)
 800b7a2:	f7fe ff87 	bl	800a6b4 <__assert_func>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	6144      	str	r4, [r0, #20]
 800b7aa:	6103      	str	r3, [r0, #16]
 800b7ac:	bd10      	pop	{r4, pc}
 800b7ae:	bf00      	nop
 800b7b0:	0800d15d 	.word	0x0800d15d
 800b7b4:	0800d16e 	.word	0x0800d16e

0800b7b8 <__multiply>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4617      	mov	r7, r2
 800b7be:	690a      	ldr	r2, [r1, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	4689      	mov	r9, r1
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	bfa2      	ittt	ge
 800b7c8:	463b      	movge	r3, r7
 800b7ca:	460f      	movge	r7, r1
 800b7cc:	4699      	movge	r9, r3
 800b7ce:	693d      	ldr	r5, [r7, #16]
 800b7d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	eb05 060a 	add.w	r6, r5, sl
 800b7dc:	42b3      	cmp	r3, r6
 800b7de:	b085      	sub	sp, #20
 800b7e0:	bfb8      	it	lt
 800b7e2:	3101      	addlt	r1, #1
 800b7e4:	f7ff fede 	bl	800b5a4 <_Balloc>
 800b7e8:	b930      	cbnz	r0, 800b7f8 <__multiply+0x40>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7f0:	4b40      	ldr	r3, [pc, #256]	@ (800b8f4 <__multiply+0x13c>)
 800b7f2:	4841      	ldr	r0, [pc, #260]	@ (800b8f8 <__multiply+0x140>)
 800b7f4:	f7fe ff5e 	bl	800a6b4 <__assert_func>
 800b7f8:	f100 0414 	add.w	r4, r0, #20
 800b7fc:	4623      	mov	r3, r4
 800b7fe:	2200      	movs	r2, #0
 800b800:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b804:	4573      	cmp	r3, lr
 800b806:	d320      	bcc.n	800b84a <__multiply+0x92>
 800b808:	f107 0814 	add.w	r8, r7, #20
 800b80c:	f109 0114 	add.w	r1, r9, #20
 800b810:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b814:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b818:	9302      	str	r3, [sp, #8]
 800b81a:	1beb      	subs	r3, r5, r7
 800b81c:	3b15      	subs	r3, #21
 800b81e:	f023 0303 	bic.w	r3, r3, #3
 800b822:	3304      	adds	r3, #4
 800b824:	3715      	adds	r7, #21
 800b826:	42bd      	cmp	r5, r7
 800b828:	bf38      	it	cc
 800b82a:	2304      	movcc	r3, #4
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	9103      	str	r1, [sp, #12]
 800b832:	428b      	cmp	r3, r1
 800b834:	d80c      	bhi.n	800b850 <__multiply+0x98>
 800b836:	2e00      	cmp	r6, #0
 800b838:	dd03      	ble.n	800b842 <__multiply+0x8a>
 800b83a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d055      	beq.n	800b8ee <__multiply+0x136>
 800b842:	6106      	str	r6, [r0, #16]
 800b844:	b005      	add	sp, #20
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84a:	f843 2b04 	str.w	r2, [r3], #4
 800b84e:	e7d9      	b.n	800b804 <__multiply+0x4c>
 800b850:	f8b1 a000 	ldrh.w	sl, [r1]
 800b854:	f1ba 0f00 	cmp.w	sl, #0
 800b858:	d01f      	beq.n	800b89a <__multiply+0xe2>
 800b85a:	46c4      	mov	ip, r8
 800b85c:	46a1      	mov	r9, r4
 800b85e:	2700      	movs	r7, #0
 800b860:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b864:	f8d9 3000 	ldr.w	r3, [r9]
 800b868:	fa1f fb82 	uxth.w	fp, r2
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	fb0a 330b 	mla	r3, sl, fp, r3
 800b872:	443b      	add	r3, r7
 800b874:	f8d9 7000 	ldr.w	r7, [r9]
 800b878:	0c12      	lsrs	r2, r2, #16
 800b87a:	0c3f      	lsrs	r7, r7, #16
 800b87c:	fb0a 7202 	mla	r2, sl, r2, r7
 800b880:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b884:	b29b      	uxth	r3, r3
 800b886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88a:	4565      	cmp	r5, ip
 800b88c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b890:	f849 3b04 	str.w	r3, [r9], #4
 800b894:	d8e4      	bhi.n	800b860 <__multiply+0xa8>
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	50e7      	str	r7, [r4, r3]
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	3104      	adds	r1, #4
 800b89e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b8a2:	f1b9 0f00 	cmp.w	r9, #0
 800b8a6:	d020      	beq.n	800b8ea <__multiply+0x132>
 800b8a8:	4647      	mov	r7, r8
 800b8aa:	46a4      	mov	ip, r4
 800b8ac:	f04f 0a00 	mov.w	sl, #0
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	f8b7 b000 	ldrh.w	fp, [r7]
 800b8b6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	fb09 220b 	mla	r2, r9, fp, r2
 800b8c0:	4452      	add	r2, sl
 800b8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8c6:	f84c 3b04 	str.w	r3, [ip], #4
 800b8ca:	f857 3b04 	ldr.w	r3, [r7], #4
 800b8ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8d2:	f8bc 3000 	ldrh.w	r3, [ip]
 800b8d6:	42bd      	cmp	r5, r7
 800b8d8:	fb09 330a 	mla	r3, r9, sl, r3
 800b8dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b8e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8e4:	d8e5      	bhi.n	800b8b2 <__multiply+0xfa>
 800b8e6:	9a01      	ldr	r2, [sp, #4]
 800b8e8:	50a3      	str	r3, [r4, r2]
 800b8ea:	3404      	adds	r4, #4
 800b8ec:	e79f      	b.n	800b82e <__multiply+0x76>
 800b8ee:	3e01      	subs	r6, #1
 800b8f0:	e7a1      	b.n	800b836 <__multiply+0x7e>
 800b8f2:	bf00      	nop
 800b8f4:	0800d15d 	.word	0x0800d15d
 800b8f8:	0800d16e 	.word	0x0800d16e

0800b8fc <__pow5mult>:
 800b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b900:	4615      	mov	r5, r2
 800b902:	f012 0203 	ands.w	r2, r2, #3
 800b906:	4607      	mov	r7, r0
 800b908:	460e      	mov	r6, r1
 800b90a:	d007      	beq.n	800b91c <__pow5mult+0x20>
 800b90c:	4c25      	ldr	r4, [pc, #148]	@ (800b9a4 <__pow5mult+0xa8>)
 800b90e:	3a01      	subs	r2, #1
 800b910:	2300      	movs	r3, #0
 800b912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b916:	f7ff fea7 	bl	800b668 <__multadd>
 800b91a:	4606      	mov	r6, r0
 800b91c:	10ad      	asrs	r5, r5, #2
 800b91e:	d03d      	beq.n	800b99c <__pow5mult+0xa0>
 800b920:	69fc      	ldr	r4, [r7, #28]
 800b922:	b97c      	cbnz	r4, 800b944 <__pow5mult+0x48>
 800b924:	2010      	movs	r0, #16
 800b926:	f7ff fd87 	bl	800b438 <malloc>
 800b92a:	4602      	mov	r2, r0
 800b92c:	61f8      	str	r0, [r7, #28]
 800b92e:	b928      	cbnz	r0, 800b93c <__pow5mult+0x40>
 800b930:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b934:	4b1c      	ldr	r3, [pc, #112]	@ (800b9a8 <__pow5mult+0xac>)
 800b936:	481d      	ldr	r0, [pc, #116]	@ (800b9ac <__pow5mult+0xb0>)
 800b938:	f7fe febc 	bl	800a6b4 <__assert_func>
 800b93c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b940:	6004      	str	r4, [r0, #0]
 800b942:	60c4      	str	r4, [r0, #12]
 800b944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b94c:	b94c      	cbnz	r4, 800b962 <__pow5mult+0x66>
 800b94e:	f240 2171 	movw	r1, #625	@ 0x271
 800b952:	4638      	mov	r0, r7
 800b954:	f7ff ff1a 	bl	800b78c <__i2b>
 800b958:	2300      	movs	r3, #0
 800b95a:	4604      	mov	r4, r0
 800b95c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b960:	6003      	str	r3, [r0, #0]
 800b962:	f04f 0900 	mov.w	r9, #0
 800b966:	07eb      	lsls	r3, r5, #31
 800b968:	d50a      	bpl.n	800b980 <__pow5mult+0x84>
 800b96a:	4631      	mov	r1, r6
 800b96c:	4622      	mov	r2, r4
 800b96e:	4638      	mov	r0, r7
 800b970:	f7ff ff22 	bl	800b7b8 <__multiply>
 800b974:	4680      	mov	r8, r0
 800b976:	4631      	mov	r1, r6
 800b978:	4638      	mov	r0, r7
 800b97a:	f7ff fe53 	bl	800b624 <_Bfree>
 800b97e:	4646      	mov	r6, r8
 800b980:	106d      	asrs	r5, r5, #1
 800b982:	d00b      	beq.n	800b99c <__pow5mult+0xa0>
 800b984:	6820      	ldr	r0, [r4, #0]
 800b986:	b938      	cbnz	r0, 800b998 <__pow5mult+0x9c>
 800b988:	4622      	mov	r2, r4
 800b98a:	4621      	mov	r1, r4
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff ff13 	bl	800b7b8 <__multiply>
 800b992:	6020      	str	r0, [r4, #0]
 800b994:	f8c0 9000 	str.w	r9, [r0]
 800b998:	4604      	mov	r4, r0
 800b99a:	e7e4      	b.n	800b966 <__pow5mult+0x6a>
 800b99c:	4630      	mov	r0, r6
 800b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0800d1e4 	.word	0x0800d1e4
 800b9a8:	0800d04b 	.word	0x0800d04b
 800b9ac:	0800d16e 	.word	0x0800d16e

0800b9b0 <__lshift>:
 800b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	4691      	mov	r9, r2
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	6849      	ldr	r1, [r1, #4]
 800b9be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9c2:	68a3      	ldr	r3, [r4, #8]
 800b9c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9c8:	f108 0601 	add.w	r6, r8, #1
 800b9cc:	42b3      	cmp	r3, r6
 800b9ce:	db0b      	blt.n	800b9e8 <__lshift+0x38>
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff fde7 	bl	800b5a4 <_Balloc>
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	b948      	cbnz	r0, 800b9ee <__lshift+0x3e>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9e0:	4b27      	ldr	r3, [pc, #156]	@ (800ba80 <__lshift+0xd0>)
 800b9e2:	4828      	ldr	r0, [pc, #160]	@ (800ba84 <__lshift+0xd4>)
 800b9e4:	f7fe fe66 	bl	800a6b4 <__assert_func>
 800b9e8:	3101      	adds	r1, #1
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	e7ee      	b.n	800b9cc <__lshift+0x1c>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f100 0114 	add.w	r1, r0, #20
 800b9f4:	f100 0210 	add.w	r2, r0, #16
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	4553      	cmp	r3, sl
 800b9fc:	db33      	blt.n	800ba66 <__lshift+0xb6>
 800b9fe:	6920      	ldr	r0, [r4, #16]
 800ba00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba04:	f104 0314 	add.w	r3, r4, #20
 800ba08:	f019 091f 	ands.w	r9, r9, #31
 800ba0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba14:	d02b      	beq.n	800ba6e <__lshift+0xbe>
 800ba16:	468a      	mov	sl, r1
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	fa00 f009 	lsl.w	r0, r0, r9
 800ba24:	4310      	orrs	r0, r2
 800ba26:	f84a 0b04 	str.w	r0, [sl], #4
 800ba2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2e:	459c      	cmp	ip, r3
 800ba30:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba34:	d8f3      	bhi.n	800ba1e <__lshift+0x6e>
 800ba36:	ebac 0304 	sub.w	r3, ip, r4
 800ba3a:	3b15      	subs	r3, #21
 800ba3c:	f023 0303 	bic.w	r3, r3, #3
 800ba40:	3304      	adds	r3, #4
 800ba42:	f104 0015 	add.w	r0, r4, #21
 800ba46:	4560      	cmp	r0, ip
 800ba48:	bf88      	it	hi
 800ba4a:	2304      	movhi	r3, #4
 800ba4c:	50ca      	str	r2, [r1, r3]
 800ba4e:	b10a      	cbz	r2, 800ba54 <__lshift+0xa4>
 800ba50:	f108 0602 	add.w	r6, r8, #2
 800ba54:	3e01      	subs	r6, #1
 800ba56:	4638      	mov	r0, r7
 800ba58:	4621      	mov	r1, r4
 800ba5a:	612e      	str	r6, [r5, #16]
 800ba5c:	f7ff fde2 	bl	800b624 <_Bfree>
 800ba60:	4628      	mov	r0, r5
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	e7c5      	b.n	800b9fa <__lshift+0x4a>
 800ba6e:	3904      	subs	r1, #4
 800ba70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba74:	459c      	cmp	ip, r3
 800ba76:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba7a:	d8f9      	bhi.n	800ba70 <__lshift+0xc0>
 800ba7c:	e7ea      	b.n	800ba54 <__lshift+0xa4>
 800ba7e:	bf00      	nop
 800ba80:	0800d15d 	.word	0x0800d15d
 800ba84:	0800d16e 	.word	0x0800d16e

0800ba88 <__mcmp>:
 800ba88:	4603      	mov	r3, r0
 800ba8a:	690a      	ldr	r2, [r1, #16]
 800ba8c:	6900      	ldr	r0, [r0, #16]
 800ba8e:	b530      	push	{r4, r5, lr}
 800ba90:	1a80      	subs	r0, r0, r2
 800ba92:	d10e      	bne.n	800bab2 <__mcmp+0x2a>
 800ba94:	3314      	adds	r3, #20
 800ba96:	3114      	adds	r1, #20
 800ba98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800baa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800baa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800baa8:	4295      	cmp	r5, r2
 800baaa:	d003      	beq.n	800bab4 <__mcmp+0x2c>
 800baac:	d205      	bcs.n	800baba <__mcmp+0x32>
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	bd30      	pop	{r4, r5, pc}
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	d3f3      	bcc.n	800baa0 <__mcmp+0x18>
 800bab8:	e7fb      	b.n	800bab2 <__mcmp+0x2a>
 800baba:	2001      	movs	r0, #1
 800babc:	e7f9      	b.n	800bab2 <__mcmp+0x2a>
	...

0800bac0 <__mdiff>:
 800bac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4689      	mov	r9, r1
 800bac6:	4606      	mov	r6, r0
 800bac8:	4611      	mov	r1, r2
 800baca:	4648      	mov	r0, r9
 800bacc:	4614      	mov	r4, r2
 800bace:	f7ff ffdb 	bl	800ba88 <__mcmp>
 800bad2:	1e05      	subs	r5, r0, #0
 800bad4:	d112      	bne.n	800bafc <__mdiff+0x3c>
 800bad6:	4629      	mov	r1, r5
 800bad8:	4630      	mov	r0, r6
 800bada:	f7ff fd63 	bl	800b5a4 <_Balloc>
 800bade:	4602      	mov	r2, r0
 800bae0:	b928      	cbnz	r0, 800baee <__mdiff+0x2e>
 800bae2:	f240 2137 	movw	r1, #567	@ 0x237
 800bae6:	4b3e      	ldr	r3, [pc, #248]	@ (800bbe0 <__mdiff+0x120>)
 800bae8:	483e      	ldr	r0, [pc, #248]	@ (800bbe4 <__mdiff+0x124>)
 800baea:	f7fe fde3 	bl	800a6b4 <__assert_func>
 800baee:	2301      	movs	r3, #1
 800baf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800baf4:	4610      	mov	r0, r2
 800baf6:	b003      	add	sp, #12
 800baf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafc:	bfbc      	itt	lt
 800bafe:	464b      	movlt	r3, r9
 800bb00:	46a1      	movlt	r9, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb08:	bfba      	itte	lt
 800bb0a:	461c      	movlt	r4, r3
 800bb0c:	2501      	movlt	r5, #1
 800bb0e:	2500      	movge	r5, #0
 800bb10:	f7ff fd48 	bl	800b5a4 <_Balloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	b918      	cbnz	r0, 800bb20 <__mdiff+0x60>
 800bb18:	f240 2145 	movw	r1, #581	@ 0x245
 800bb1c:	4b30      	ldr	r3, [pc, #192]	@ (800bbe0 <__mdiff+0x120>)
 800bb1e:	e7e3      	b.n	800bae8 <__mdiff+0x28>
 800bb20:	f100 0b14 	add.w	fp, r0, #20
 800bb24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb28:	f109 0310 	add.w	r3, r9, #16
 800bb2c:	60c5      	str	r5, [r0, #12]
 800bb2e:	f04f 0c00 	mov.w	ip, #0
 800bb32:	f109 0514 	add.w	r5, r9, #20
 800bb36:	46d9      	mov	r9, fp
 800bb38:	6926      	ldr	r6, [r4, #16]
 800bb3a:	f104 0e14 	add.w	lr, r4, #20
 800bb3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	9b01      	ldr	r3, [sp, #4]
 800bb4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb52:	b281      	uxth	r1, r0
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	fa1f f38a 	uxth.w	r3, sl
 800bb5a:	1a5b      	subs	r3, r3, r1
 800bb5c:	0c00      	lsrs	r0, r0, #16
 800bb5e:	4463      	add	r3, ip
 800bb60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb6e:	4576      	cmp	r6, lr
 800bb70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb74:	f849 3b04 	str.w	r3, [r9], #4
 800bb78:	d8e6      	bhi.n	800bb48 <__mdiff+0x88>
 800bb7a:	1b33      	subs	r3, r6, r4
 800bb7c:	3b15      	subs	r3, #21
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	3415      	adds	r4, #21
 800bb84:	3304      	adds	r3, #4
 800bb86:	42a6      	cmp	r6, r4
 800bb88:	bf38      	it	cc
 800bb8a:	2304      	movcc	r3, #4
 800bb8c:	441d      	add	r5, r3
 800bb8e:	445b      	add	r3, fp
 800bb90:	461e      	mov	r6, r3
 800bb92:	462c      	mov	r4, r5
 800bb94:	4544      	cmp	r4, r8
 800bb96:	d30e      	bcc.n	800bbb6 <__mdiff+0xf6>
 800bb98:	f108 0103 	add.w	r1, r8, #3
 800bb9c:	1b49      	subs	r1, r1, r5
 800bb9e:	f021 0103 	bic.w	r1, r1, #3
 800bba2:	3d03      	subs	r5, #3
 800bba4:	45a8      	cmp	r8, r5
 800bba6:	bf38      	it	cc
 800bba8:	2100      	movcc	r1, #0
 800bbaa:	440b      	add	r3, r1
 800bbac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbb0:	b199      	cbz	r1, 800bbda <__mdiff+0x11a>
 800bbb2:	6117      	str	r7, [r2, #16]
 800bbb4:	e79e      	b.n	800baf4 <__mdiff+0x34>
 800bbb6:	46e6      	mov	lr, ip
 800bbb8:	f854 1b04 	ldr.w	r1, [r4], #4
 800bbbc:	fa1f fc81 	uxth.w	ip, r1
 800bbc0:	44f4      	add	ip, lr
 800bbc2:	0c08      	lsrs	r0, r1, #16
 800bbc4:	4471      	add	r1, lr
 800bbc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbca:	b289      	uxth	r1, r1
 800bbcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbd4:	f846 1b04 	str.w	r1, [r6], #4
 800bbd8:	e7dc      	b.n	800bb94 <__mdiff+0xd4>
 800bbda:	3f01      	subs	r7, #1
 800bbdc:	e7e6      	b.n	800bbac <__mdiff+0xec>
 800bbde:	bf00      	nop
 800bbe0:	0800d15d 	.word	0x0800d15d
 800bbe4:	0800d16e 	.word	0x0800d16e

0800bbe8 <__d2b>:
 800bbe8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bbec:	2101      	movs	r1, #1
 800bbee:	4690      	mov	r8, r2
 800bbf0:	4699      	mov	r9, r3
 800bbf2:	9e08      	ldr	r6, [sp, #32]
 800bbf4:	f7ff fcd6 	bl	800b5a4 <_Balloc>
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	b930      	cbnz	r0, 800bc0a <__d2b+0x22>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc02:	4b23      	ldr	r3, [pc, #140]	@ (800bc90 <__d2b+0xa8>)
 800bc04:	4823      	ldr	r0, [pc, #140]	@ (800bc94 <__d2b+0xac>)
 800bc06:	f7fe fd55 	bl	800a6b4 <__assert_func>
 800bc0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc12:	b10d      	cbz	r5, 800bc18 <__d2b+0x30>
 800bc14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f1b8 0300 	subs.w	r3, r8, #0
 800bc1e:	d024      	beq.n	800bc6a <__d2b+0x82>
 800bc20:	4668      	mov	r0, sp
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	f7ff fd85 	bl	800b732 <__lo0bits>
 800bc28:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc2c:	b1d8      	cbz	r0, 800bc66 <__d2b+0x7e>
 800bc2e:	f1c0 0320 	rsb	r3, r0, #32
 800bc32:	fa02 f303 	lsl.w	r3, r2, r3
 800bc36:	430b      	orrs	r3, r1
 800bc38:	40c2      	lsrs	r2, r0
 800bc3a:	6163      	str	r3, [r4, #20]
 800bc3c:	9201      	str	r2, [sp, #4]
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bf0c      	ite	eq
 800bc44:	2201      	moveq	r2, #1
 800bc46:	2202      	movne	r2, #2
 800bc48:	61a3      	str	r3, [r4, #24]
 800bc4a:	6122      	str	r2, [r4, #16]
 800bc4c:	b1ad      	cbz	r5, 800bc7a <__d2b+0x92>
 800bc4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc52:	4405      	add	r5, r0
 800bc54:	6035      	str	r5, [r6, #0]
 800bc56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5c:	6018      	str	r0, [r3, #0]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	b002      	add	sp, #8
 800bc62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bc66:	6161      	str	r1, [r4, #20]
 800bc68:	e7e9      	b.n	800bc3e <__d2b+0x56>
 800bc6a:	a801      	add	r0, sp, #4
 800bc6c:	f7ff fd61 	bl	800b732 <__lo0bits>
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	6163      	str	r3, [r4, #20]
 800bc76:	3020      	adds	r0, #32
 800bc78:	e7e7      	b.n	800bc4a <__d2b+0x62>
 800bc7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc82:	6030      	str	r0, [r6, #0]
 800bc84:	6918      	ldr	r0, [r3, #16]
 800bc86:	f7ff fd35 	bl	800b6f4 <__hi0bits>
 800bc8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc8e:	e7e4      	b.n	800bc5a <__d2b+0x72>
 800bc90:	0800d15d 	.word	0x0800d15d
 800bc94:	0800d16e 	.word	0x0800d16e

0800bc98 <__ssputs_r>:
 800bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9c:	461f      	mov	r7, r3
 800bc9e:	688e      	ldr	r6, [r1, #8]
 800bca0:	4682      	mov	sl, r0
 800bca2:	42be      	cmp	r6, r7
 800bca4:	460c      	mov	r4, r1
 800bca6:	4690      	mov	r8, r2
 800bca8:	680b      	ldr	r3, [r1, #0]
 800bcaa:	d82d      	bhi.n	800bd08 <__ssputs_r+0x70>
 800bcac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bcb4:	d026      	beq.n	800bd04 <__ssputs_r+0x6c>
 800bcb6:	6965      	ldr	r5, [r4, #20]
 800bcb8:	6909      	ldr	r1, [r1, #16]
 800bcba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcbe:	eba3 0901 	sub.w	r9, r3, r1
 800bcc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcc6:	1c7b      	adds	r3, r7, #1
 800bcc8:	444b      	add	r3, r9
 800bcca:	106d      	asrs	r5, r5, #1
 800bccc:	429d      	cmp	r5, r3
 800bcce:	bf38      	it	cc
 800bcd0:	461d      	movcc	r5, r3
 800bcd2:	0553      	lsls	r3, r2, #21
 800bcd4:	d527      	bpl.n	800bd26 <__ssputs_r+0x8e>
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	f7ff fbd8 	bl	800b48c <_malloc_r>
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b360      	cbz	r0, 800bd3a <__ssputs_r+0xa2>
 800bce0:	464a      	mov	r2, r9
 800bce2:	6921      	ldr	r1, [r4, #16]
 800bce4:	f000 fa98 	bl	800c218 <memcpy>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	6126      	str	r6, [r4, #16]
 800bcf6:	444e      	add	r6, r9
 800bcf8:	6026      	str	r6, [r4, #0]
 800bcfa:	463e      	mov	r6, r7
 800bcfc:	6165      	str	r5, [r4, #20]
 800bcfe:	eba5 0509 	sub.w	r5, r5, r9
 800bd02:	60a5      	str	r5, [r4, #8]
 800bd04:	42be      	cmp	r6, r7
 800bd06:	d900      	bls.n	800bd0a <__ssputs_r+0x72>
 800bd08:	463e      	mov	r6, r7
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	4641      	mov	r1, r8
 800bd0e:	6820      	ldr	r0, [r4, #0]
 800bd10:	f000 fa35 	bl	800c17e <memmove>
 800bd14:	2000      	movs	r0, #0
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	1b9b      	subs	r3, r3, r6
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	4433      	add	r3, r6
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd26:	462a      	mov	r2, r5
 800bd28:	f000 fab1 	bl	800c28e <_realloc_r>
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d1e0      	bne.n	800bcf4 <__ssputs_r+0x5c>
 800bd32:	4650      	mov	r0, sl
 800bd34:	6921      	ldr	r1, [r4, #16]
 800bd36:	f7ff fb37 	bl	800b3a8 <_free_r>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	f8ca 3000 	str.w	r3, [sl]
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	f04f 30ff 	mov.w	r0, #4294967295
 800bd46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	e7e9      	b.n	800bd22 <__ssputs_r+0x8a>
	...

0800bd50 <_svfiprintf_r>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4698      	mov	r8, r3
 800bd56:	898b      	ldrh	r3, [r1, #12]
 800bd58:	4607      	mov	r7, r0
 800bd5a:	061b      	lsls	r3, r3, #24
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	4614      	mov	r4, r2
 800bd60:	b09d      	sub	sp, #116	@ 0x74
 800bd62:	d510      	bpl.n	800bd86 <_svfiprintf_r+0x36>
 800bd64:	690b      	ldr	r3, [r1, #16]
 800bd66:	b973      	cbnz	r3, 800bd86 <_svfiprintf_r+0x36>
 800bd68:	2140      	movs	r1, #64	@ 0x40
 800bd6a:	f7ff fb8f 	bl	800b48c <_malloc_r>
 800bd6e:	6028      	str	r0, [r5, #0]
 800bd70:	6128      	str	r0, [r5, #16]
 800bd72:	b930      	cbnz	r0, 800bd82 <_svfiprintf_r+0x32>
 800bd74:	230c      	movs	r3, #12
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7c:	b01d      	add	sp, #116	@ 0x74
 800bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	2340      	movs	r3, #64	@ 0x40
 800bd84:	616b      	str	r3, [r5, #20]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8a:	2320      	movs	r3, #32
 800bd8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd90:	2330      	movs	r3, #48	@ 0x30
 800bd92:	f04f 0901 	mov.w	r9, #1
 800bd96:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bf34 <_svfiprintf_r+0x1e4>
 800bd9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bda2:	4623      	mov	r3, r4
 800bda4:	469a      	mov	sl, r3
 800bda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdaa:	b10a      	cbz	r2, 800bdb0 <_svfiprintf_r+0x60>
 800bdac:	2a25      	cmp	r2, #37	@ 0x25
 800bdae:	d1f9      	bne.n	800bda4 <_svfiprintf_r+0x54>
 800bdb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bdb4:	d00b      	beq.n	800bdce <_svfiprintf_r+0x7e>
 800bdb6:	465b      	mov	r3, fp
 800bdb8:	4622      	mov	r2, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	f7ff ff6b 	bl	800bc98 <__ssputs_r>
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	f000 80a7 	beq.w	800bf16 <_svfiprintf_r+0x1c6>
 800bdc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdca:	445a      	add	r2, fp
 800bdcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdce:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 809f 	beq.w	800bf16 <_svfiprintf_r+0x1c6>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bde2:	f10a 0a01 	add.w	sl, sl, #1
 800bde6:	9304      	str	r3, [sp, #16]
 800bde8:	9307      	str	r3, [sp, #28]
 800bdea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdee:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdf0:	4654      	mov	r4, sl
 800bdf2:	2205      	movs	r2, #5
 800bdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf8:	484e      	ldr	r0, [pc, #312]	@ (800bf34 <_svfiprintf_r+0x1e4>)
 800bdfa:	f7fe fc4c 	bl	800a696 <memchr>
 800bdfe:	9a04      	ldr	r2, [sp, #16]
 800be00:	b9d8      	cbnz	r0, 800be3a <_svfiprintf_r+0xea>
 800be02:	06d0      	lsls	r0, r2, #27
 800be04:	bf44      	itt	mi
 800be06:	2320      	movmi	r3, #32
 800be08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be0c:	0711      	lsls	r1, r2, #28
 800be0e:	bf44      	itt	mi
 800be10:	232b      	movmi	r3, #43	@ 0x2b
 800be12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be16:	f89a 3000 	ldrb.w	r3, [sl]
 800be1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be1c:	d015      	beq.n	800be4a <_svfiprintf_r+0xfa>
 800be1e:	4654      	mov	r4, sl
 800be20:	2000      	movs	r0, #0
 800be22:	f04f 0c0a 	mov.w	ip, #10
 800be26:	9a07      	ldr	r2, [sp, #28]
 800be28:	4621      	mov	r1, r4
 800be2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be2e:	3b30      	subs	r3, #48	@ 0x30
 800be30:	2b09      	cmp	r3, #9
 800be32:	d94b      	bls.n	800becc <_svfiprintf_r+0x17c>
 800be34:	b1b0      	cbz	r0, 800be64 <_svfiprintf_r+0x114>
 800be36:	9207      	str	r2, [sp, #28]
 800be38:	e014      	b.n	800be64 <_svfiprintf_r+0x114>
 800be3a:	eba0 0308 	sub.w	r3, r0, r8
 800be3e:	fa09 f303 	lsl.w	r3, r9, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	46a2      	mov	sl, r4
 800be46:	9304      	str	r3, [sp, #16]
 800be48:	e7d2      	b.n	800bdf0 <_svfiprintf_r+0xa0>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	1d19      	adds	r1, r3, #4
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	9103      	str	r1, [sp, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	bfbb      	ittet	lt
 800be56:	425b      	neglt	r3, r3
 800be58:	f042 0202 	orrlt.w	r2, r2, #2
 800be5c:	9307      	strge	r3, [sp, #28]
 800be5e:	9307      	strlt	r3, [sp, #28]
 800be60:	bfb8      	it	lt
 800be62:	9204      	strlt	r2, [sp, #16]
 800be64:	7823      	ldrb	r3, [r4, #0]
 800be66:	2b2e      	cmp	r3, #46	@ 0x2e
 800be68:	d10a      	bne.n	800be80 <_svfiprintf_r+0x130>
 800be6a:	7863      	ldrb	r3, [r4, #1]
 800be6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be6e:	d132      	bne.n	800bed6 <_svfiprintf_r+0x186>
 800be70:	9b03      	ldr	r3, [sp, #12]
 800be72:	3402      	adds	r4, #2
 800be74:	1d1a      	adds	r2, r3, #4
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	9203      	str	r2, [sp, #12]
 800be7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bf38 <_svfiprintf_r+0x1e8>
 800be84:	2203      	movs	r2, #3
 800be86:	4650      	mov	r0, sl
 800be88:	7821      	ldrb	r1, [r4, #0]
 800be8a:	f7fe fc04 	bl	800a696 <memchr>
 800be8e:	b138      	cbz	r0, 800bea0 <_svfiprintf_r+0x150>
 800be90:	2240      	movs	r2, #64	@ 0x40
 800be92:	9b04      	ldr	r3, [sp, #16]
 800be94:	eba0 000a 	sub.w	r0, r0, sl
 800be98:	4082      	lsls	r2, r0
 800be9a:	4313      	orrs	r3, r2
 800be9c:	3401      	adds	r4, #1
 800be9e:	9304      	str	r3, [sp, #16]
 800bea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea4:	2206      	movs	r2, #6
 800bea6:	4825      	ldr	r0, [pc, #148]	@ (800bf3c <_svfiprintf_r+0x1ec>)
 800bea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800beac:	f7fe fbf3 	bl	800a696 <memchr>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d036      	beq.n	800bf22 <_svfiprintf_r+0x1d2>
 800beb4:	4b22      	ldr	r3, [pc, #136]	@ (800bf40 <_svfiprintf_r+0x1f0>)
 800beb6:	bb1b      	cbnz	r3, 800bf00 <_svfiprintf_r+0x1b0>
 800beb8:	9b03      	ldr	r3, [sp, #12]
 800beba:	3307      	adds	r3, #7
 800bebc:	f023 0307 	bic.w	r3, r3, #7
 800bec0:	3308      	adds	r3, #8
 800bec2:	9303      	str	r3, [sp, #12]
 800bec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec6:	4433      	add	r3, r6
 800bec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beca:	e76a      	b.n	800bda2 <_svfiprintf_r+0x52>
 800becc:	460c      	mov	r4, r1
 800bece:	2001      	movs	r0, #1
 800bed0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bed4:	e7a8      	b.n	800be28 <_svfiprintf_r+0xd8>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f04f 0c0a 	mov.w	ip, #10
 800bedc:	4619      	mov	r1, r3
 800bede:	3401      	adds	r4, #1
 800bee0:	9305      	str	r3, [sp, #20]
 800bee2:	4620      	mov	r0, r4
 800bee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee8:	3a30      	subs	r2, #48	@ 0x30
 800beea:	2a09      	cmp	r2, #9
 800beec:	d903      	bls.n	800bef6 <_svfiprintf_r+0x1a6>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0c6      	beq.n	800be80 <_svfiprintf_r+0x130>
 800bef2:	9105      	str	r1, [sp, #20]
 800bef4:	e7c4      	b.n	800be80 <_svfiprintf_r+0x130>
 800bef6:	4604      	mov	r4, r0
 800bef8:	2301      	movs	r3, #1
 800befa:	fb0c 2101 	mla	r1, ip, r1, r2
 800befe:	e7f0      	b.n	800bee2 <_svfiprintf_r+0x192>
 800bf00:	ab03      	add	r3, sp, #12
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	462a      	mov	r2, r5
 800bf06:	4638      	mov	r0, r7
 800bf08:	4b0e      	ldr	r3, [pc, #56]	@ (800bf44 <_svfiprintf_r+0x1f4>)
 800bf0a:	a904      	add	r1, sp, #16
 800bf0c:	f7fd fd12 	bl	8009934 <_printf_float>
 800bf10:	1c42      	adds	r2, r0, #1
 800bf12:	4606      	mov	r6, r0
 800bf14:	d1d6      	bne.n	800bec4 <_svfiprintf_r+0x174>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	065b      	lsls	r3, r3, #25
 800bf1a:	f53f af2d 	bmi.w	800bd78 <_svfiprintf_r+0x28>
 800bf1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf20:	e72c      	b.n	800bd7c <_svfiprintf_r+0x2c>
 800bf22:	ab03      	add	r3, sp, #12
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	462a      	mov	r2, r5
 800bf28:	4638      	mov	r0, r7
 800bf2a:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <_svfiprintf_r+0x1f4>)
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	f7fd ff9f 	bl	8009e70 <_printf_i>
 800bf32:	e7ed      	b.n	800bf10 <_svfiprintf_r+0x1c0>
 800bf34:	0800d1c7 	.word	0x0800d1c7
 800bf38:	0800d1cd 	.word	0x0800d1cd
 800bf3c:	0800d1d1 	.word	0x0800d1d1
 800bf40:	08009935 	.word	0x08009935
 800bf44:	0800bc99 	.word	0x0800bc99

0800bf48 <__sflush_r>:
 800bf48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	0716      	lsls	r6, r2, #28
 800bf50:	4605      	mov	r5, r0
 800bf52:	460c      	mov	r4, r1
 800bf54:	d454      	bmi.n	800c000 <__sflush_r+0xb8>
 800bf56:	684b      	ldr	r3, [r1, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dc02      	bgt.n	800bf62 <__sflush_r+0x1a>
 800bf5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dd48      	ble.n	800bff4 <__sflush_r+0xac>
 800bf62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf64:	2e00      	cmp	r6, #0
 800bf66:	d045      	beq.n	800bff4 <__sflush_r+0xac>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf6e:	682f      	ldr	r7, [r5, #0]
 800bf70:	6a21      	ldr	r1, [r4, #32]
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	d030      	beq.n	800bfd8 <__sflush_r+0x90>
 800bf76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	0759      	lsls	r1, r3, #29
 800bf7c:	d505      	bpl.n	800bf8a <__sflush_r+0x42>
 800bf7e:	6863      	ldr	r3, [r4, #4]
 800bf80:	1ad2      	subs	r2, r2, r3
 800bf82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf84:	b10b      	cbz	r3, 800bf8a <__sflush_r+0x42>
 800bf86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf88:	1ad2      	subs	r2, r2, r3
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf90:	6a21      	ldr	r1, [r4, #32]
 800bf92:	47b0      	blx	r6
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	d106      	bne.n	800bfa8 <__sflush_r+0x60>
 800bf9a:	6829      	ldr	r1, [r5, #0]
 800bf9c:	291d      	cmp	r1, #29
 800bf9e:	d82b      	bhi.n	800bff8 <__sflush_r+0xb0>
 800bfa0:	4a28      	ldr	r2, [pc, #160]	@ (800c044 <__sflush_r+0xfc>)
 800bfa2:	40ca      	lsrs	r2, r1
 800bfa4:	07d6      	lsls	r6, r2, #31
 800bfa6:	d527      	bpl.n	800bff8 <__sflush_r+0xb0>
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	6062      	str	r2, [r4, #4]
 800bfac:	6922      	ldr	r2, [r4, #16]
 800bfae:	04d9      	lsls	r1, r3, #19
 800bfb0:	6022      	str	r2, [r4, #0]
 800bfb2:	d504      	bpl.n	800bfbe <__sflush_r+0x76>
 800bfb4:	1c42      	adds	r2, r0, #1
 800bfb6:	d101      	bne.n	800bfbc <__sflush_r+0x74>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b903      	cbnz	r3, 800bfbe <__sflush_r+0x76>
 800bfbc:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfc0:	602f      	str	r7, [r5, #0]
 800bfc2:	b1b9      	cbz	r1, 800bff4 <__sflush_r+0xac>
 800bfc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfc8:	4299      	cmp	r1, r3
 800bfca:	d002      	beq.n	800bfd2 <__sflush_r+0x8a>
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f7ff f9eb 	bl	800b3a8 <_free_r>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfd6:	e00d      	b.n	800bff4 <__sflush_r+0xac>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4628      	mov	r0, r5
 800bfdc:	47b0      	blx	r6
 800bfde:	4602      	mov	r2, r0
 800bfe0:	1c50      	adds	r0, r2, #1
 800bfe2:	d1c9      	bne.n	800bf78 <__sflush_r+0x30>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0c6      	beq.n	800bf78 <__sflush_r+0x30>
 800bfea:	2b1d      	cmp	r3, #29
 800bfec:	d001      	beq.n	800bff2 <__sflush_r+0xaa>
 800bfee:	2b16      	cmp	r3, #22
 800bff0:	d11d      	bne.n	800c02e <__sflush_r+0xe6>
 800bff2:	602f      	str	r7, [r5, #0]
 800bff4:	2000      	movs	r0, #0
 800bff6:	e021      	b.n	800c03c <__sflush_r+0xf4>
 800bff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bffc:	b21b      	sxth	r3, r3
 800bffe:	e01a      	b.n	800c036 <__sflush_r+0xee>
 800c000:	690f      	ldr	r7, [r1, #16]
 800c002:	2f00      	cmp	r7, #0
 800c004:	d0f6      	beq.n	800bff4 <__sflush_r+0xac>
 800c006:	0793      	lsls	r3, r2, #30
 800c008:	bf18      	it	ne
 800c00a:	2300      	movne	r3, #0
 800c00c:	680e      	ldr	r6, [r1, #0]
 800c00e:	bf08      	it	eq
 800c010:	694b      	ldreq	r3, [r1, #20]
 800c012:	1bf6      	subs	r6, r6, r7
 800c014:	600f      	str	r7, [r1, #0]
 800c016:	608b      	str	r3, [r1, #8]
 800c018:	2e00      	cmp	r6, #0
 800c01a:	ddeb      	ble.n	800bff4 <__sflush_r+0xac>
 800c01c:	4633      	mov	r3, r6
 800c01e:	463a      	mov	r2, r7
 800c020:	4628      	mov	r0, r5
 800c022:	6a21      	ldr	r1, [r4, #32]
 800c024:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c028:	47e0      	blx	ip
 800c02a:	2800      	cmp	r0, #0
 800c02c:	dc07      	bgt.n	800c03e <__sflush_r+0xf6>
 800c02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c03e:	4407      	add	r7, r0
 800c040:	1a36      	subs	r6, r6, r0
 800c042:	e7e9      	b.n	800c018 <__sflush_r+0xd0>
 800c044:	20400001 	.word	0x20400001

0800c048 <_fflush_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	690b      	ldr	r3, [r1, #16]
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	b913      	cbnz	r3, 800c058 <_fflush_r+0x10>
 800c052:	2500      	movs	r5, #0
 800c054:	4628      	mov	r0, r5
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	b118      	cbz	r0, 800c062 <_fflush_r+0x1a>
 800c05a:	6a03      	ldr	r3, [r0, #32]
 800c05c:	b90b      	cbnz	r3, 800c062 <_fflush_r+0x1a>
 800c05e:	f7fe f8b1 	bl	800a1c4 <__sinit>
 800c062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d0f3      	beq.n	800c052 <_fflush_r+0xa>
 800c06a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c06c:	07d0      	lsls	r0, r2, #31
 800c06e:	d404      	bmi.n	800c07a <_fflush_r+0x32>
 800c070:	0599      	lsls	r1, r3, #22
 800c072:	d402      	bmi.n	800c07a <_fflush_r+0x32>
 800c074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c076:	f7fe fb0c 	bl	800a692 <__retarget_lock_acquire_recursive>
 800c07a:	4628      	mov	r0, r5
 800c07c:	4621      	mov	r1, r4
 800c07e:	f7ff ff63 	bl	800bf48 <__sflush_r>
 800c082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c084:	4605      	mov	r5, r0
 800c086:	07da      	lsls	r2, r3, #31
 800c088:	d4e4      	bmi.n	800c054 <_fflush_r+0xc>
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	059b      	lsls	r3, r3, #22
 800c08e:	d4e1      	bmi.n	800c054 <_fflush_r+0xc>
 800c090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c092:	f7fe faff 	bl	800a694 <__retarget_lock_release_recursive>
 800c096:	e7dd      	b.n	800c054 <_fflush_r+0xc>

0800c098 <fiprintf>:
 800c098:	b40e      	push	{r1, r2, r3}
 800c09a:	b503      	push	{r0, r1, lr}
 800c09c:	4601      	mov	r1, r0
 800c09e:	ab03      	add	r3, sp, #12
 800c0a0:	4805      	ldr	r0, [pc, #20]	@ (800c0b8 <fiprintf+0x20>)
 800c0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a6:	6800      	ldr	r0, [r0, #0]
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	f000 f953 	bl	800c354 <_vfiprintf_r>
 800c0ae:	b002      	add	sp, #8
 800c0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b4:	b003      	add	sp, #12
 800c0b6:	4770      	bx	lr
 800c0b8:	20000228 	.word	0x20000228

0800c0bc <__swhatbuf_r>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	460c      	mov	r4, r1
 800c0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c4:	4615      	mov	r5, r2
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	461e      	mov	r6, r3
 800c0ca:	b096      	sub	sp, #88	@ 0x58
 800c0cc:	da0c      	bge.n	800c0e8 <__swhatbuf_r+0x2c>
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0d6:	bf14      	ite	ne
 800c0d8:	2340      	movne	r3, #64	@ 0x40
 800c0da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0de:	2000      	movs	r0, #0
 800c0e0:	6031      	str	r1, [r6, #0]
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	b016      	add	sp, #88	@ 0x58
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	466a      	mov	r2, sp
 800c0ea:	f000 f863 	bl	800c1b4 <_fstat_r>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	dbed      	blt.n	800c0ce <__swhatbuf_r+0x12>
 800c0f2:	9901      	ldr	r1, [sp, #4]
 800c0f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0fc:	4259      	negs	r1, r3
 800c0fe:	4159      	adcs	r1, r3
 800c100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c104:	e7eb      	b.n	800c0de <__swhatbuf_r+0x22>

0800c106 <__smakebuf_r>:
 800c106:	898b      	ldrh	r3, [r1, #12]
 800c108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c10a:	079d      	lsls	r5, r3, #30
 800c10c:	4606      	mov	r6, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	d507      	bpl.n	800c122 <__smakebuf_r+0x1c>
 800c112:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	6123      	str	r3, [r4, #16]
 800c11a:	2301      	movs	r3, #1
 800c11c:	6163      	str	r3, [r4, #20]
 800c11e:	b003      	add	sp, #12
 800c120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c122:	466a      	mov	r2, sp
 800c124:	ab01      	add	r3, sp, #4
 800c126:	f7ff ffc9 	bl	800c0bc <__swhatbuf_r>
 800c12a:	9f00      	ldr	r7, [sp, #0]
 800c12c:	4605      	mov	r5, r0
 800c12e:	4639      	mov	r1, r7
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff f9ab 	bl	800b48c <_malloc_r>
 800c136:	b948      	cbnz	r0, 800c14c <__smakebuf_r+0x46>
 800c138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13c:	059a      	lsls	r2, r3, #22
 800c13e:	d4ee      	bmi.n	800c11e <__smakebuf_r+0x18>
 800c140:	f023 0303 	bic.w	r3, r3, #3
 800c144:	f043 0302 	orr.w	r3, r3, #2
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7e2      	b.n	800c112 <__smakebuf_r+0xc>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	6020      	str	r0, [r4, #0]
 800c15c:	b15b      	cbz	r3, 800c176 <__smakebuf_r+0x70>
 800c15e:	4630      	mov	r0, r6
 800c160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c164:	f000 f838 	bl	800c1d8 <_isatty_r>
 800c168:	b128      	cbz	r0, 800c176 <__smakebuf_r+0x70>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f023 0303 	bic.w	r3, r3, #3
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	431d      	orrs	r5, r3
 800c17a:	81a5      	strh	r5, [r4, #12]
 800c17c:	e7cf      	b.n	800c11e <__smakebuf_r+0x18>

0800c17e <memmove>:
 800c17e:	4288      	cmp	r0, r1
 800c180:	b510      	push	{r4, lr}
 800c182:	eb01 0402 	add.w	r4, r1, r2
 800c186:	d902      	bls.n	800c18e <memmove+0x10>
 800c188:	4284      	cmp	r4, r0
 800c18a:	4623      	mov	r3, r4
 800c18c:	d807      	bhi.n	800c19e <memmove+0x20>
 800c18e:	1e43      	subs	r3, r0, #1
 800c190:	42a1      	cmp	r1, r4
 800c192:	d008      	beq.n	800c1a6 <memmove+0x28>
 800c194:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c198:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19c:	e7f8      	b.n	800c190 <memmove+0x12>
 800c19e:	4601      	mov	r1, r0
 800c1a0:	4402      	add	r2, r0
 800c1a2:	428a      	cmp	r2, r1
 800c1a4:	d100      	bne.n	800c1a8 <memmove+0x2a>
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1b0:	e7f7      	b.n	800c1a2 <memmove+0x24>
	...

0800c1b4 <_fstat_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	4d06      	ldr	r5, [pc, #24]	@ (800c1d4 <_fstat_r+0x20>)
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	4611      	mov	r1, r2
 800c1c0:	602b      	str	r3, [r5, #0]
 800c1c2:	f7f7 fd51 	bl	8003c68 <_fstat>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d102      	bne.n	800c1d0 <_fstat_r+0x1c>
 800c1ca:	682b      	ldr	r3, [r5, #0]
 800c1cc:	b103      	cbz	r3, 800c1d0 <_fstat_r+0x1c>
 800c1ce:	6023      	str	r3, [r4, #0]
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	bf00      	nop
 800c1d4:	200007dc 	.word	0x200007dc

0800c1d8 <_isatty_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4d05      	ldr	r5, [pc, #20]	@ (800c1f4 <_isatty_r+0x1c>)
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	602b      	str	r3, [r5, #0]
 800c1e4:	f7f7 fd4f 	bl	8003c86 <_isatty>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_isatty_r+0x1a>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_isatty_r+0x1a>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	200007dc 	.word	0x200007dc

0800c1f8 <_sbrk_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	4d05      	ldr	r5, [pc, #20]	@ (800c214 <_sbrk_r+0x1c>)
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	f7f7 fd56 	bl	8003cb4 <_sbrk>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_sbrk_r+0x1a>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_sbrk_r+0x1a>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	200007dc 	.word	0x200007dc

0800c218 <memcpy>:
 800c218:	440a      	add	r2, r1
 800c21a:	4291      	cmp	r1, r2
 800c21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c220:	d100      	bne.n	800c224 <memcpy+0xc>
 800c222:	4770      	bx	lr
 800c224:	b510      	push	{r4, lr}
 800c226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22a:	4291      	cmp	r1, r2
 800c22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c230:	d1f9      	bne.n	800c226 <memcpy+0xe>
 800c232:	bd10      	pop	{r4, pc}

0800c234 <abort>:
 800c234:	2006      	movs	r0, #6
 800c236:	b508      	push	{r3, lr}
 800c238:	f000 f9cc 	bl	800c5d4 <raise>
 800c23c:	2001      	movs	r0, #1
 800c23e:	f7f7 fcc4 	bl	8003bca <_exit>

0800c242 <_calloc_r>:
 800c242:	b570      	push	{r4, r5, r6, lr}
 800c244:	fba1 5402 	umull	r5, r4, r1, r2
 800c248:	b934      	cbnz	r4, 800c258 <_calloc_r+0x16>
 800c24a:	4629      	mov	r1, r5
 800c24c:	f7ff f91e 	bl	800b48c <_malloc_r>
 800c250:	4606      	mov	r6, r0
 800c252:	b928      	cbnz	r0, 800c260 <_calloc_r+0x1e>
 800c254:	4630      	mov	r0, r6
 800c256:	bd70      	pop	{r4, r5, r6, pc}
 800c258:	220c      	movs	r2, #12
 800c25a:	2600      	movs	r6, #0
 800c25c:	6002      	str	r2, [r0, #0]
 800c25e:	e7f9      	b.n	800c254 <_calloc_r+0x12>
 800c260:	462a      	mov	r2, r5
 800c262:	4621      	mov	r1, r4
 800c264:	f7fe f93c 	bl	800a4e0 <memset>
 800c268:	e7f4      	b.n	800c254 <_calloc_r+0x12>

0800c26a <__ascii_mbtowc>:
 800c26a:	b082      	sub	sp, #8
 800c26c:	b901      	cbnz	r1, 800c270 <__ascii_mbtowc+0x6>
 800c26e:	a901      	add	r1, sp, #4
 800c270:	b142      	cbz	r2, 800c284 <__ascii_mbtowc+0x1a>
 800c272:	b14b      	cbz	r3, 800c288 <__ascii_mbtowc+0x1e>
 800c274:	7813      	ldrb	r3, [r2, #0]
 800c276:	600b      	str	r3, [r1, #0]
 800c278:	7812      	ldrb	r2, [r2, #0]
 800c27a:	1e10      	subs	r0, r2, #0
 800c27c:	bf18      	it	ne
 800c27e:	2001      	movne	r0, #1
 800c280:	b002      	add	sp, #8
 800c282:	4770      	bx	lr
 800c284:	4610      	mov	r0, r2
 800c286:	e7fb      	b.n	800c280 <__ascii_mbtowc+0x16>
 800c288:	f06f 0001 	mvn.w	r0, #1
 800c28c:	e7f8      	b.n	800c280 <__ascii_mbtowc+0x16>

0800c28e <_realloc_r>:
 800c28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c292:	4607      	mov	r7, r0
 800c294:	4614      	mov	r4, r2
 800c296:	460d      	mov	r5, r1
 800c298:	b921      	cbnz	r1, 800c2a4 <_realloc_r+0x16>
 800c29a:	4611      	mov	r1, r2
 800c29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a0:	f7ff b8f4 	b.w	800b48c <_malloc_r>
 800c2a4:	b92a      	cbnz	r2, 800c2b2 <_realloc_r+0x24>
 800c2a6:	f7ff f87f 	bl	800b3a8 <_free_r>
 800c2aa:	4625      	mov	r5, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b2:	f000 f9ab 	bl	800c60c <_malloc_usable_size_r>
 800c2b6:	4284      	cmp	r4, r0
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	d802      	bhi.n	800c2c2 <_realloc_r+0x34>
 800c2bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2c0:	d8f4      	bhi.n	800c2ac <_realloc_r+0x1e>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	f7ff f8e1 	bl	800b48c <_malloc_r>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	b908      	cbnz	r0, 800c2d2 <_realloc_r+0x44>
 800c2ce:	4645      	mov	r5, r8
 800c2d0:	e7ec      	b.n	800c2ac <_realloc_r+0x1e>
 800c2d2:	42b4      	cmp	r4, r6
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	bf28      	it	cs
 800c2da:	4632      	movcs	r2, r6
 800c2dc:	f7ff ff9c 	bl	800c218 <memcpy>
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	f7ff f860 	bl	800b3a8 <_free_r>
 800c2e8:	e7f1      	b.n	800c2ce <_realloc_r+0x40>

0800c2ea <__ascii_wctomb>:
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	b141      	cbz	r1, 800c302 <__ascii_wctomb+0x18>
 800c2f0:	2aff      	cmp	r2, #255	@ 0xff
 800c2f2:	d904      	bls.n	800c2fe <__ascii_wctomb+0x14>
 800c2f4:	228a      	movs	r2, #138	@ 0x8a
 800c2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	4770      	bx	lr
 800c2fe:	2001      	movs	r0, #1
 800c300:	700a      	strb	r2, [r1, #0]
 800c302:	4770      	bx	lr

0800c304 <__sfputc_r>:
 800c304:	6893      	ldr	r3, [r2, #8]
 800c306:	b410      	push	{r4}
 800c308:	3b01      	subs	r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	6093      	str	r3, [r2, #8]
 800c30e:	da07      	bge.n	800c320 <__sfputc_r+0x1c>
 800c310:	6994      	ldr	r4, [r2, #24]
 800c312:	42a3      	cmp	r3, r4
 800c314:	db01      	blt.n	800c31a <__sfputc_r+0x16>
 800c316:	290a      	cmp	r1, #10
 800c318:	d102      	bne.n	800c320 <__sfputc_r+0x1c>
 800c31a:	bc10      	pop	{r4}
 800c31c:	f7fe b84b 	b.w	800a3b6 <__swbuf_r>
 800c320:	6813      	ldr	r3, [r2, #0]
 800c322:	1c58      	adds	r0, r3, #1
 800c324:	6010      	str	r0, [r2, #0]
 800c326:	7019      	strb	r1, [r3, #0]
 800c328:	4608      	mov	r0, r1
 800c32a:	bc10      	pop	{r4}
 800c32c:	4770      	bx	lr

0800c32e <__sfputs_r>:
 800c32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c330:	4606      	mov	r6, r0
 800c332:	460f      	mov	r7, r1
 800c334:	4614      	mov	r4, r2
 800c336:	18d5      	adds	r5, r2, r3
 800c338:	42ac      	cmp	r4, r5
 800c33a:	d101      	bne.n	800c340 <__sfputs_r+0x12>
 800c33c:	2000      	movs	r0, #0
 800c33e:	e007      	b.n	800c350 <__sfputs_r+0x22>
 800c340:	463a      	mov	r2, r7
 800c342:	4630      	mov	r0, r6
 800c344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c348:	f7ff ffdc 	bl	800c304 <__sfputc_r>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d1f3      	bne.n	800c338 <__sfputs_r+0xa>
 800c350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c354 <_vfiprintf_r>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	460d      	mov	r5, r1
 800c35a:	4614      	mov	r4, r2
 800c35c:	4698      	mov	r8, r3
 800c35e:	4606      	mov	r6, r0
 800c360:	b09d      	sub	sp, #116	@ 0x74
 800c362:	b118      	cbz	r0, 800c36c <_vfiprintf_r+0x18>
 800c364:	6a03      	ldr	r3, [r0, #32]
 800c366:	b90b      	cbnz	r3, 800c36c <_vfiprintf_r+0x18>
 800c368:	f7fd ff2c 	bl	800a1c4 <__sinit>
 800c36c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c36e:	07d9      	lsls	r1, r3, #31
 800c370:	d405      	bmi.n	800c37e <_vfiprintf_r+0x2a>
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d402      	bmi.n	800c37e <_vfiprintf_r+0x2a>
 800c378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c37a:	f7fe f98a 	bl	800a692 <__retarget_lock_acquire_recursive>
 800c37e:	89ab      	ldrh	r3, [r5, #12]
 800c380:	071b      	lsls	r3, r3, #28
 800c382:	d501      	bpl.n	800c388 <_vfiprintf_r+0x34>
 800c384:	692b      	ldr	r3, [r5, #16]
 800c386:	b99b      	cbnz	r3, 800c3b0 <_vfiprintf_r+0x5c>
 800c388:	4629      	mov	r1, r5
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7fe f852 	bl	800a434 <__swsetup_r>
 800c390:	b170      	cbz	r0, 800c3b0 <_vfiprintf_r+0x5c>
 800c392:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c394:	07dc      	lsls	r4, r3, #31
 800c396:	d504      	bpl.n	800c3a2 <_vfiprintf_r+0x4e>
 800c398:	f04f 30ff 	mov.w	r0, #4294967295
 800c39c:	b01d      	add	sp, #116	@ 0x74
 800c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a2:	89ab      	ldrh	r3, [r5, #12]
 800c3a4:	0598      	lsls	r0, r3, #22
 800c3a6:	d4f7      	bmi.n	800c398 <_vfiprintf_r+0x44>
 800c3a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3aa:	f7fe f973 	bl	800a694 <__retarget_lock_release_recursive>
 800c3ae:	e7f3      	b.n	800c398 <_vfiprintf_r+0x44>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3b4:	2320      	movs	r3, #32
 800c3b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3ba:	2330      	movs	r3, #48	@ 0x30
 800c3bc:	f04f 0901 	mov.w	r9, #1
 800c3c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c570 <_vfiprintf_r+0x21c>
 800c3c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	469a      	mov	sl, r3
 800c3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d4:	b10a      	cbz	r2, 800c3da <_vfiprintf_r+0x86>
 800c3d6:	2a25      	cmp	r2, #37	@ 0x25
 800c3d8:	d1f9      	bne.n	800c3ce <_vfiprintf_r+0x7a>
 800c3da:	ebba 0b04 	subs.w	fp, sl, r4
 800c3de:	d00b      	beq.n	800c3f8 <_vfiprintf_r+0xa4>
 800c3e0:	465b      	mov	r3, fp
 800c3e2:	4622      	mov	r2, r4
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ffa1 	bl	800c32e <__sfputs_r>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f000 80a7 	beq.w	800c540 <_vfiprintf_r+0x1ec>
 800c3f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f4:	445a      	add	r2, fp
 800c3f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f000 809f 	beq.w	800c540 <_vfiprintf_r+0x1ec>
 800c402:	2300      	movs	r3, #0
 800c404:	f04f 32ff 	mov.w	r2, #4294967295
 800c408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40c:	f10a 0a01 	add.w	sl, sl, #1
 800c410:	9304      	str	r3, [sp, #16]
 800c412:	9307      	str	r3, [sp, #28]
 800c414:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c418:	931a      	str	r3, [sp, #104]	@ 0x68
 800c41a:	4654      	mov	r4, sl
 800c41c:	2205      	movs	r2, #5
 800c41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c422:	4853      	ldr	r0, [pc, #332]	@ (800c570 <_vfiprintf_r+0x21c>)
 800c424:	f7fe f937 	bl	800a696 <memchr>
 800c428:	9a04      	ldr	r2, [sp, #16]
 800c42a:	b9d8      	cbnz	r0, 800c464 <_vfiprintf_r+0x110>
 800c42c:	06d1      	lsls	r1, r2, #27
 800c42e:	bf44      	itt	mi
 800c430:	2320      	movmi	r3, #32
 800c432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c436:	0713      	lsls	r3, r2, #28
 800c438:	bf44      	itt	mi
 800c43a:	232b      	movmi	r3, #43	@ 0x2b
 800c43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c440:	f89a 3000 	ldrb.w	r3, [sl]
 800c444:	2b2a      	cmp	r3, #42	@ 0x2a
 800c446:	d015      	beq.n	800c474 <_vfiprintf_r+0x120>
 800c448:	4654      	mov	r4, sl
 800c44a:	2000      	movs	r0, #0
 800c44c:	f04f 0c0a 	mov.w	ip, #10
 800c450:	9a07      	ldr	r2, [sp, #28]
 800c452:	4621      	mov	r1, r4
 800c454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c458:	3b30      	subs	r3, #48	@ 0x30
 800c45a:	2b09      	cmp	r3, #9
 800c45c:	d94b      	bls.n	800c4f6 <_vfiprintf_r+0x1a2>
 800c45e:	b1b0      	cbz	r0, 800c48e <_vfiprintf_r+0x13a>
 800c460:	9207      	str	r2, [sp, #28]
 800c462:	e014      	b.n	800c48e <_vfiprintf_r+0x13a>
 800c464:	eba0 0308 	sub.w	r3, r0, r8
 800c468:	fa09 f303 	lsl.w	r3, r9, r3
 800c46c:	4313      	orrs	r3, r2
 800c46e:	46a2      	mov	sl, r4
 800c470:	9304      	str	r3, [sp, #16]
 800c472:	e7d2      	b.n	800c41a <_vfiprintf_r+0xc6>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	1d19      	adds	r1, r3, #4
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	9103      	str	r1, [sp, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bfbb      	ittet	lt
 800c480:	425b      	neglt	r3, r3
 800c482:	f042 0202 	orrlt.w	r2, r2, #2
 800c486:	9307      	strge	r3, [sp, #28]
 800c488:	9307      	strlt	r3, [sp, #28]
 800c48a:	bfb8      	it	lt
 800c48c:	9204      	strlt	r2, [sp, #16]
 800c48e:	7823      	ldrb	r3, [r4, #0]
 800c490:	2b2e      	cmp	r3, #46	@ 0x2e
 800c492:	d10a      	bne.n	800c4aa <_vfiprintf_r+0x156>
 800c494:	7863      	ldrb	r3, [r4, #1]
 800c496:	2b2a      	cmp	r3, #42	@ 0x2a
 800c498:	d132      	bne.n	800c500 <_vfiprintf_r+0x1ac>
 800c49a:	9b03      	ldr	r3, [sp, #12]
 800c49c:	3402      	adds	r4, #2
 800c49e:	1d1a      	adds	r2, r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c574 <_vfiprintf_r+0x220>
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	7821      	ldrb	r1, [r4, #0]
 800c4b4:	f7fe f8ef 	bl	800a696 <memchr>
 800c4b8:	b138      	cbz	r0, 800c4ca <_vfiprintf_r+0x176>
 800c4ba:	2240      	movs	r2, #64	@ 0x40
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	eba0 000a 	sub.w	r0, r0, sl
 800c4c2:	4082      	lsls	r2, r0
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	3401      	adds	r4, #1
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ce:	2206      	movs	r2, #6
 800c4d0:	4829      	ldr	r0, [pc, #164]	@ (800c578 <_vfiprintf_r+0x224>)
 800c4d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4d6:	f7fe f8de 	bl	800a696 <memchr>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d03f      	beq.n	800c55e <_vfiprintf_r+0x20a>
 800c4de:	4b27      	ldr	r3, [pc, #156]	@ (800c57c <_vfiprintf_r+0x228>)
 800c4e0:	bb1b      	cbnz	r3, 800c52a <_vfiprintf_r+0x1d6>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	3307      	adds	r3, #7
 800c4e6:	f023 0307 	bic.w	r3, r3, #7
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	9303      	str	r3, [sp, #12]
 800c4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f0:	443b      	add	r3, r7
 800c4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4f4:	e76a      	b.n	800c3cc <_vfiprintf_r+0x78>
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	2001      	movs	r0, #1
 800c4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4fe:	e7a8      	b.n	800c452 <_vfiprintf_r+0xfe>
 800c500:	2300      	movs	r3, #0
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	4619      	mov	r1, r3
 800c508:	3401      	adds	r4, #1
 800c50a:	9305      	str	r3, [sp, #20]
 800c50c:	4620      	mov	r0, r4
 800c50e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c512:	3a30      	subs	r2, #48	@ 0x30
 800c514:	2a09      	cmp	r2, #9
 800c516:	d903      	bls.n	800c520 <_vfiprintf_r+0x1cc>
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0c6      	beq.n	800c4aa <_vfiprintf_r+0x156>
 800c51c:	9105      	str	r1, [sp, #20]
 800c51e:	e7c4      	b.n	800c4aa <_vfiprintf_r+0x156>
 800c520:	4604      	mov	r4, r0
 800c522:	2301      	movs	r3, #1
 800c524:	fb0c 2101 	mla	r1, ip, r1, r2
 800c528:	e7f0      	b.n	800c50c <_vfiprintf_r+0x1b8>
 800c52a:	ab03      	add	r3, sp, #12
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	462a      	mov	r2, r5
 800c530:	4630      	mov	r0, r6
 800c532:	4b13      	ldr	r3, [pc, #76]	@ (800c580 <_vfiprintf_r+0x22c>)
 800c534:	a904      	add	r1, sp, #16
 800c536:	f7fd f9fd 	bl	8009934 <_printf_float>
 800c53a:	4607      	mov	r7, r0
 800c53c:	1c78      	adds	r0, r7, #1
 800c53e:	d1d6      	bne.n	800c4ee <_vfiprintf_r+0x19a>
 800c540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	d405      	bmi.n	800c552 <_vfiprintf_r+0x1fe>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	059a      	lsls	r2, r3, #22
 800c54a:	d402      	bmi.n	800c552 <_vfiprintf_r+0x1fe>
 800c54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c54e:	f7fe f8a1 	bl	800a694 <__retarget_lock_release_recursive>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	065b      	lsls	r3, r3, #25
 800c556:	f53f af1f 	bmi.w	800c398 <_vfiprintf_r+0x44>
 800c55a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c55c:	e71e      	b.n	800c39c <_vfiprintf_r+0x48>
 800c55e:	ab03      	add	r3, sp, #12
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	462a      	mov	r2, r5
 800c564:	4630      	mov	r0, r6
 800c566:	4b06      	ldr	r3, [pc, #24]	@ (800c580 <_vfiprintf_r+0x22c>)
 800c568:	a904      	add	r1, sp, #16
 800c56a:	f7fd fc81 	bl	8009e70 <_printf_i>
 800c56e:	e7e4      	b.n	800c53a <_vfiprintf_r+0x1e6>
 800c570:	0800d1c7 	.word	0x0800d1c7
 800c574:	0800d1cd 	.word	0x0800d1cd
 800c578:	0800d1d1 	.word	0x0800d1d1
 800c57c:	08009935 	.word	0x08009935
 800c580:	0800c32f 	.word	0x0800c32f

0800c584 <_raise_r>:
 800c584:	291f      	cmp	r1, #31
 800c586:	b538      	push	{r3, r4, r5, lr}
 800c588:	4605      	mov	r5, r0
 800c58a:	460c      	mov	r4, r1
 800c58c:	d904      	bls.n	800c598 <_raise_r+0x14>
 800c58e:	2316      	movs	r3, #22
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	f04f 30ff 	mov.w	r0, #4294967295
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c59a:	b112      	cbz	r2, 800c5a2 <_raise_r+0x1e>
 800c59c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5a0:	b94b      	cbnz	r3, 800c5b6 <_raise_r+0x32>
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f000 f830 	bl	800c608 <_getpid_r>
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b2:	f000 b817 	b.w	800c5e4 <_kill_r>
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d00a      	beq.n	800c5d0 <_raise_r+0x4c>
 800c5ba:	1c59      	adds	r1, r3, #1
 800c5bc:	d103      	bne.n	800c5c6 <_raise_r+0x42>
 800c5be:	2316      	movs	r3, #22
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	e7e7      	b.n	800c596 <_raise_r+0x12>
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5ce:	4798      	blx	r3
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e7e0      	b.n	800c596 <_raise_r+0x12>

0800c5d4 <raise>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	@ (800c5e0 <raise+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f7ff bfd3 	b.w	800c584 <_raise_r>
 800c5de:	bf00      	nop
 800c5e0:	20000228 	.word	0x20000228

0800c5e4 <_kill_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4d06      	ldr	r5, [pc, #24]	@ (800c604 <_kill_r+0x20>)
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	f7f7 fada 	bl	8003baa <_kill>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d102      	bne.n	800c600 <_kill_r+0x1c>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	b103      	cbz	r3, 800c600 <_kill_r+0x1c>
 800c5fe:	6023      	str	r3, [r4, #0]
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	200007dc 	.word	0x200007dc

0800c608 <_getpid_r>:
 800c608:	f7f7 bac8 	b.w	8003b9c <_getpid>

0800c60c <_malloc_usable_size_r>:
 800c60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c610:	1f18      	subs	r0, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfbc      	itt	lt
 800c616:	580b      	ldrlt	r3, [r1, r0]
 800c618:	18c0      	addlt	r0, r0, r3
 800c61a:	4770      	bx	lr

0800c61c <_init>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	bf00      	nop
 800c620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c622:	bc08      	pop	{r3}
 800c624:	469e      	mov	lr, r3
 800c626:	4770      	bx	lr

0800c628 <_fini>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	bf00      	nop
 800c62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62e:	bc08      	pop	{r3}
 800c630:	469e      	mov	lr, r3
 800c632:	4770      	bx	lr
