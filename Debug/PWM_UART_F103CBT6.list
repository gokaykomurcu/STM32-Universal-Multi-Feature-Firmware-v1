
PWM_UART_F103CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd0  0800eb20  0800eb20  0000fb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106f0  080106f0  00012430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080106f0  080106f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106f8  080106f8  00012430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106f8  080106f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106fc  080106fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  08010700  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000430  08010b30  00012430  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c9c  08010b30  00012c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00012430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b15  00000000  00000000  00012459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003007  00000000  00000000  00026f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7f  00000000  00000000  0002b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a614  00000000  00000000  0002c2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018467  00000000  00000000  000468d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a33  00000000  00000000  0005ed3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f476d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a94  00000000  00000000  000f47b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fb244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000430 	.word	0x20000430
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eb04 	.word	0x0800eb04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000434 	.word	0x20000434
 800014c:	0800eb04 	.word	0x0800eb04

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001174:	f3bf 8f4f 	dsb	sy
}
 8001178:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <__NVIC_SystemReset+0x24>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001182:	4904      	ldr	r1, [pc, #16]	@ (8001194 <__NVIC_SystemReset+0x24>)
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_SystemReset+0x28>)
 8001186:	4313      	orrs	r3, r2
 8001188:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
}
 800118e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <__NVIC_SystemReset+0x20>
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	05fa0004 	.word	0x05fa0004

0800119c <OLED_DrawLine>:
#include <stdbool.h>
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include <math.h>

static void OLED_DrawLine(int x0, int y0, int x1, int y1, uint8_t color) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
    int dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bfb8      	it	lt
 80011b4:	425b      	neglt	r3, r3
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	da01      	bge.n	80011c4 <OLED_DrawLine+0x28>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e001      	b.n	80011c8 <OLED_DrawLine+0x2c>
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	61fb      	str	r3, [r7, #28]
    int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bfb8      	it	lt
 80011d4:	425b      	neglt	r3, r3
 80011d6:	425b      	negs	r3, r3
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	da01      	bge.n	80011e6 <OLED_DrawLine+0x4a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e001      	b.n	80011ea <OLED_DrawLine+0x4e>
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	617b      	str	r3, [r7, #20]
    int err = dx + dy, e2;
 80011ec:	6a3a      	ldr	r2, [r7, #32]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4413      	add	r3, r2
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (;;) {
        if (x0 >= 0 && x0 < 128 && y0 >= 0 && y0 < 64) {
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db11      	blt.n	800121e <OLED_DrawLine+0x82>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80011fe:	dc0e      	bgt.n	800121e <OLED_DrawLine+0x82>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <OLED_DrawLine+0x82>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b3f      	cmp	r3, #63	@ 0x3f
 800120a:	dc08      	bgt.n	800121e <OLED_DrawLine+0x82>
            ssd1306_DrawPixel(x0, y0, color);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	b2d1      	uxtb	r1, r2
 8001214:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fdb1 	bl	8004d80 <ssd1306_DrawPixel>
        }
        if (x0 == x1 && y0 == y1) break;
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d103      	bne.n	800122e <OLED_DrawLine+0x92>
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d01b      	beq.n	8001266 <OLED_DrawLine+0xca>
        e2 = 2 * err;
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	613b      	str	r3, [r7, #16]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	429a      	cmp	r2, r3
 800123a:	db07      	blt.n	800124c <OLED_DrawLine+0xb0>
 800123c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4413      	add	r3, r2
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	4413      	add	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
        if (e2 <= dx) { err += dx; y0 += sy; }
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	429a      	cmp	r2, r3
 8001252:	dccf      	bgt.n	80011f4 <OLED_DrawLine+0x58>
 8001254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	4413      	add	r3, r2
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
        if (x0 >= 0 && x0 < 128 && y0 >= 0 && y0 < 64) {
 8001264:	e7c6      	b.n	80011f4 <OLED_DrawLine+0x58>
        if (x0 == x1 && y0 == y1) break;
 8001266:	bf00      	nop
    }
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	@ 0x40
 8001274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f003 ffb9 	bl	80051ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f9c7 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 fc41 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001282:	f000 fc21 	bl	8001ac8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001286:	f000 fbf5 	bl	8001a74 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800128a:	f000 fb11 	bl	80018b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800128e:	f000 fa77 	bl	8001780 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001292:	f000 fa19 	bl	80016c8 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001296:	f000 faa1 	bl	80017dc <MX_IWDG_Init>
  MX_TIM3_Init();
 800129a:	f000 fb61 	bl	8001960 <MX_TIM3_Init>
  MX_TIM1_Init();
 800129e:	f000 fab7 	bl	8001810 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80012a2:	f003 fcc3 	bl	8004c2c <ssd1306_Init>
  // ssd1306_UpdateScreen();
/*
  ssd1306_SetCursor(0, 0);
  ssd1306_WriteString("Gokay <3 Derin", Font_7x10, 1);
  ssd1306_UpdateScreen(); */
  HAL_TIM_Base_Start(&htim1);
 80012a6:	4882      	ldr	r0, [pc, #520]	@ (80014b0 <main+0x240>)
 80012a8:	f007 fd22 	bl	8008cf0 <HAL_TIM_Base_Start>

  //HC-SR04
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //TRIG Pini haberleşme başlaması için lowa çekildi.
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b2:	4880      	ldr	r0, [pc, #512]	@ (80014b4 <main+0x244>)
 80012b4:	f005 fd39 	bl	8006d2a <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	497f      	ldr	r1, [pc, #508]	@ (80014b8 <main+0x248>)
 80012bc:	487f      	ldr	r0, [pc, #508]	@ (80014bc <main+0x24c>)
 80012be:	f009 f83e 	bl	800a33e <HAL_UART_Receive_IT>
 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012c2:	2104      	movs	r1, #4
 80012c4:	487e      	ldr	r0, [pc, #504]	@ (80014c0 <main+0x250>)
 80012c6:	f007 fdad 	bl	8008e24 <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart1, (uint8_t*)exampleCommands, strlen(exampleCommands), HAL_MAX_DELAY);
 80012ca:	487e      	ldr	r0, [pc, #504]	@ (80014c4 <main+0x254>)
 80012cc:	f7fe ff4a 	bl	8000164 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	497a      	ldr	r1, [pc, #488]	@ (80014c4 <main+0x254>)
 80012da:	4878      	ldr	r0, [pc, #480]	@ (80014bc <main+0x24c>)
 80012dc:	f008 ffa4 	bl	800a228 <HAL_UART_Transmit>
  adxl345_init(&hi2c1);
 80012e0:	4879      	ldr	r0, [pc, #484]	@ (80014c8 <main+0x258>)
 80012e2:	f001 f82b 	bl	800233c <adxl345_init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // PA7 - Rising
 80012e6:	2104      	movs	r1, #4
 80012e8:	4878      	ldr	r0, [pc, #480]	@ (80014cc <main+0x25c>)
 80012ea:	f007 fe95 	bl	8009018 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // PB0 - Falling
 80012ee:	2108      	movs	r1, #8
 80012f0:	4876      	ldr	r0, [pc, #472]	@ (80014cc <main+0x25c>)
 80012f2:	f007 fe91 	bl	8009018 <HAL_TIM_IC_Start_IT>
//	  char msg[] = "deneme123\r\n";
//	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
//	      HAL_Delay(1000);


	 HAL_IWDG_Refresh(&hiwdg); // Burada sürekli besle
 80012f6:	4876      	ldr	r0, [pc, #472]	@ (80014d0 <main+0x260>)
 80012f8:	f006 ff1f 	bl	800813a <HAL_IWDG_Refresh>
	          // WAIT komutu dışında


	  if(process_uart)
 80012fc:	4b75      	ldr	r3, [pc, #468]	@ (80014d4 <main+0x264>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <main+0x9a>
	  {
		  command(rxBuffer);								// komutu işle
 8001304:	4874      	ldr	r0, [pc, #464]	@ (80014d8 <main+0x268>)
 8001306:	f001 f9bb 	bl	8002680 <command>

	  }

	  if (oledDistanceOn) {
 800130a:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <main+0x26c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d056      	beq.n	80013c2 <main+0x152>
	         uint32_t now = HAL_GetTick();
 8001314:	f003 ffc2 	bl	800529c <HAL_GetTick>
 8001318:	62f8      	str	r0, [r7, #44]	@ 0x2c

	         // PERİYODİK ÖLÇME
	         if (now >= nextHcsrMeasureMs) {
 800131a:	4b71      	ldr	r3, [pc, #452]	@ (80014e0 <main+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001320:	429a      	cmp	r2, r3
 8001322:	d315      	bcc.n	8001350 <main+0xe0>
	             uint16_t cm_tmp;
	             if (hcsr04_measure_cm(&cm_tmp)) {
 8001324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd7b 	bl	8001e24 <hcsr04_measure_cm>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <main+0xd2>
	                 Distance_cm = cm_tmp;
 8001334:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001336:	4b6b      	ldr	r3, [pc, #428]	@ (80014e4 <main+0x274>)
 8001338:	801a      	strh	r2, [r3, #0]
	                 Distance_ok = 1;
 800133a:	4b6b      	ldr	r3, [pc, #428]	@ (80014e8 <main+0x278>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e002      	b.n	8001348 <main+0xd8>
	             } else {
	                 Distance_ok = 0;
 8001342:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <main+0x278>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
	             }
	             nextHcsrMeasureMs = now + HCSR_MEASURE_PERIOD_MS;
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	3364      	adds	r3, #100	@ 0x64
 800134c:	4a64      	ldr	r2, [pc, #400]	@ (80014e0 <main+0x270>)
 800134e:	6013      	str	r3, [r2, #0]
	         }

	         // OLED periyodik güncelle
	         if (now >= nextOledRefreshMs) {
 8001350:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <main+0x27c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001356:	429a      	cmp	r2, r3
 8001358:	d333      	bcc.n	80013c2 <main+0x152>
	             ssd1306_Fill(Black);
 800135a:	2000      	movs	r0, #0
 800135c:	f003 fcd0 	bl	8004d00 <ssd1306_Fill>
	             ssd1306_SetCursor(0, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	2000      	movs	r0, #0
 8001364:	f003 fe16 	bl	8004f94 <ssd1306_SetCursor>
	             if (Distance_ok) {
 8001368:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <main+0x278>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00f      	beq.n	8001392 <main+0x122>
	                 char line[32];
	                 snprintf(line, sizeof(line), "Mesafe: %u cm", Distance_cm);
 8001372:	4b5c      	ldr	r3, [pc, #368]	@ (80014e4 <main+0x274>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4638      	mov	r0, r7
 800137a:	4a5d      	ldr	r2, [pc, #372]	@ (80014f0 <main+0x280>)
 800137c:	2120      	movs	r1, #32
 800137e:	f00a fbe7 	bl	800bb50 <sniprintf>
	                 ssd1306_WriteString(line, Font_7x10, White);
 8001382:	4b5c      	ldr	r3, [pc, #368]	@ (80014f4 <main+0x284>)
 8001384:	4638      	mov	r0, r7
 8001386:	2201      	movs	r2, #1
 8001388:	9200      	str	r2, [sp, #0]
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	f003 fddc 	bl	8004f48 <ssd1306_WriteString>
 8001390:	e011      	b.n	80013b6 <main+0x146>
	             } else {
	                 ssd1306_WriteString("Mesafe", Font_7x10, White);
 8001392:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <main+0x284>)
 8001394:	2201      	movs	r2, #1
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139a:	4857      	ldr	r0, [pc, #348]	@ (80014f8 <main+0x288>)
 800139c:	f003 fdd4 	bl	8004f48 <ssd1306_WriteString>
	                 ssd1306_SetCursor(5, 10);
 80013a0:	210a      	movs	r1, #10
 80013a2:	2005      	movs	r0, #5
 80013a4:	f003 fdf6 	bl	8004f94 <ssd1306_SetCursor>
	                 	            ssd1306_WriteString("Algilanamiyor", Font_7x10, White);
 80013a8:	4b52      	ldr	r3, [pc, #328]	@ (80014f4 <main+0x284>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	9200      	str	r2, [sp, #0]
 80013ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b0:	4852      	ldr	r0, [pc, #328]	@ (80014fc <main+0x28c>)
 80013b2:	f003 fdc9 	bl	8004f48 <ssd1306_WriteString>
	             }
	             ssd1306_UpdateScreen();
 80013b6:	f003 fcbb 	bl	8004d30 <ssd1306_UpdateScreen>
	             nextOledRefreshMs = now + OLED_REFRESH_PERIOD_MS;
 80013ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013bc:	33c8      	adds	r3, #200	@ 0xc8
 80013be:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <main+0x27c>)
 80013c0:	6013      	str	r3, [r2, #0]
	         }
	     }

	#ifdef LIVE_EXPRESSION
    // DEBUG MODU DEĞERLER SÜREKLİ GÜNCELLENİYOR
    adxl345_read_xyz(&hi2c1, &gx, &gy, &gz);
 80013c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001500 <main+0x290>)
 80013c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001504 <main+0x294>)
 80013c6:	4950      	ldr	r1, [pc, #320]	@ (8001508 <main+0x298>)
 80013c8:	483f      	ldr	r0, [pc, #252]	@ (80014c8 <main+0x258>)
 80013ca:	f000 ffdf 	bl	800238c <adxl345_read_xyz>
    calc_acceleration_ms2(gx, gy, gz, &ax, &ay, &az);
 80013ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001508 <main+0x298>)
 80013d0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80013d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001504 <main+0x294>)
 80013d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013da:	4b49      	ldr	r3, [pc, #292]	@ (8001500 <main+0x290>)
 80013dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013e0:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <main+0x29c>)
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <main+0x2a0>)
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001514 <main+0x2a4>)
 80013ea:	f000 ff31 	bl	8002250 <calc_acceleration_ms2>
            Distance_ok = 0;
        }
*/
    #endif

    	if (servoFollowY)
 80013ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <main+0x2a8>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d03d      	beq.n	8001474 <main+0x204>
    	{
    		float sinirY =ay;
 80013f8:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <main+0x2a0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
    		if(sinirY> 9.81f) sinirY = 9.81f;
 80013fe:	4947      	ldr	r1, [pc, #284]	@ (800151c <main+0x2ac>)
 8001400:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001402:	f7ff fe65 	bl	80010d0 <__aeabi_fcmpgt>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <main+0x1a0>
 800140c:	4b43      	ldr	r3, [pc, #268]	@ (800151c <main+0x2ac>)
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
    		if(sinirY< -9.81f) sinirY = -9.81f;
 8001410:	4943      	ldr	r1, [pc, #268]	@ (8001520 <main+0x2b0>)
 8001412:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001414:	f7ff fe3e 	bl	8001094 <__aeabi_fcmplt>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <main+0x1b2>
 800141e:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <main+0x2b0>)
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34

    		float angle = (sinirY / 9.81f) * 90.0f;
 8001422:	493e      	ldr	r1, [pc, #248]	@ (800151c <main+0x2ac>)
 8001424:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001426:	f7ff fd4b 	bl	8000ec0 <__aeabi_fdiv>
 800142a:	4603      	mov	r3, r0
 800142c:	493d      	ldr	r1, [pc, #244]	@ (8001524 <main+0x2b4>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fc92 	bl	8000d58 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
    		if(angle>90) angle = 90;
 8001438:	493a      	ldr	r1, [pc, #232]	@ (8001524 <main+0x2b4>)
 800143a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800143c:	f7ff fe48 	bl	80010d0 <__aeabi_fcmpgt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <main+0x1da>
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <main+0x2b4>)
 8001448:	633b      	str	r3, [r7, #48]	@ 0x30
    		if(angle<-90) angle = -90;
 800144a:	4937      	ldr	r1, [pc, #220]	@ (8001528 <main+0x2b8>)
 800144c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800144e:	f7ff fe21 	bl	8001094 <__aeabi_fcmplt>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <main+0x1ec>
 8001458:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <main+0x2b8>)
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30

    		servoSetAngle(&htim2, TIM_CHANNEL_2, (int)angle);
 800145c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800145e:	f7ff fe41 	bl	80010e4 <__aeabi_f2iz>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	2104      	movs	r1, #4
 8001468:	4815      	ldr	r0, [pc, #84]	@ (80014c0 <main+0x250>)
 800146a:	f003 f803 	bl	8004474 <servoSetAngle>
    		HAL_Delay(20);
 800146e:	2014      	movs	r0, #20
 8001470:	f003 ff1e 	bl	80052b0 <HAL_Delay>
    	}

    	if (ledFollowAccX)
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <main+0x2bc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d065      	beq.n	8001548 <main+0x2d8>
    	{
    		if(ax > 10.0f || ax < -10.0f){
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <main+0x2a4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	492b      	ldr	r1, [pc, #172]	@ (8001530 <main+0x2c0>)
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe24 	bl	80010d0 <__aeabi_fcmpgt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <main+0x230>
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <main+0x2a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4928      	ldr	r1, [pc, #160]	@ (8001534 <main+0x2c4>)
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fdfd 	bl	8001094 <__aeabi_fcmplt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d04d      	beq.n	800153c <main+0x2cc>
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a6:	4824      	ldr	r0, [pc, #144]	@ (8001538 <main+0x2c8>)
 80014a8:	f005 fc3f 	bl	8006d2a <HAL_GPIO_WritePin>
 80014ac:	e04c      	b.n	8001548 <main+0x2d8>
 80014ae:	bf00      	nop
 80014b0:	20000520 	.word	0x20000520
 80014b4:	40010800 	.word	0x40010800
 80014b8:	200006d4 	.word	0x200006d4
 80014bc:	200005f8 	.word	0x200005f8
 80014c0:	20000568 	.word	0x20000568
 80014c4:	20000004 	.word	0x20000004
 80014c8:	200004c0 	.word	0x200004c0
 80014cc:	200005b0 	.word	0x200005b0
 80014d0:	20000514 	.word	0x20000514
 80014d4:	200006d6 	.word	0x200006d6
 80014d8:	20000654 	.word	0x20000654
 80014dc:	200006fb 	.word	0x200006fb
 80014e0:	200006fc 	.word	0x200006fc
 80014e4:	200006f8 	.word	0x200006f8
 80014e8:	200006fa 	.word	0x200006fa
 80014ec:	20000700 	.word	0x20000700
 80014f0:	0800eb20 	.word	0x0800eb20
 80014f4:	0800ff20 	.word	0x0800ff20
 80014f8:	0800eb30 	.word	0x0800eb30
 80014fc:	0800eb38 	.word	0x0800eb38
 8001500:	200006dc 	.word	0x200006dc
 8001504:	200006da 	.word	0x200006da
 8001508:	200006d8 	.word	0x200006d8
 800150c:	200006e8 	.word	0x200006e8
 8001510:	200006e4 	.word	0x200006e4
 8001514:	200006e0 	.word	0x200006e0
 8001518:	200006ec 	.word	0x200006ec
 800151c:	411cf5c3 	.word	0x411cf5c3
 8001520:	c11cf5c3 	.word	0xc11cf5c3
 8001524:	42b40000 	.word	0x42b40000
 8001528:	c2b40000 	.word	0xc2b40000
 800152c:	200006ed 	.word	0x200006ed
 8001530:	41200000 	.word	0x41200000
 8001534:	c1200000 	.word	0xc1200000
 8001538:	40010c00 	.word	0x40010c00
    		}
    		else{
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001542:	482c      	ldr	r0, [pc, #176]	@ (80015f4 <main+0x384>)
 8001544:	f005 fbf1 	bl	8006d2a <HAL_GPIO_WritePin>
    		}
    	}

    	if (radarEnabled) {
 8001548:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <main+0x388>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f43f aed1 	beq.w	80012f6 <main+0x86>
    	    uint32_t now = HAL_GetTick();
 8001554:	f003 fea2 	bl	800529c <HAL_GetTick>
 8001558:	62b8      	str	r0, [r7, #40]	@ 0x28
    	    if (now >= nextRadarStepMs) {
 800155a:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <main+0x38c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001560:	429a      	cmp	r2, r3
 8001562:	f4ff aec8 	bcc.w	80012f6 <main+0x86>

    	        servoSetAngle(&htim2, TIM_CHANNEL_2, radarAngle);
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <main+0x390>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	461a      	mov	r2, r3
 800156e:	2104      	movs	r1, #4
 8001570:	4824      	ldr	r0, [pc, #144]	@ (8001604 <main+0x394>)
 8001572:	f002 ff7f 	bl	8004474 <servoSetAngle>

    	        uint16_t cm = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	847b      	strh	r3, [r7, #34]	@ 0x22
    	        uint8_t ok = hcsr04_measure_cm(&cm) ? 1 : 0;
 800157a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fc50 	bl	8001e24 <hcsr04_measure_cm>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    	        Radar_DrawSweep(radarAngle, cm, ok);
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <main+0x390>)
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8001592:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fb7e 	bl	8001c98 <Radar_DrawSweep>

    	        radarAngle += radarDir * RADAR_STEP_DEG;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <main+0x398>)
 800159e:	f993 3000 	ldrsb.w	r3, [r3]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <main+0x390>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <main+0x390>)
 80015b8:	801a      	strh	r2, [r3, #0]
    	        if (radarAngle >= 90)  { radarAngle = 90;  radarDir = -1; }
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <main+0x390>)
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	2b59      	cmp	r3, #89	@ 0x59
 80015c2:	dd05      	ble.n	80015d0 <main+0x360>
 80015c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <main+0x390>)
 80015c6:	225a      	movs	r2, #90	@ 0x5a
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <main+0x398>)
 80015cc:	22ff      	movs	r2, #255	@ 0xff
 80015ce:	701a      	strb	r2, [r3, #0]
    	        if (radarAngle <= -90) { radarAngle = -90; radarDir = +1; }
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <main+0x390>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	f113 0f59 	cmn.w	r3, #89	@ 0x59
 80015da:	da06      	bge.n	80015ea <main+0x37a>
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <main+0x390>)
 80015de:	f64f 72a6 	movw	r2, #65446	@ 0xffa6
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <main+0x398>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]

    	        nextRadarStepMs = now + RADAR_STEP_MS;
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	3323      	adds	r3, #35	@ 0x23
 80015ee:	4a03      	ldr	r2, [pc, #12]	@ (80015fc <main+0x38c>)
 80015f0:	6013      	str	r3, [r2, #0]
	 HAL_IWDG_Refresh(&hiwdg); // Burada sürekli besle
 80015f2:	e680      	b.n	80012f6 <main+0x86>
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	20000640 	.word	0x20000640
 80015fc:	20000644 	.word	0x20000644
 8001600:	20000000 	.word	0x20000000
 8001604:	20000568 	.word	0x20000568
 8001608:	20000002 	.word	0x20000002

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	@ 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001616:	2228      	movs	r2, #40	@ 0x28
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00a fbc8 	bl	800bdb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800163c:	2309      	movs	r3, #9
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800164e:	2301      	movs	r3, #1
 8001650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800165c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fd76 	bl	8008158 <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001672:	f002 ff51 	bl	8004518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f006 ffe2 	bl	800865c <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800169e:	f002 ff3b 	bl	8004518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016a2:	2302      	movs	r3, #2
 80016a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4618      	mov	r0, r3
 80016b0:	f007 f962 	bl	8008978 <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80016ba:	f002 ff2d 	bl	8004518 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	@ 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016d8:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016da:	4a28      	ldr	r2, [pc, #160]	@ (800177c <MX_ADC1_Init+0xb4>)
 80016dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016e6:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ec:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80016f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <MX_ADC1_Init+0xb0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <MX_ADC1_Init+0xb0>)
 8001702:	2203      	movs	r2, #3
 8001704:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001706:	481c      	ldr	r0, [pc, #112]	@ (8001778 <MX_ADC1_Init+0xb0>)
 8001708:	f003 fdf6 	bl	80052f8 <HAL_ADC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001712:	f002 ff01 	bl	8004518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001716:	2302      	movs	r3, #2
 8001718:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800171a:	2301      	movs	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4814      	ldr	r0, [pc, #80]	@ (8001778 <MX_ADC1_Init+0xb0>)
 8001728:	f004 f9ba 	bl	8005aa0 <HAL_ADC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001732:	f002 fef1 	bl	8004518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001736:	2303      	movs	r3, #3
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800173a:	2302      	movs	r3, #2
 800173c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <MX_ADC1_Init+0xb0>)
 8001744:	f004 f9ac 	bl	8005aa0 <HAL_ADC_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800174e:	f002 fee3 	bl	8004518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001752:	2304      	movs	r3, #4
 8001754:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001756:	2303      	movs	r3, #3
 8001758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <MX_ADC1_Init+0xb0>)
 8001760:	f004 f99e 	bl	8005aa0 <HAL_ADC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800176a:	f002 fed5 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000044c 	.word	0x2000044c
 800177c:	40012400 	.word	0x40012400

08001780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_I2C1_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <MX_I2C1_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_I2C1_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_I2C1_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <MX_I2C1_Init+0x50>)
 80017be:	f005 fae5 	bl	8006d8c <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f002 fea6 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200004c0 	.word	0x200004c0
 80017d4:	40005400 	.word	0x40005400
 80017d8:	000186a0 	.word	0x000186a0

080017dc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_IWDG_Init+0x2c>)
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <MX_IWDG_Init+0x30>)
 80017e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <MX_IWDG_Init+0x2c>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_IWDG_Init+0x2c>)
 80017ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80017f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_IWDG_Init+0x2c>)
 80017f6:	f006 fc5c 	bl	80080b2 <HAL_IWDG_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001800:	f002 fe8a 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000514 	.word	0x20000514
 800180c:	40003000 	.word	0x40003000

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182c:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800182e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <MX_TIM1_Init+0x9c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001834:	2247      	movs	r2, #71	@ 0x47
 8001836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001858:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800185a:	f007 f9f9 	bl	8008c50 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001864:	f002 fe58 	bl	8004518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001876:	f007 ff29 	bl	80096cc <HAL_TIM_ConfigClockSource>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001880:	f002 fe4a 	bl	8004518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188c:	463b      	mov	r3, r7
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001892:	f008 fc09 	bl	800a0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800189c:	f002 fe3c 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000520 	.word	0x20000520
 80018ac:	40012c00 	.word	0x40012c00

080018b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_TIM2_Init+0xac>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <MX_TIM2_Init+0xac>)
 80018dc:	2247      	movs	r2, #71	@ 0x47
 80018de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <MX_TIM2_Init+0xac>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_TIM2_Init+0xac>)
 80018e8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80018ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_TIM2_Init+0xac>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_TIM2_Init+0xac>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018fa:	4818      	ldr	r0, [pc, #96]	@ (800195c <MX_TIM2_Init+0xac>)
 80018fc:	f007 fa42 	bl	8008d84 <HAL_TIM_PWM_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001906:	f002 fe07 	bl	8004518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	@ (800195c <MX_TIM2_Init+0xac>)
 800191a:	f008 fbc5 	bl	800a0a8 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001924:	f002 fdf8 	bl	8004518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001928:	2360      	movs	r3, #96	@ 0x60
 800192a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2204      	movs	r2, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM2_Init+0xac>)
 8001940:	f007 fe02 	bl	8009548 <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800194a:	f002 fde5 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800194e:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM2_Init+0xac>)
 8001950:	f002 ff50 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000568 	.word	0x20000568

08001960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001992:	4a37      	ldr	r2, [pc, #220]	@ (8001a70 <MX_TIM3_Init+0x110>)
 8001994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001996:	4b35      	ldr	r3, [pc, #212]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019a2:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019b6:	482d      	ldr	r0, [pc, #180]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019b8:	f007 f9e4 	bl	8008d84 <HAL_TIM_PWM_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019c2:	f002 fda9 	bl	8004518 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019c6:	4829      	ldr	r0, [pc, #164]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019c8:	f007 face 	bl	8008f68 <HAL_TIM_IC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019d2:	f002 fda1 	bl	8004518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e2:	4619      	mov	r1, r3
 80019e4:	4821      	ldr	r0, [pc, #132]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 80019e6:	f008 fb5f 	bl	800a0a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019f0:	f002 fd92 	bl	8004518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f4:	2360      	movs	r3, #96	@ 0x60
 80019f6:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001a0e:	f007 fd9b 	bl	8009548 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8001a18:	f002 fd7e 	bl	8004518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001a34:	f007 fcec 	bl	8009410 <HAL_TIM_IC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001a3e:	f002 fd6b 	bl	8004518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a42:	2302      	movs	r3, #2
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001a4e:	f007 fcdf 	bl	8009410 <HAL_TIM_IC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001a58:	f002 fd5e 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a5c:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <MX_TIM3_Init+0x10c>)
 8001a5e:	f002 fec9 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 8001a62:	bf00      	nop
 8001a64:	3738      	adds	r7, #56	@ 0x38
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200005b0 	.word	0x200005b0
 8001a70:	40000400 	.word	0x40000400

08001a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <MX_USART1_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aac:	f008 fb6c 	bl	800a188 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f002 fd2f 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200005f8 	.word	0x200005f8
 8001ac4:	40013800 	.word	0x40013800

08001ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <MX_DMA_Init+0x38>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <MX_DMA_Init+0x38>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <MX_DMA_Init+0x38>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	200b      	movs	r0, #11
 8001aec:	f004 faa9 	bl	8006042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001af0:	200b      	movs	r0, #11
 8001af2:	f004 fac2 	bl	800607a <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitStruct.Pin   = GPIO_PIN_0;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;          // harici pull-up yoksa işe yarar
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	484c      	ldr	r0, [pc, #304]	@ (8001c60 <MX_GPIO_Init+0x15c>)
 8001b30:	f004 ff60 	bl	80069f4 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b48      	ldr	r3, [pc, #288]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a44      	ldr	r2, [pc, #272]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b42      	ldr	r3, [pc, #264]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a3e      	ldr	r2, [pc, #248]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <MX_GPIO_Init+0x160>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9a:	4833      	ldr	r0, [pc, #204]	@ (8001c68 <MX_GPIO_Init+0x164>)
 8001b9c:	f005 f8c5 	bl	8006d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba6:	4831      	ldr	r0, [pc, #196]	@ (8001c6c <MX_GPIO_Init+0x168>)
 8001ba8:	f005 f8bf 	bl	8006d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb2:	482b      	ldr	r0, [pc, #172]	@ (8001c60 <MX_GPIO_Init+0x15c>)
 8001bb4:	f005 f8b9 	bl	8006d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <MX_GPIO_Init+0x164>)
 8001bd2:	f004 ff0f 	bl	80069f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	481f      	ldr	r0, [pc, #124]	@ (8001c6c <MX_GPIO_Init+0x168>)
 8001bf0:	f004 ff00 	bl	80069f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	4818      	ldr	r0, [pc, #96]	@ (8001c6c <MX_GPIO_Init+0x168>)
 8001c0a:	f004 fef3 	bl	80069f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <MX_GPIO_Init+0x15c>)
 8001c28:	f004 fee4 	bl	80069f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <MX_GPIO_Init+0x16c>)
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480a      	ldr	r0, [pc, #40]	@ (8001c6c <MX_GPIO_Init+0x168>)
 8001c42:	f004 fed7 	bl	80069f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2017      	movs	r0, #23
 8001c4c:	f004 f9f9 	bl	8006042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c50:	2017      	movs	r0, #23
 8001c52:	f004 fa12 	bl	800607a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	10110000 	.word	0x10110000

08001c74 <Radar_DrawGrid>:

/* USER CODE BEGIN 4 */


static void Radar_DrawGrid(int cx, int cy) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]

    ssd1306_DrawCircle(cx, cy, RADAR_R_MAX, White);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	b2d8      	uxtb	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2d9      	uxtb	r1, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	2232      	movs	r2, #50	@ 0x32
 8001c8a:	f003 f99b 	bl	8004fc4 <ssd1306_DrawCircle>
        float th = theta_deg * 3.1415926f / 180.0f;
        int x = cx + (int)(RADAR_R_MAX * cosf(th));
        int y = cy - (int)(RADAR_R_MAX * sinf(th));
        ssd1306_DrawLine(cx, cy, x, y, White);
    } */
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <Radar_DrawSweep>:

// kısalan tarama çizgisi
static void Radar_DrawSweep(int16_t angle, uint16_t dist_cm, uint8_t dist_ok) {
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b093      	sub	sp, #76	@ 0x4c
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	80bb      	strh	r3, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	70fb      	strb	r3, [r7, #3]
    const int cx = 64, cy = 63;
 8001caa:	2340      	movs	r3, #64	@ 0x40
 8001cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cae:	233f      	movs	r3, #63	@ 0x3f
 8001cb0:	637b      	str	r3, [r7, #52]	@ 0x34

    // Mesafeyi piksele ölçekle
    uint16_t rpx = RADAR_R_MAX;
 8001cb2:	2332      	movs	r3, #50	@ 0x32
 8001cb4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (dist_ok) {
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00f      	beq.n	8001cdc <Radar_DrawSweep+0x44>
        if (dist_cm > RADAR_MAX_RANGE_CM) dist_cm = RADAR_MAX_RANGE_CM;
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	2bc8      	cmp	r3, #200	@ 0xc8
 8001cc0:	d901      	bls.n	8001cc6 <Radar_DrawSweep+0x2e>
 8001cc2:	23c8      	movs	r3, #200	@ 0xc8
 8001cc4:	80bb      	strh	r3, [r7, #4]
        rpx = (uint16_t)((dist_cm * RADAR_R_MAX) / RADAR_MAX_RANGE_CM);
 8001cc6:	88bb      	ldrh	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da00      	bge.n	8001cce <Radar_DrawSweep+0x36>
 8001ccc:	3303      	adds	r3, #3
 8001cce:	109b      	asrs	r3, r3, #2
 8001cd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (rpx == 0) rpx = 1;
 8001cd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <Radar_DrawSweep+0x44>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    //aciyi ekrana uyarla
    float theta_deg = 90.0f - (float)angle;
 8001cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ffe5 	bl	8000cb0 <__aeabi_i2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4839      	ldr	r0, [pc, #228]	@ (8001dd0 <Radar_DrawSweep+0x138>)
 8001cec:	f7fe ff2a 	bl	8000b44 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    float th = theta_deg * 3.14f / 180.0f;
 8001cf4:	4937      	ldr	r1, [pc, #220]	@ (8001dd4 <Radar_DrawSweep+0x13c>)
 8001cf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cf8:	f7ff f82e 	bl	8000d58 <__aeabi_fmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4936      	ldr	r1, [pc, #216]	@ (8001dd8 <Radar_DrawSweep+0x140>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f8dd 	bl	8000ec0 <__aeabi_fdiv>
 8001d06:	4603      	mov	r3, r0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int x_end = cx + (int)(rpx * cosf(th));
 8001d0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ffcf 	bl	8000cb0 <__aeabi_i2f>
 8001d12:	4604      	mov	r4, r0
 8001d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d16:	f00c f8f7 	bl	800df08 <cosf>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff f81a 	bl	8000d58 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9dc 	bl	80010e4 <__aeabi_f2iz>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	4413      	add	r3, r2
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    int y_end = cy - (int)(rpx * sinf(th));
 8001d34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ffba 	bl	8000cb0 <__aeabi_i2f>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d40:	f00c f91a 	bl	800df78 <sinf>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4619      	mov	r1, r3
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff f805 	bl	8000d58 <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f9c7 	bl	80010e4 <__aeabi_f2iz>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24

    // Ekranı çiz
    ssd1306_Fill(Black);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f002 ffce 	bl	8004d00 <ssd1306_Fill>
    Radar_DrawGrid(cx, cy);
 8001d64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d68:	f7ff ff84 	bl	8001c74 <Radar_DrawGrid>
    ssd1306_DrawLine(cx, cy, x_end, y_end, White);
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d78:	f7ff fa10 	bl	800119c <OLED_DrawLine>

    char line[24];
    if (dist_ok) snprintf(line, sizeof(line), "%3dcm  %3d derece", dist_cm, angle);
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <Radar_DrawSweep+0x102>
 8001d82:	88ba      	ldrh	r2, [r7, #4]
 8001d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d88:	f107 000c 	add.w	r0, r7, #12
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <Radar_DrawSweep+0x144>)
 8001d92:	2118      	movs	r1, #24
 8001d94:	f009 fedc 	bl	800bb50 <sniprintf>
 8001d98:	e007      	b.n	8001daa <Radar_DrawSweep+0x112>
    else         snprintf(line, sizeof(line), "---cm  %3d derece", angle);
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	f107 000c 	add.w	r0, r7, #12
 8001da2:	4a0f      	ldr	r2, [pc, #60]	@ (8001de0 <Radar_DrawSweep+0x148>)
 8001da4:	2118      	movs	r1, #24
 8001da6:	f009 fed3 	bl	800bb50 <sniprintf>
    ssd1306_SetCursor(2, 0);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2002      	movs	r0, #2
 8001dae:	f003 f8f1 	bl	8004f94 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8001db2:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <Radar_DrawSweep+0x14c>)
 8001db4:	f107 000c 	add.w	r0, r7, #12
 8001db8:	2201      	movs	r2, #1
 8001dba:	9200      	str	r2, [sp, #0]
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	f003 f8c3 	bl	8004f48 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001dc2:	f002 ffb5 	bl	8004d30 <ssd1306_UpdateScreen>
}
 8001dc6:	bf00      	nop
 8001dc8:	3744      	adds	r7, #68	@ 0x44
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	42b40000 	.word	0x42b40000
 8001dd4:	4048f5c3 	.word	0x4048f5c3
 8001dd8:	43340000 	.word	0x43340000
 8001ddc:	0800eb48 	.word	0x0800eb48
 8001de0:	0800eb5c 	.word	0x0800eb5c
 8001de4:	0800ff20 	.word	0x0800ff20

08001de8 <OLED_ShowImageCentered>:



static void OLED_ShowImageCentered(void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
    // 128x64 SSD1306’da ortala
    int x = (128 - IMAGE_W) / 2;  // 32
 8001dee:	2320      	movs	r3, #32
 8001df0:	607b      	str	r3, [r7, #4]
    int y = (64  - IMAGE_H) / 2;  // 0
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
    ssd1306_Fill(Black);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f002 ff82 	bl	8004d00 <ssd1306_Fill>
    ssd1306_DrawBitmap(x, y, (uint8_t*)image_64x64, IMAGE_W, IMAGE_H, White);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	b2d8      	uxtb	r0, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2d9      	uxtb	r1, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2340      	movs	r3, #64	@ 0x40
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <OLED_ShowImageCentered+0x38>)
 8001e10:	f003 f95f 	bl	80050d2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8001e14:	f002 ff8c 	bl	8004d30 <ssd1306_UpdateScreen>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	0800f59c 	.word	0x0800f59c

08001e24 <hcsr04_measure_cm>:


bool hcsr04_measure_cm(uint16_t *out_cm){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    if (!out_cm) return false;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <hcsr04_measure_cm+0x12>
 8001e32:	2300      	movs	r3, #0
 8001e34:	e08e      	b.n	8001f54 <hcsr04_measure_cm+0x130>

    // 3 us TRIG LOW
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3c:	4847      	ldr	r0, [pc, #284]	@ (8001f5c <hcsr04_measure_cm+0x138>)
 8001e3e:	f004 ff74 	bl	8006d2a <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < 3) {}
 8001e4a:	bf00      	nop
 8001e4c:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d9fa      	bls.n	8001e4c <hcsr04_measure_cm+0x28>

    // 10 us TRIG HIGH
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e5c:	483f      	ldr	r0, [pc, #252]	@ (8001f5c <hcsr04_measure_cm+0x138>)
 8001e5e:	f004 ff64 	bl	8006d2a <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < 10) {}
 8001e6a:	bf00      	nop
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d9fa      	bls.n	8001e6c <hcsr04_measure_cm+0x48>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e7c:	4837      	ldr	r0, [pc, #220]	@ (8001f5c <hcsr04_measure_cm+0x138>)
 8001e7e:	f004 ff54 	bl	8006d2a <HAL_GPIO_WritePin>

    // echo rising bekle (10 ms timeout)
    uint32_t t0 = HAL_GetTick();
 8001e82:	f003 fa0b 	bl	800529c <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]
    while(!HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)){
 8001e88:	e00b      	b.n	8001ea2 <hcsr04_measure_cm+0x7e>
        if((HAL_GetTick() - t0) > 10){
 8001e8a:	f003 fa07 	bl	800529c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d904      	bls.n	8001ea2 <hcsr04_measure_cm+0x7e>
            Distance_ok = 0;
 8001e98:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <hcsr04_measure_cm+0x140>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
            return false;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e058      	b.n	8001f54 <hcsr04_measure_cm+0x130>
    while(!HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)){
 8001ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ea6:	4830      	ldr	r0, [pc, #192]	@ (8001f68 <hcsr04_measure_cm+0x144>)
 8001ea8:	f004 ff28 	bl	8006cfc <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0eb      	beq.n	8001e8a <hcsr04_measure_cm+0x66>
        }
    }

    // pulse ölç
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    t0 = HAL_GetTick();
 8001eba:	f003 f9ef 	bl	800529c <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) {
 8001ec0:	e00b      	b.n	8001eda <hcsr04_measure_cm+0xb6>
        if (HAL_GetTick() - t0 > 30) {
 8001ec2:	f003 f9eb 	bl	800529c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b1e      	cmp	r3, #30
 8001ece:	d904      	bls.n	8001eda <hcsr04_measure_cm+0xb6>
            Distance_ok = 0;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <hcsr04_measure_cm+0x140>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
            return false;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e03c      	b.n	8001f54 <hcsr04_measure_cm+0x130>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) {
 8001eda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ede:	4822      	ldr	r0, [pc, #136]	@ (8001f68 <hcsr04_measure_cm+0x144>)
 8001ee0:	f004 ff0c 	bl	8006cfc <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1eb      	bne.n	8001ec2 <hcsr04_measure_cm+0x9e>
        }
    }
    uint32_t pulse_us = __HAL_TIM_GET_COUNTER(&htim1); // 1 tick = 1 us (PSC=71)
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <hcsr04_measure_cm+0x13c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	613b      	str	r3, [r7, #16]

    float cm = (pulse_us * 0.0343f) / 2.0f;
 8001ef2:	6938      	ldr	r0, [r7, #16]
 8001ef4:	f7fe fed8 	bl	8000ca8 <__aeabi_ui2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	491c      	ldr	r1, [pc, #112]	@ (8001f6c <hcsr04_measure_cm+0x148>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff2b 	bl	8000d58 <__aeabi_fmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ffd9 	bl	8000ec0 <__aeabi_fdiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	60fb      	str	r3, [r7, #12]

    // 400 cm üzeri → algılanamıyor kabul et
    if (cm > 400.0f) {
 8001f12:	4917      	ldr	r1, [pc, #92]	@ (8001f70 <hcsr04_measure_cm+0x14c>)
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff f8db 	bl	80010d0 <__aeabi_fcmpgt>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <hcsr04_measure_cm+0x106>
        Distance_ok = 0;
 8001f20:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <hcsr04_measure_cm+0x140>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
        return false;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e014      	b.n	8001f54 <hcsr04_measure_cm+0x130>
    }

    *out_cm = (uint16_t)(cm + 0.5f);
 8001f2a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7fe fe0a 	bl	8000b48 <__addsf3>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f8fa 	bl	8001130 <__aeabi_f2uiz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	801a      	strh	r2, [r3, #0]
    Distance_cm = *out_cm;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <hcsr04_measure_cm+0x150>)
 8001f4a:	801a      	strh	r2, [r3, #0]
    Distance_ok = 1;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <hcsr04_measure_cm+0x140>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    return true;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010800 	.word	0x40010800
 8001f60:	20000520 	.word	0x20000520
 8001f64:	200006fa 	.word	0x200006fa
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	3d0c7e28 	.word	0x3d0c7e28
 8001f70:	43c80000 	.word	0x43c80000
 8001f74:	200006f8 	.word	0x200006f8

08001f78 <set_pwm_freq_duty>:


 void set_pwm_freq_duty(uint32_t freq, uint8_t duty) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
    uint32_t timer_clk = 72000000;  // 72 MHz
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <set_pwm_freq_duty+0x6c>)
 8001f86:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 0; // PSC=0 --> 1
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clk / (prescaler + 1)) / freq - 1;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = ((period + 1) * duty) / 100;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <set_pwm_freq_duty+0x70>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim3, prescaler); //
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <set_pwm_freq_duty+0x74>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim3, period);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <set_pwm_freq_duty+0x74>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fc4:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <set_pwm_freq_duty+0x74>)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <set_pwm_freq_duty+0x74>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4805      	ldr	r0, [pc, #20]	@ (8001fec <set_pwm_freq_duty+0x74>)
 8001fd6:	f006 ff25 	bl	8008e24 <HAL_TIM_PWM_Start>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	044aa200 	.word	0x044aa200
 8001fe8:	51eb851f 	.word	0x51eb851f
 8001fec:	200005b0 	.word	0x200005b0

08001ff0 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    static uint32_t last_falling = 0;
    static uint32_t period = 0;
    static uint32_t high_time = 0;
    static uint8_t state = 0; // 0: rising bekliyor, 1: falling bekliyor

    if (htim->Instance == TIM3) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	@ (800211c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f040 8087 	bne.w	8002112 <HAL_TIM_IC_CaptureCallback+0x122>
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // Rising
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d123      	bne.n	8002054 <HAL_TIM_IC_CaptureCallback+0x64>
            uint32_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800200c:	2104      	movs	r1, #4
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f007 fc24 	bl	800985c <HAL_TIM_ReadCapturedValue>
 8002014:	60b8      	str	r0, [r7, #8]
            if (state == 0) { // Doğru sıralama
 8002016:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d141      	bne.n	80020a2 <HAL_TIM_IC_CaptureCallback+0xb2>
                period = (now >= last_rising) ? (now - last_rising) : ((htim->Init.Period - last_rising) + now + 1);
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	429a      	cmp	r2, r3
 8002026:	d304      	bcc.n	8002032 <HAL_TIM_IC_CaptureCallback+0x42>
 8002028:	4b3e      	ldr	r3, [pc, #248]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	e007      	b.n	8002042 <HAL_TIM_IC_CaptureCallback+0x52>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1ad2      	subs	r2, r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4413      	add	r3, r2
 8002040:	3301      	adds	r3, #1
 8002042:	4a39      	ldr	r2, [pc, #228]	@ (8002128 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002044:	6013      	str	r3, [r2, #0]
                last_rising = now;
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6013      	str	r3, [r2, #0]
                state = 1; // falling bekle
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_TIM_IC_CaptureCallback+0x130>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e026      	b.n	80020a2 <HAL_TIM_IC_CaptureCallback+0xb2>
            }
        }
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) { // Falling
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7f1b      	ldrb	r3, [r3, #28]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d122      	bne.n	80020a2 <HAL_TIM_IC_CaptureCallback+0xb2>
            uint32_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800205c:	2108      	movs	r1, #8
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f007 fbfc 	bl	800985c <HAL_TIM_ReadCapturedValue>
 8002064:	60f8      	str	r0, [r7, #12]
            if (state == 1) {
 8002066:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d119      	bne.n	80020a2 <HAL_TIM_IC_CaptureCallback+0xb2>
                high_time = (now >= last_rising) ? (now - last_rising) : ((htim->Init.Period - last_rising) + now + 1);
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d304      	bcc.n	8002082 <HAL_TIM_IC_CaptureCallback+0x92>
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	e007      	b.n	8002092 <HAL_TIM_IC_CaptureCallback+0xa2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1ad2      	subs	r2, r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	3301      	adds	r3, #1
 8002092:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002094:	6013      	str	r3, [r2, #0]
                last_falling = now;
 8002096:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6013      	str	r3, [r2, #0]
                state = 0; //  tekrar rising bekle
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_TIM_IC_CaptureCallback+0x130>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
            }
        }
        if (period > 0) {
 80020a2:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_TIM_IC_CaptureCallback+0x138>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d033      	beq.n	8002112 <HAL_TIM_IC_CaptureCallback+0x122>
            measured_freq = (float)72000000 / (htim->Init.Prescaler + 1) / period;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fdf9 	bl	8000ca8 <__aeabi_ui2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4619      	mov	r1, r3
 80020ba:	481e      	ldr	r0, [pc, #120]	@ (8002134 <HAL_TIM_IC_CaptureCallback+0x144>)
 80020bc:	f7fe ff00 	bl	8000ec0 <__aeabi_fdiv>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461c      	mov	r4, r3
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_TIM_IC_CaptureCallback+0x138>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fded 	bl	8000ca8 <__aeabi_ui2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7fe fef4 	bl	8000ec0 <__aeabi_fdiv>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_TIM_IC_CaptureCallback+0x148>)
 80020de:	601a      	str	r2, [r3, #0]
            measured_duty = ((float)high_time / (float)period) * 100.0f;
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fddf 	bl	8000ca8 <__aeabi_ui2f>
 80020ea:	4604      	mov	r4, r0
 80020ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_TIM_IC_CaptureCallback+0x138>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fdd9 	bl	8000ca8 <__aeabi_ui2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe fee0 	bl	8000ec0 <__aeabi_fdiv>
 8002100:	4603      	mov	r3, r0
 8002102:	490e      	ldr	r1, [pc, #56]	@ (800213c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fe27 	bl	8000d58 <__aeabi_fmul>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x150>)
 8002110:	601a      	str	r2, [r3, #0]
        }
    }
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	40000400 	.word	0x40000400
 8002120:	20000704 	.word	0x20000704
 8002124:	20000708 	.word	0x20000708
 8002128:	2000070c 	.word	0x2000070c
 800212c:	20000710 	.word	0x20000710
 8002130:	20000714 	.word	0x20000714
 8002134:	4c895440 	.word	0x4c895440
 8002138:	200006f0 	.word	0x200006f0
 800213c:	42c80000 	.word	0x42c80000
 8002140:	200006f4 	.word	0x200006f4

08002144 <Flash_Write_Word>:




void Flash_Write_Word(uint32_t address, uint32_t data){
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800214e:	f004 fac1 	bl	80066d4 <HAL_FLASH_Unlock>

	if(address % 4 != 0){
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <Flash_Write_Word+0x2c>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"Hatalı adres (4 byte hizalama)!\r\n", strlen("Hatalı adres (4-byte hizalama)!\r\n"), HAL_MAX_DELAY);
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	2222      	movs	r2, #34	@ 0x22
 8002162:	492d      	ldr	r1, [pc, #180]	@ (8002218 <Flash_Write_Word+0xd4>)
 8002164:	482d      	ldr	r0, [pc, #180]	@ (800221c <Flash_Write_Word+0xd8>)
 8002166:	f008 f85f 	bl	800a228 <HAL_UART_Transmit>
	        HAL_FLASH_Lock();
 800216a:	f004 fad9 	bl	8006720 <HAL_FLASH_Lock>
	        return;
 800216e:	e050      	b.n	8002212 <Flash_Write_Word+0xce>
	    }

	    // Adresin son page aralığında olup olmadığını kontrol et
	    if(address < FLASH_USER_PAGE_ADDR || address >= (FLASH_USER_PAGE_ADDR + FLASH_PAGE_SIZE)){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <Flash_Write_Word+0xdc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d303      	bcc.n	8002180 <Flash_Write_Word+0x3c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <Flash_Write_Word+0xe0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d909      	bls.n	8002194 <Flash_Write_Word+0x50>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"Adres son page araliginda degil!\r\n", strlen("Adres son page araliginda degil!\r\n"), HAL_MAX_DELAY);
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	2222      	movs	r2, #34	@ 0x22
 8002186:	4928      	ldr	r1, [pc, #160]	@ (8002228 <Flash_Write_Word+0xe4>)
 8002188:	4824      	ldr	r0, [pc, #144]	@ (800221c <Flash_Write_Word+0xd8>)
 800218a:	f008 f84d 	bl	800a228 <HAL_UART_Transmit>
	        HAL_FLASH_Lock();
 800218e:	f004 fac7 	bl	8006720 <HAL_FLASH_Lock>
	        return;
 8002192:	e03e      	b.n	8002212 <Flash_Write_Word+0xce>
	    }

	//page silme
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = address & ~(FLASH_PAGE_SIZE-1); // page baslangici
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
	if((HAL_FLASHEx_Erase(&EraseInitStruct, &PageError)) != HAL_OK){
 80021ac:	f107 020c 	add.w	r2, r7, #12
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fb74 	bl	80068a4 <HAL_FLASHEx_Erase>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <Flash_Write_Word+0x92>
	         HAL_UART_Transmit(&huart1, ((uint8_t*)"Silme basarisiz. \r\n"), strlen("Silme basarisiz. \r\n"), HAL_MAX_DELAY);
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	2213      	movs	r2, #19
 80021c8:	4918      	ldr	r1, [pc, #96]	@ (800222c <Flash_Write_Word+0xe8>)
 80021ca:	4814      	ldr	r0, [pc, #80]	@ (800221c <Flash_Write_Word+0xd8>)
 80021cc:	f008 f82c 	bl	800a228 <HAL_UART_Transmit>
	         HAL_FLASH_Lock();
 80021d0:	f004 faa6 	bl	8006720 <HAL_FLASH_Lock>
	         return;
 80021d4:	e01d      	b.n	8002212 <Flash_Write_Word+0xce>
	}

	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	461c      	mov	r4, r3
 80021dc:	4615      	mov	r5, r2
 80021de:	4622      	mov	r2, r4
 80021e0:	462b      	mov	r3, r5
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	2002      	movs	r0, #2
 80021e6:	f004 fa05 	bl	80065f4 <HAL_FLASH_Program>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <Flash_Write_Word+0xbc>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Yazma basarili. \r\n",strlen("Yazma basarili. \r\n"), HAL_MAX_DELAY);
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	2212      	movs	r2, #18
 80021f6:	490e      	ldr	r1, [pc, #56]	@ (8002230 <Flash_Write_Word+0xec>)
 80021f8:	4808      	ldr	r0, [pc, #32]	@ (800221c <Flash_Write_Word+0xd8>)
 80021fa:	f008 f815 	bl	800a228 <HAL_UART_Transmit>
 80021fe:	e006      	b.n	800220e <Flash_Write_Word+0xca>
	}
	else
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Yazma basarisiz. \r\n", strlen("Yazma basarisiz. \r\n"), HAL_MAX_DELAY);
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	2213      	movs	r2, #19
 8002206:	490b      	ldr	r1, [pc, #44]	@ (8002234 <Flash_Write_Word+0xf0>)
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <Flash_Write_Word+0xd8>)
 800220a:	f008 f80d 	bl	800a228 <HAL_UART_Transmit>
	}

	HAL_FLASH_Lock();
 800220e:	f004 fa87 	bl	8006720 <HAL_FLASH_Lock>
}
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bdb0      	pop	{r4, r5, r7, pc}
 8002218:	0800eb70 	.word	0x0800eb70
 800221c:	200005f8 	.word	0x200005f8
 8002220:	0801fc00 	.word	0x0801fc00
 8002224:	0801ffff 	.word	0x0801ffff
 8002228:	0800eb94 	.word	0x0800eb94
 800222c:	0800ebb8 	.word	0x0800ebb8
 8002230:	0800ebcc 	.word	0x0800ebcc
 8002234:	0800ebe0 	.word	0x0800ebe0

08002238 <Flash_Read_Word>:

uint32_t Flash_Read_Word(uint32_t address){
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	return *(volatile uint32_t*) address;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <calc_acceleration_ms2>:





void calc_acceleration_ms2(int16_t xraw, int16_t yraw, int16_t zraw, float* ax, float* ay, float* az){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	4603      	mov	r3, r0
 800225a:	81fb      	strh	r3, [r7, #14]
 800225c:	460b      	mov	r3, r1
 800225e:	81bb      	strh	r3, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	817b      	strh	r3, [r7, #10]
	*ax = ((float)xraw / 256.0) * 9.81f;
 8002264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd21 	bl	8000cb0 <__aeabi_i2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8e3 	bl	800043c <__aeabi_f2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <calc_acceleration_ms2+0xe8>)
 800227c:	f7fe fa60 	bl	8000740 <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	a329      	add	r3, pc, #164	@ (adr r3, 8002330 <calc_acceleration_ms2+0xe0>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f92d 	bl	80004ec <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fbff 	bl	8000a9c <__aeabi_d2f>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	601a      	str	r2, [r3, #0]
	*ay = ((float)yraw / 256.0) * 9.81f;
 80022a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fd01 	bl	8000cb0 <__aeabi_i2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f8c3 	bl	800043c <__aeabi_f2d>
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <calc_acceleration_ms2+0xe8>)
 80022bc:	f7fe fa40 	bl	8000740 <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	a319      	add	r3, pc, #100	@ (adr r3, 8002330 <calc_acceleration_ms2+0xe0>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe f90d 	bl	80004ec <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fbdf 	bl	8000a9c <__aeabi_d2f>
 80022de:	4602      	mov	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]
	*az = ((float)zraw / 256.0) * 9.81f;
 80022e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fce1 	bl	8000cb0 <__aeabi_i2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f8a3 	bl	800043c <__aeabi_f2d>
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <calc_acceleration_ms2+0xe8>)
 80022fc:	f7fe fa20 	bl	8000740 <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	a309      	add	r3, pc, #36	@ (adr r3, 8002330 <calc_acceleration_ms2+0xe0>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f8ed 	bl	80004ec <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fbbf 	bl	8000a9c <__aeabi_d2f>
 800231e:	4602      	mov	r2, r0
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	f3af 8000 	nop.w
 8002330:	60000000 	.word	0x60000000
 8002334:	40239eb8 	.word	0x40239eb8
 8002338:	40700000 	.word	0x40700000

0800233c <adxl345_init>:

void adxl345_init(I2C_HandleTypeDef *hi2c){
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af04      	add	r7, sp, #16
 8002342:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x08;
 8002344:	2308      	movs	r3, #8
 8002346:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_POWER_CTL, 1, &data, 1, 100);
 8002348:	2364      	movs	r3, #100	@ 0x64
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	2301      	movs	r3, #1
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	f107 030f 	add.w	r3, r7, #15
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	222d      	movs	r2, #45	@ 0x2d
 800235a:	21a6      	movs	r1, #166	@ 0xa6
 800235c:	480a      	ldr	r0, [pc, #40]	@ (8002388 <adxl345_init+0x4c>)
 800235e:	f004 fe59 	bl	8007014 <HAL_I2C_Mem_Write>

	data = 0x08;
 8002362:	2308      	movs	r3, #8
 8002364:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_DATA_FORMAT, 1, &data, 1, 100);
 8002366:	2364      	movs	r3, #100	@ 0x64
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f107 030f 	add.w	r3, r7, #15
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	2231      	movs	r2, #49	@ 0x31
 8002378:	21a6      	movs	r1, #166	@ 0xa6
 800237a:	4803      	ldr	r0, [pc, #12]	@ (8002388 <adxl345_init+0x4c>)
 800237c:	f004 fe4a 	bl	8007014 <HAL_I2C_Mem_Write>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200004c0 	.word	0x200004c0

0800238c <adxl345_read_xyz>:

void adxl345_read_xyz(I2C_HandleTypeDef *hi2c, int16_t *x, int16_t *y, int16_t *z){
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
	uint8_t rawData[6];
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_ADDR, ADXL345_REG_DATAX0, 1, rawData, 6, 100);
 800239a:	2364      	movs	r3, #100	@ 0x64
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	2306      	movs	r3, #6
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	2232      	movs	r2, #50	@ 0x32
 80023ac:	21a6      	movs	r1, #166	@ 0xa6
 80023ae:	4812      	ldr	r0, [pc, #72]	@ (80023f8 <adxl345_read_xyz+0x6c>)
 80023b0:	f004 ff2a 	bl	8007208 <HAL_I2C_Mem_Read>

	*x = (int16_t)((rawData[1] << 8) | rawData[0]);
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	7c3b      	ldrb	r3, [r7, #16]
 80023be:	b21b      	sxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((rawData[3] << 8) | rawData[2]);
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	7cbb      	ldrb	r3, [r7, #18]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((rawData[5] << 8) | rawData[4]);
 80023dc:	7d7b      	ldrb	r3, [r7, #21]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	7d3b      	ldrb	r3, [r7, #20]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	801a      	strh	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200004c0 	.word	0x200004c0

080023fc <measureCapacitance>:

float measureCapacitance()
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b090      	sub	sp, #64	@ 0x40
 8002400:	af00      	add	r7, sp, #0
    // 1. PA5 çıkış moduna alındı LOW yapıldı
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002410:	2320      	movs	r3, #32
 8002412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2302      	movs	r3, #2
 800241e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4619      	mov	r1, r3
 8002426:	4834      	ldr	r0, [pc, #208]	@ (80024f8 <measureCapacitance+0xfc>)
 8002428:	f004 fae4 	bl	80069f4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	2120      	movs	r1, #32
 8002430:	4831      	ldr	r0, [pc, #196]	@ (80024f8 <measureCapacitance+0xfc>)
 8002432:	f004 fc7a 	bl	8006d2a <HAL_GPIO_WritePin>
    HAL_Delay(50);  // CAP 50ms'de boşaltıldı
 8002436:	2032      	movs	r0, #50	@ 0x32
 8002438:	f002 ff3a 	bl	80052b0 <HAL_Delay>

    // 2. PA5 pinini ADC girişine çevirildi
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243c:	2303      	movs	r3, #3
 800243e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	482c      	ldr	r0, [pc, #176]	@ (80024f8 <measureCapacitance+0xfc>)
 8002448:	f004 fad4 	bl	80069f4 <HAL_GPIO_Init>

// ADC PA5 channel ayarları yapıldı
    ADC_ChannelConfTypeDef sConfig = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_5;
 8002456:	2305      	movs	r3, #5
 8002458:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800245a:	2301      	movs	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4825      	ldr	r0, [pc, #148]	@ (80024fc <measureCapacitance+0x100>)
 8002468:	f003 fb1a 	bl	8005aa0 <HAL_ADC_ConfigChannel>

    // 4. Zamanı başlat
    uint32_t startTick = HAL_GetTick();
 800246c:	f002 ff16 	bl	800529c <HAL_GetTick>
 8002470:	63b8      	str	r0, [r7, #56]	@ 0x38

    float voltage = 0;
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float targetVoltage = 3.3f * 0.63f;  // 63% = RC sabiti
 8002478:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <measureCapacitance+0x104>)
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (voltage < targetVoltage)
 800247c:	e01c      	b.n	80024b8 <measureCapacitance+0xbc>
    {
        HAL_ADC_Start(&hadc1);
 800247e:	481f      	ldr	r0, [pc, #124]	@ (80024fc <measureCapacitance+0x100>)
 8002480:	f003 f812 	bl	80054a8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	481c      	ldr	r0, [pc, #112]	@ (80024fc <measureCapacitance+0x100>)
 800248a:	f003 f8bb 	bl	8005604 <HAL_ADC_PollForConversion>
        uint16_t adcVal = HAL_ADC_GetValue(&hadc1);
 800248e:	481b      	ldr	r0, [pc, #108]	@ (80024fc <measureCapacitance+0x100>)
 8002490:	f003 fae8 	bl	8005a64 <HAL_ADC_GetValue>
 8002494:	4603      	mov	r3, r0
 8002496:	847b      	strh	r3, [r7, #34]	@ 0x22
        voltage = (3.3f * adcVal) / 4095.0f;
 8002498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fc08 	bl	8000cb0 <__aeabi_i2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4918      	ldr	r1, [pc, #96]	@ (8002504 <measureCapacitance+0x108>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fc57 	bl	8000d58 <__aeabi_fmul>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4916      	ldr	r1, [pc, #88]	@ (8002508 <measureCapacitance+0x10c>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fd06 	bl	8000ec0 <__aeabi_fdiv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (voltage < targetVoltage)
 80024b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80024bc:	f7fe fdea 	bl	8001094 <__aeabi_fcmplt>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1db      	bne.n	800247e <measureCapacitance+0x82>
    }

    uint32_t endTick = HAL_GetTick();
 80024c6:	f002 fee9 	bl	800529c <HAL_GetTick>
 80024ca:	6338      	str	r0, [r7, #48]	@ 0x30
    float sure = (float)(endTick - startTick);  // ms cinsinden
 80024cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fbe8 	bl	8000ca8 <__aeabi_ui2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float resistance = 10.0f;  // 10kΩ kullanıyorsan
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <measureCapacitance+0x110>)
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
    float capacitance_uF = sure / resistance;
 80024e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e4:	f7fe fcec 	bl	8000ec0 <__aeabi_fdiv>
 80024e8:	4603      	mov	r3, r0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    return capacitance_uF;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3740      	adds	r7, #64	@ 0x40
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40010800 	.word	0x40010800
 80024fc:	2000044c 	.word	0x2000044c
 8002500:	40050e56 	.word	0x40050e56
 8002504:	40533333 	.word	0x40533333
 8002508:	457ff000 	.word	0x457ff000
 800250c:	41200000 	.word	0x41200000

08002510 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 800251a:	f002 febf 	bl	800529c <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_8)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002526:	d115      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x44>
    {
        if (current_time - last_interrupt_time < 200)
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_GPIO_EXTI_Callback+0x4c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2bc7      	cmp	r3, #199	@ 0xc7
 8002532:	d90e      	bls.n	8002552 <HAL_GPIO_EXTI_Callback+0x42>
            return;
        last_interrupt_time = current_time;
 8002534:	4a09      	ldr	r2, [pc, #36]	@ (800255c <HAL_GPIO_EXTI_Callback+0x4c>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6013      	str	r3, [r2, #0]

        // Komutu manuel buffer'a yaz
        strcpy(rxBuffer, "ADC;SHOW;RESISTOR");
 800253a:	4a09      	ldr	r2, [pc, #36]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x50>)
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x54>)
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	682b      	ldr	r3, [r5, #0]
 8002548:	8023      	strh	r3, [r4, #0]
        process_uart = true;
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x58>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e000      	b.n	8002554 <HAL_GPIO_EXTI_Callback+0x44>
            return;
 8002552:	bf00      	nop
    }
}
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000718 	.word	0x20000718
 8002560:	20000654 	.word	0x20000654
 8002564:	0800ebf4 	.word	0x0800ebf4
 8002568:	200006d6 	.word	0x200006d6

0800256c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_UART_RxCpltCallback+0x6c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d128      	bne.n	80025d0 <HAL_UART_RxCpltCallback+0x64>
		 if (rxData == '\n'){ 								//enter gelince komutu tamamlandı
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <HAL_UART_RxCpltCallback+0x70>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d10c      	bne.n	80025a0 <HAL_UART_RxCpltCallback+0x34>
			 rxBuffer[rxIndex] = '\0';						// null terminate
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_UART_RxCpltCallback+0x78>)
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]
			 //command(rxBuffer);								// komutu işle
			 rxIndex = 0;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
			 process_uart = true;
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_UART_RxCpltCallback+0x7c>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e012      	b.n	80025c6 <HAL_UART_RxCpltCallback+0x5a>

		 }
		 else{
			 if (rxIndex < RX_BUFFER_SIZE - 1){
 80025a0:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80025a6:	d80b      	bhi.n	80025c0 <HAL_UART_RxCpltCallback+0x54>
				 rxBuffer[rxIndex++] = rxData;				//karakteri kaydete
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	b2d1      	uxtb	r1, r2
 80025b0:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 80025b2:	7011      	strb	r1, [r2, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_UART_RxCpltCallback+0x70>)
 80025b8:	7819      	ldrb	r1, [r3, #0]
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_UART_RxCpltCallback+0x78>)
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	e002      	b.n	80025c6 <HAL_UART_RxCpltCallback+0x5a>
			 }
			 else{
				 rxIndex = 0;								// taşma olursa sıfırla
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <HAL_UART_RxCpltCallback+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
			 }
		 }
		 HAL_UART_Receive_IT(&huart1, &rxData, 1);			// yeni veri için kesmeyi tekrar başlat
 80025c6:	2201      	movs	r2, #1
 80025c8:	4904      	ldr	r1, [pc, #16]	@ (80025dc <HAL_UART_RxCpltCallback+0x70>)
 80025ca:	4808      	ldr	r0, [pc, #32]	@ (80025ec <HAL_UART_RxCpltCallback+0x80>)
 80025cc:	f007 feb7 	bl	800a33e <HAL_UART_Receive_IT>
	 }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013800 	.word	0x40013800
 80025dc:	200006d4 	.word	0x200006d4
 80025e0:	200006d5 	.word	0x200006d5
 80025e4:	20000654 	.word	0x20000654
 80025e8:	200006d6 	.word	0x200006d6
 80025ec:	200005f8 	.word	0x200005f8

080025f0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x48>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d116      	bne.n	8002630 <HAL_ADC_ConvCpltCallback+0x40>
        adcDataReady = 1;
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
        char msg[] = "ADC Hazir!\r\n";
 8002608:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x50>)
 800260a:	f107 0408 	add.w	r4, r7, #8
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	c407      	stmia	r4!, {r0, r1, r2}
 8002612:	7023      	strb	r3, [r4, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd fda3 	bl	8000164 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	b29a      	uxth	r2, r3
 8002622:	f107 0108 	add.w	r1, r7, #8
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	4806      	ldr	r0, [pc, #24]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x54>)
 800262c:	f007 fdfc 	bl	800a228 <HAL_UART_Transmit>
    }
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	40012400 	.word	0x40012400
 800263c:	20000648 	.word	0x20000648
 8002640:	0800ec08 	.word	0x0800ec08
 8002644:	200005f8 	.word	0x200005f8

08002648 <adcToVoltage>:
float adcToVoltage(uint16_t adcVal) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
    return (3.3f * adcVal) / 4095.0f;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb2b 	bl	8000cb0 <__aeabi_i2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <adcToVoltage+0x30>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fb7a 	bl	8000d58 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	4905      	ldr	r1, [pc, #20]	@ (800267c <adcToVoltage+0x34>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fc29 	bl	8000ec0 <__aeabi_fdiv>
 800266e:	4603      	mov	r3, r0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40533333 	.word	0x40533333
 800267c:	457ff000 	.word	0x457ff000

08002680 <command>:



void command(char *cmd){
 8002680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002684:	f5ad 7d63 	sub.w	sp, sp, #908	@ 0x38c
 8002688:	af08      	add	r7, sp, #32
 800268a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800268e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002692:	6018      	str	r0, [r3, #0]
	char *token1 = strtok(cmd, ";");
 8002694:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002698:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800269c:	49b4      	ldr	r1, [pc, #720]	@ (8002970 <command+0x2f0>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	f009 fb9c 	bl	800bddc <strtok>
 80026a4:	f8c7 0358 	str.w	r0, [r7, #856]	@ 0x358
	char *token2 = strtok(NULL, ";");
 80026a8:	49b1      	ldr	r1, [pc, #708]	@ (8002970 <command+0x2f0>)
 80026aa:	2000      	movs	r0, #0
 80026ac:	f009 fb96 	bl	800bddc <strtok>
 80026b0:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
	char *token3 = strtok(NULL, ";");
 80026b4:	49ae      	ldr	r1, [pc, #696]	@ (8002970 <command+0x2f0>)
 80026b6:	2000      	movs	r0, #0
 80026b8:	f009 fb90 	bl	800bddc <strtok>
 80026bc:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
	char *token4 = strtok(NULL, ";");
 80026c0:	49ab      	ldr	r1, [pc, #684]	@ (8002970 <command+0x2f0>)
 80026c2:	2000      	movs	r0, #0
 80026c4:	f009 fb8a 	bl	800bddc <strtok>
 80026c8:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c

	for(int i = 0; cmd[i]; i++) {
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 80026d2:	e019      	b.n	8002708 <command+0x88>
	    if (cmd[i] == '\r') cmd[i] = '\0';
 80026d4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80026d8:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 80026dc:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b0d      	cmp	r3, #13
 80026e8:	d109      	bne.n	80026fe <command+0x7e>
 80026ea:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80026ee:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 80026f2:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; cmd[i]; i++) {
 80026fe:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002702:	3301      	adds	r3, #1
 8002704:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8002708:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800270c:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002710:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4413      	add	r3, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1da      	bne.n	80026d4 <command+0x54>
	}
	if (token1 == NULL) return;
 800271e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002722:	2b00      	cmp	r3, #0
 8002724:	f001 868f 	beq.w	8004446 <command+0x1dc6>
	char msg[100];
	sprintf(msg, "token1: '%s', token2: '%s', token3: '%s'\r\n",
 8002728:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <command+0xb6>
 8002730:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8002734:	e000      	b.n	8002738 <command+0xb8>
 8002736:	4a8f      	ldr	r2, [pc, #572]	@ (8002974 <command+0x2f4>)
 8002738:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <command+0xc6>
 8002740:	f8d7 1354 	ldr.w	r1, [r7, #852]	@ 0x354
 8002744:	e000      	b.n	8002748 <command+0xc8>
 8002746:	498b      	ldr	r1, [pc, #556]	@ (8002974 <command+0x2f4>)
 8002748:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <command+0xd6>
 8002750:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002754:	e000      	b.n	8002758 <command+0xd8>
 8002756:	4b87      	ldr	r3, [pc, #540]	@ (8002974 <command+0x2f4>)
 8002758:	f507 701c 	add.w	r0, r7, #624	@ 0x270
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	460b      	mov	r3, r1
 8002760:	4985      	ldr	r1, [pc, #532]	@ (8002978 <command+0x2f8>)
 8002762:	f009 fa2b 	bl	800bbbc <siprintf>
	        token1 ? token1 : "NULL",
	        token2 ? token2 : "NULL",
	        token3 ? token3 : "NULL");
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002766:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fcfa 	bl	8000164 <strlen>
 8002770:	4603      	mov	r3, r0
 8002772:	b29a      	uxth	r2, r3
 8002774:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	487f      	ldr	r0, [pc, #508]	@ (800297c <command+0x2fc>)
 800277e:	f007 fd53 	bl	800a228 <HAL_UART_Transmit>

	if (strcmp(token1, "LED") == 0){
 8002782:	497f      	ldr	r1, [pc, #508]	@ (8002980 <command+0x300>)
 8002784:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8002788:	f7fd fce2 	bl	8000150 <strcmp>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 810c 	bne.w	80029ac <command+0x32c>
		if (token2 == NULL){
 8002794:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11c      	bne.n	80027d6 <command+0x156>
			char msg[] = "LED icin ON veya OFF giriniz.\r\n";
 800279c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80027a0:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80027a4:	4a77      	ldr	r2, [pc, #476]	@ (8002984 <command+0x304>)
 80027a6:	461c      	mov	r4, r3
 80027a8:	4615      	mov	r5, r2
 80027aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fcd2 	bl	8000164 <strlen>
 80027c0:	4603      	mov	r3, r0
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f107 010c 	add.w	r1, r7, #12
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	486b      	ldr	r0, [pc, #428]	@ (800297c <command+0x2fc>)
 80027ce:	f007 fd2b 	bl	800a228 <HAL_UART_Transmit>
 80027d2:	f001 be39 	b.w	8004448 <command+0x1dc8>
			return;
		}

		if (strcmp(token2, "ON") == 0){
 80027d6:	496c      	ldr	r1, [pc, #432]	@ (8002988 <command+0x308>)
 80027d8:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80027dc:	f7fd fcb8 	bl	8000150 <strcmp>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11f      	bne.n	8002826 <command+0x1a6>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027ec:	4867      	ldr	r0, [pc, #412]	@ (800298c <command+0x30c>)
 80027ee:	f004 fa9c 	bl	8006d2a <HAL_GPIO_WritePin>
			char msg[] = "LED acildi.\r\n";
 80027f2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80027f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027fa:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <command+0x310>)
 80027fc:	461c      	mov	r4, r3
 80027fe:	4613      	mov	r3, r2
 8002800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002802:	c407      	stmia	r4!, {r0, r1, r2}
 8002804:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002806:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fcaa 	bl	8000164 <strlen>
 8002810:	4603      	mov	r3, r0
 8002812:	b29a      	uxth	r2, r3
 8002814:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	4857      	ldr	r0, [pc, #348]	@ (800297c <command+0x2fc>)
 800281e:	f007 fd03 	bl	800a228 <HAL_UART_Transmit>
 8002822:	f001 be07 	b.w	8004434 <command+0x1db4>
		}
		else if (strcmp(token2, "OFF") == 0){
 8002826:	495b      	ldr	r1, [pc, #364]	@ (8002994 <command+0x314>)
 8002828:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 800282c:	f7fd fc90 	bl	8000150 <strcmp>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d120      	bne.n	8002878 <command+0x1f8>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002836:	2201      	movs	r2, #1
 8002838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800283c:	4853      	ldr	r0, [pc, #332]	@ (800298c <command+0x30c>)
 800283e:	f004 fa74 	bl	8006d2a <HAL_GPIO_WritePin>
			char msg[] = "LED kapatildi.\r\n";
 8002842:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002846:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800284a:	4a53      	ldr	r2, [pc, #332]	@ (8002998 <command+0x318>)
 800284c:	461c      	mov	r4, r3
 800284e:	4615      	mov	r5, r2
 8002850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002858:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fc81 	bl	8000164 <strlen>
 8002862:	4603      	mov	r3, r0
 8002864:	b29a      	uxth	r2, r3
 8002866:	f507 7113 	add.w	r1, r7, #588	@ 0x24c
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	4843      	ldr	r0, [pc, #268]	@ (800297c <command+0x2fc>)
 8002870:	f007 fcda 	bl	800a228 <HAL_UART_Transmit>
 8002874:	f001 bdde 	b.w	8004434 <command+0x1db4>
		}
		else if(strcmp(token2, "STATUS") == 0){
 8002878:	4948      	ldr	r1, [pc, #288]	@ (800299c <command+0x31c>)
 800287a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 800287e:	f7fd fc67 	bl	8000150 <strcmp>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d14f      	bne.n	8002928 <command+0x2a8>
			GPIO_PinState state = HAL_GPIO_ReadPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002888:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800288c:	483f      	ldr	r0, [pc, #252]	@ (800298c <command+0x30c>)
 800288e:	f004 fa35 	bl	8006cfc <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 32d7 	strb.w	r3, [r7, #727]	@ 0x2d7
				if(state == GPIO_PIN_RESET){
 8002898:	f897 32d7 	ldrb.w	r3, [r7, #727]	@ 0x2d7
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11d      	bne.n	80028dc <command+0x25c>
					char msg[] = "LED acik durumda. \r\n";
 80028a0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80028a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028a8:	4a3d      	ldr	r2, [pc, #244]	@ (80029a0 <command+0x320>)
 80028aa:	461c      	mov	r4, r3
 80028ac:	4615      	mov	r5, r2
 80028ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028b6:	6020      	str	r0, [r4, #0]
 80028b8:	3404      	adds	r4, #4
 80028ba:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80028bc:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fc4f 	bl	8000164 <strlen>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	f507 710d 	add.w	r1, r7, #564	@ 0x234
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	482a      	ldr	r0, [pc, #168]	@ (800297c <command+0x2fc>)
 80028d4:	f007 fca8 	bl	800a228 <HAL_UART_Transmit>
 80028d8:	f001 bdac 	b.w	8004434 <command+0x1db4>
				}
				else if(state == GPIO_PIN_SET){
 80028dc:	f897 32d7 	ldrb.w	r3, [r7, #727]	@ 0x2d7
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f041 85a7 	bne.w	8004434 <command+0x1db4>
					char msg[] = "LED kapali durumda. \r\n";
 80028e6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80028ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028ee:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <command+0x324>)
 80028f0:	461c      	mov	r4, r3
 80028f2:	4615      	mov	r5, r2
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028fc:	6020      	str	r0, [r4, #0]
 80028fe:	3404      	adds	r4, #4
 8002900:	8021      	strh	r1, [r4, #0]
 8002902:	3402      	adds	r4, #2
 8002904:	0c0b      	lsrs	r3, r1, #16
 8002906:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002908:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc29 	bl	8000164 <strlen>
 8002912:	4603      	mov	r3, r0
 8002914:	b29a      	uxth	r2, r3
 8002916:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	4817      	ldr	r0, [pc, #92]	@ (800297c <command+0x2fc>)
 8002920:	f007 fc82 	bl	800a228 <HAL_UART_Transmit>
 8002924:	f001 bd86 	b.w	8004434 <command+0x1db4>
				}
		}
		else{
			char msg[] = "Gecersiz LED komutu. Ornek komutlar icin HELP; yaziniz. \r\n";
 8002928:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800292c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <command+0x328>)
 8002932:	461c      	mov	r4, r3
 8002934:	4615      	mov	r5, r2
 8002936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002946:	c403      	stmia	r4!, {r0, r1}
 8002948:	8022      	strh	r2, [r4, #0]
 800294a:	3402      	adds	r4, #2
 800294c:	0c13      	lsrs	r3, r2, #16
 800294e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fc05 	bl	8000164 <strlen>
 800295a:	4603      	mov	r3, r0
 800295c:	b29a      	uxth	r2, r3
 800295e:	f107 010c 	add.w	r1, r7, #12
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <command+0x2fc>)
 8002968:	f007 fc5e 	bl	800a228 <HAL_UART_Transmit>
 800296c:	f001 bd62 	b.w	8004434 <command+0x1db4>
 8002970:	0800ec18 	.word	0x0800ec18
 8002974:	0800ec1c 	.word	0x0800ec1c
 8002978:	0800ec24 	.word	0x0800ec24
 800297c:	200005f8 	.word	0x200005f8
 8002980:	0800ec50 	.word	0x0800ec50
 8002984:	0800f080 	.word	0x0800f080
 8002988:	0800ec54 	.word	0x0800ec54
 800298c:	40011000 	.word	0x40011000
 8002990:	0800f0a0 	.word	0x0800f0a0
 8002994:	0800ec58 	.word	0x0800ec58
 8002998:	0800f0b0 	.word	0x0800f0b0
 800299c:	0800ec5c 	.word	0x0800ec5c
 80029a0:	0800f0c4 	.word	0x0800f0c4
 80029a4:	0800f0dc 	.word	0x0800f0dc
 80029a8:	0800f0f4 	.word	0x0800f0f4
		}
	}

	else if (strcmp(token1, "OLED") == 0 && strcmp(token2, "WRITE") == 0){
 80029ac:	49be      	ldr	r1, [pc, #760]	@ (8002ca8 <command+0x628>)
 80029ae:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80029b2:	f7fd fbcd 	bl	8000150 <strcmp>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 80d6 	bne.w	8002b6a <command+0x4ea>
 80029be:	49bb      	ldr	r1, [pc, #748]	@ (8002cac <command+0x62c>)
 80029c0:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80029c4:	f7fd fbc4 	bl	8000150 <strcmp>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80cd 	bne.w	8002b6a <command+0x4ea>
		char *start = strchr(cmd, '"');
 80029d0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80029d4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80029d8:	2122      	movs	r1, #34	@ 0x22
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	f009 f9f0 	bl	800bdc0 <strchr>
 80029e0:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
		char *end = strchr(cmd, '"');
 80029e4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80029e8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80029ec:	2122      	movs	r1, #34	@ 0x22
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f009 f9e6 	bl	800bdc0 <strchr>
 80029f4:	f8c7 0344 	str.w	r0, [r7, #836]	@ 0x344

		if(start && end && end > start + 1){
 80029f8:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d059      	beq.n	8002ab4 <command+0x434>
 8002a00:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d055      	beq.n	8002ab4 <command+0x434>
 8002a08:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d94e      	bls.n	8002ab4 <command+0x434>
			//tırnak arasını kopyala
			char text[64];
			size_t len = (size_t)(end-start-1);
 8002a16:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8002a1a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
			if (len >= sizeof(text)) len = sizeof(text) - 1;
 8002a26:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a2c:	d902      	bls.n	8002a34 <command+0x3b4>
 8002a2e:	233f      	movs	r3, #63	@ 0x3f
 8002a30:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
			memcpy(text, start+1, len);
 8002a34:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002a38:	1c59      	adds	r1, r3, #1
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8002a42:	4618      	mov	r0, r3
 8002a44:	f009 faab 	bl	800bf9e <memcpy>
			text[len] = '\0';
 8002a48:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a4c:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 8002a50:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002a54:	4413      	add	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]

			  ssd1306_Fill(Black);                 // ekranı temizle
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f002 f950 	bl	8004d00 <ssd1306_Fill>
			            ssd1306_SetCursor(0, 0);             // sol üst
 8002a60:	2100      	movs	r1, #0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f002 fa96 	bl	8004f94 <ssd1306_SetCursor>
			            ssd1306_WriteString(text, Font_7x10, White);
 8002a68:	4b91      	ldr	r3, [pc, #580]	@ (8002cb0 <command+0x630>)
 8002a6a:	f107 000c 	add.w	r0, r7, #12
 8002a6e:	2201      	movs	r2, #1
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a74:	f002 fa68 	bl	8004f48 <ssd1306_WriteString>
			            ssd1306_UpdateScreen();
 8002a78:	f002 f95a 	bl	8004d30 <ssd1306_UpdateScreen>

			            char ok[] = "OLED yazi gosterildi.\r\n";
 8002a7c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002a80:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a84:	4a8b      	ldr	r2, [pc, #556]	@ (8002cb4 <command+0x634>)
 8002a86:	461c      	mov	r4, r3
 8002a88:	4615      	mov	r5, r2
 8002a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a92:	e884 0003 	stmia.w	r4, {r0, r1}
			            HAL_UART_Transmit(&huart1, (uint8_t*)ok, strlen(ok), HAL_MAX_DELAY);
 8002a96:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fb62 	bl	8000164 <strlen>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	4882      	ldr	r0, [pc, #520]	@ (8002cb8 <command+0x638>)
 8002aae:	f007 fbbb 	bl	800a228 <HAL_UART_Transmit>
		if(start && end && end > start + 1){
 8002ab2:	e050      	b.n	8002b56 <command+0x4d6>
		}
		 else if (token3 && *token3) {
 8002ab4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d031      	beq.n	8002b20 <command+0x4a0>
 8002abc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02c      	beq.n	8002b20 <command+0x4a0>

		            ssd1306_Fill(Black);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f002 f91a 	bl	8004d00 <ssd1306_Fill>
		            ssd1306_SetCursor(0, 0);
 8002acc:	2100      	movs	r1, #0
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f002 fa60 	bl	8004f94 <ssd1306_SetCursor>
		            ssd1306_WriteString(token3, Font_7x10, White);
 8002ad4:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <command+0x630>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	9200      	str	r2, [sp, #0]
 8002ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002adc:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8002ae0:	f002 fa32 	bl	8004f48 <ssd1306_WriteString>
		            ssd1306_UpdateScreen();
 8002ae4:	f002 f924 	bl	8004d30 <ssd1306_UpdateScreen>

		            char ok[] = "OLED yazi gosterildi.\r\n";
 8002ae8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002aec:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002af0:	4a70      	ldr	r2, [pc, #448]	@ (8002cb4 <command+0x634>)
 8002af2:	461c      	mov	r4, r3
 8002af4:	4615      	mov	r5, r2
 8002af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002afe:	e884 0003 	stmia.w	r4, {r0, r1}
		            HAL_UART_Transmit(&huart1, (uint8_t*)ok, strlen(ok), HAL_MAX_DELAY);
 8002b02:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fb2c 	bl	8000164 <strlen>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f507 71f6 	add.w	r1, r7, #492	@ 0x1ec
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	4867      	ldr	r0, [pc, #412]	@ (8002cb8 <command+0x638>)
 8002b1a:	f007 fb85 	bl	800a228 <HAL_UART_Transmit>
		 else if (token3 && *token3) {
 8002b1e:	e01a      	b.n	8002b56 <command+0x4d6>
		        }
		 else {
		             char err[] = "OLED;WRITE;\"metin\" yaziniz.\r\n";
 8002b20:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b24:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b28:	4a64      	ldr	r2, [pc, #400]	@ (8002cbc <command+0x63c>)
 8002b2a:	461c      	mov	r4, r3
 8002b2c:	4615      	mov	r5, r2
 8002b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b36:	c407      	stmia	r4!, {r0, r1, r2}
 8002b38:	8023      	strh	r3, [r4, #0]
		             HAL_UART_Transmit(&huart1, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8002b3a:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fb10 	bl	8000164 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	f507 71e6 	add.w	r1, r7, #460	@ 0x1cc
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	4859      	ldr	r0, [pc, #356]	@ (8002cb8 <command+0x638>)
 8002b52:	f007 fb69 	bl	800a228 <HAL_UART_Transmit>
		         }

		memset(rxBuffer, 0, sizeof(rxBuffer));
 8002b56:	2280      	movs	r2, #128	@ 0x80
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4859      	ldr	r0, [pc, #356]	@ (8002cc0 <command+0x640>)
 8002b5c:	f009 f928 	bl	800bdb0 <memset>
		        process_uart = false;
 8002b60:	4b58      	ldr	r3, [pc, #352]	@ (8002cc4 <command+0x644>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
		        return;
 8002b66:	f001 bc6f 	b.w	8004448 <command+0x1dc8>
	}

	else if (strcmp(token1, "MEASURE") == 0 && strcmp(token2, "DISTANCE") == 0) {
 8002b6a:	4957      	ldr	r1, [pc, #348]	@ (8002cc8 <command+0x648>)
 8002b6c:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8002b70:	f7fd faee 	bl	8000150 <strcmp>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8166 	bne.w	8002e48 <command+0x7c8>
 8002b7c:	4953      	ldr	r1, [pc, #332]	@ (8002ccc <command+0x64c>)
 8002b7e:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8002b82:	f7fd fae5 	bl	8000150 <strcmp>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 815d 	bne.w	8002e48 <command+0x7c8>

	    if (token3 == NULL) {
 8002b8e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d14e      	bne.n	8002c34 <command+0x5b4>
	        // Tek seferlik sadece UART
	        uint16_t cm = 0;
 8002b96:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002b9a:	f5a3 73cf 	sub.w	r3, r3, #414	@ 0x19e
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
	        if (hcsr04_measure_cm(&cm)) {
 8002ba2:	f507 73e5 	add.w	r3, r7, #458	@ 0x1ca
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f93c 	bl	8001e24 <hcsr04_measure_cm>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d021      	beq.n	8002bf6 <command+0x576>
	            Distance_cm = cm;
 8002bb2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002bb6:	f5a3 73cf 	sub.w	r3, r3, #414	@ 0x19e
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <command+0x650>)
 8002bbe:	801a      	strh	r2, [r3, #0]
	            Distance_ok = 1;
 8002bc0:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <command+0x654>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
	            char msg[40];
	            int len = snprintf(msg, sizeof(msg), "Mesafe: %u cm\r\n", cm);
 8002bc6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002bca:	f5a3 73cf 	sub.w	r3, r3, #414	@ 0x19e
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f107 000c 	add.w	r0, r7, #12
 8002bd4:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <command+0x658>)
 8002bd6:	2128      	movs	r1, #40	@ 0x28
 8002bd8:	f008 ffba 	bl	800bb50 <sniprintf>
 8002bdc:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002be0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	f107 010c 	add.w	r1, r7, #12
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	4832      	ldr	r0, [pc, #200]	@ (8002cb8 <command+0x638>)
 8002bf0:	f007 fb1a 	bl	800a228 <HAL_UART_Transmit>
 8002bf4:	e11e      	b.n	8002e34 <command+0x7b4>
	        } else {
	            Distance_ok = 0;
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <command+0x654>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
	            char msg[] = "Mesafe algilanamiyor.\r\n";
 8002bfc:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c00:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c04:	4a35      	ldr	r2, [pc, #212]	@ (8002cdc <command+0x65c>)
 8002c06:	461c      	mov	r4, r3
 8002c08:	4615      	mov	r5, r2
 8002c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c12:	e884 0003 	stmia.w	r4, {r0, r1}
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c16:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd faa2 	bl	8000164 <strlen>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	4822      	ldr	r0, [pc, #136]	@ (8002cb8 <command+0x638>)
 8002c2e:	f007 fafb 	bl	800a228 <HAL_UART_Transmit>
 8002c32:	e0ff      	b.n	8002e34 <command+0x7b4>
	        }
	    }
	    else if (strcmp(token3, "ON") == 0) {
 8002c34:	492a      	ldr	r1, [pc, #168]	@ (8002ce0 <command+0x660>)
 8002c36:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8002c3a:	f7fd fa89 	bl	8000150 <strcmp>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 80ad 	bne.w	8002da0 <command+0x720>
	        //
	        uint16_t cm = 0;
 8002c46:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c4a:	f5a3 73dd 	sub.w	r3, r3, #442	@ 0x1ba
 8002c4e:	2200      	movs	r2, #0
 8002c50:	801a      	strh	r2, [r3, #0]
	        if (hcsr04_measure_cm(&cm)) {
 8002c52:	f507 73d7 	add.w	r3, r7, #430	@ 0x1ae
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f8e4 	bl	8001e24 <hcsr04_measure_cm>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d040      	beq.n	8002ce4 <command+0x664>
	            Distance_cm = cm;
 8002c62:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c66:	f5a3 73dd 	sub.w	r3, r3, #442	@ 0x1ba
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <command+0x650>)
 8002c6e:	801a      	strh	r2, [r3, #0]
	            Distance_ok = 1;
 8002c70:	4b18      	ldr	r3, [pc, #96]	@ (8002cd4 <command+0x654>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
	            char msg[40];
	            int len = snprintf(msg, sizeof(msg), "Mesafe: %u cm\r\n", cm);
 8002c76:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c7a:	f5a3 73dd 	sub.w	r3, r3, #442	@ 0x1ba
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	f107 000c 	add.w	r0, r7, #12
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <command+0x658>)
 8002c86:	2128      	movs	r1, #40	@ 0x28
 8002c88:	f008 ff62 	bl	800bb50 <sniprintf>
 8002c8c:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002c90:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	f107 010c 	add.w	r1, r7, #12
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	4806      	ldr	r0, [pc, #24]	@ (8002cb8 <command+0x638>)
 8002ca0:	f007 fac2 	bl	800a228 <HAL_UART_Transmit>
 8002ca4:	e03c      	b.n	8002d20 <command+0x6a0>
 8002ca6:	bf00      	nop
 8002ca8:	0800ec64 	.word	0x0800ec64
 8002cac:	0800ec6c 	.word	0x0800ec6c
 8002cb0:	0800ff20 	.word	0x0800ff20
 8002cb4:	0800f130 	.word	0x0800f130
 8002cb8:	200005f8 	.word	0x200005f8
 8002cbc:	0800f148 	.word	0x0800f148
 8002cc0:	20000654 	.word	0x20000654
 8002cc4:	200006d6 	.word	0x200006d6
 8002cc8:	0800ec74 	.word	0x0800ec74
 8002ccc:	0800ec7c 	.word	0x0800ec7c
 8002cd0:	200006f8 	.word	0x200006f8
 8002cd4:	200006fa 	.word	0x200006fa
 8002cd8:	0800ec88 	.word	0x0800ec88
 8002cdc:	0800f168 	.word	0x0800f168
 8002ce0:	0800ec54 	.word	0x0800ec54
	        } else {
	            Distance_ok = 0;
 8002ce4:	4baa      	ldr	r3, [pc, #680]	@ (8002f90 <command+0x910>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
	            char msg[] = "Mesafe: algilanamiyor.\r\n";
 8002cea:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002cee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cf2:	4aa8      	ldr	r2, [pc, #672]	@ (8002f94 <command+0x914>)
 8002cf4:	461c      	mov	r4, r3
 8002cf6:	4615      	mov	r5, r2
 8002cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d00:	c403      	stmia	r4!, {r0, r1}
 8002d02:	7022      	strb	r2, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d04:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fa2b 	bl	8000164 <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	489f      	ldr	r0, [pc, #636]	@ (8002f98 <command+0x918>)
 8002d1c:	f007 fa84 	bl	800a228 <HAL_UART_Transmit>
	        }

	        //  OLED BASLAT
	        oledDistanceOn    = 1;
 8002d20:	4b9e      	ldr	r3, [pc, #632]	@ (8002f9c <command+0x91c>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
	        nextHcsrMeasureMs = HAL_GetTick();
 8002d26:	f002 fab9 	bl	800529c <HAL_GetTick>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fa0 <command+0x920>)
 8002d2e:	6013      	str	r3, [r2, #0]
	        nextOledRefreshMs = HAL_GetTick();
 8002d30:	f002 fab4 	bl	800529c <HAL_GetTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a9b      	ldr	r2, [pc, #620]	@ (8002fa4 <command+0x924>)
 8002d38:	6013      	str	r3, [r2, #0]

	        ssd1306_Fill(Black);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f001 ffe0 	bl	8004d00 <ssd1306_Fill>
	        ssd1306_SetCursor(0, 0);
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	f002 f926 	bl	8004f94 <ssd1306_SetCursor>
	        if (Distance_ok) {
 8002d48:	4b91      	ldr	r3, [pc, #580]	@ (8002f90 <command+0x910>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d011      	beq.n	8002d76 <command+0x6f6>
	            char line[32];
	            snprintf(line, sizeof(line), "Mesafe: %u cm", Distance_cm);
 8002d52:	4b95      	ldr	r3, [pc, #596]	@ (8002fa8 <command+0x928>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f107 000c 	add.w	r0, r7, #12
 8002d5c:	4a93      	ldr	r2, [pc, #588]	@ (8002fac <command+0x92c>)
 8002d5e:	2120      	movs	r1, #32
 8002d60:	f008 fef6 	bl	800bb50 <sniprintf>
	            ssd1306_WriteString(line, Font_7x10, White);
 8002d64:	4b92      	ldr	r3, [pc, #584]	@ (8002fb0 <command+0x930>)
 8002d66:	f107 000c 	add.w	r0, r7, #12
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	9200      	str	r2, [sp, #0]
 8002d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d70:	f002 f8ea 	bl	8004f48 <ssd1306_WriteString>
 8002d74:	e011      	b.n	8002d9a <command+0x71a>
	        } else {
	            ssd1306_WriteString("Mesafe: ", Font_7x10, White);
 8002d76:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb0 <command+0x930>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	9200      	str	r2, [sp, #0]
 8002d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7e:	488d      	ldr	r0, [pc, #564]	@ (8002fb4 <command+0x934>)
 8002d80:	f002 f8e2 	bl	8004f48 <ssd1306_WriteString>
	            ssd1306_SetCursor(5, 10);
 8002d84:	210a      	movs	r1, #10
 8002d86:	2005      	movs	r0, #5
 8002d88:	f002 f904 	bl	8004f94 <ssd1306_SetCursor>
	            ssd1306_WriteString("Algilanamiyor", Font_7x10, White);
 8002d8c:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <command+0x930>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	9200      	str	r2, [sp, #0]
 8002d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d94:	4888      	ldr	r0, [pc, #544]	@ (8002fb8 <command+0x938>)
 8002d96:	f002 f8d7 	bl	8004f48 <ssd1306_WriteString>
	        }
	        ssd1306_UpdateScreen();
 8002d9a:	f001 ffc9 	bl	8004d30 <ssd1306_UpdateScreen>
 8002d9e:	e049      	b.n	8002e34 <command+0x7b4>
	    }
	    else if (strcmp(token3, "OFF") == 0) {
 8002da0:	4986      	ldr	r1, [pc, #536]	@ (8002fbc <command+0x93c>)
 8002da2:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8002da6:	f7fd f9d3 	bl	8000150 <strcmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d123      	bne.n	8002df8 <command+0x778>
	        // --- OLED periyodik güncellemeyi kapat ---
	        oledDistanceOn = 0;
 8002db0:	4b7a      	ldr	r3, [pc, #488]	@ (8002f9c <command+0x91c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
	        ssd1306_Fill(Black);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f001 ffa2 	bl	8004d00 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8002dbc:	f001 ffb8 	bl	8004d30 <ssd1306_UpdateScreen>

	        char msg[] = "Mesafe gosterimi kapatildi.\r\n";
 8002dc0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dc4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002dc8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc0 <command+0x940>)
 8002dca:	461c      	mov	r4, r3
 8002dcc:	4615      	mov	r5, r2
 8002dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dd6:	c407      	stmia	r4!, {r0, r1, r2}
 8002dd8:	8023      	strh	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002dda:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd f9c0 	bl	8000164 <strlen>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	4869      	ldr	r0, [pc, #420]	@ (8002f98 <command+0x918>)
 8002df2:	f007 fa19 	bl	800a228 <HAL_UART_Transmit>
 8002df6:	e01d      	b.n	8002e34 <command+0x7b4>
	    }
	    else {
	        char msg[] = "Ornek komutlar icin HELP; yaziniz.\r\n";
 8002df8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dfc:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002e00:	4a70      	ldr	r2, [pc, #448]	@ (8002fc4 <command+0x944>)
 8002e02:	461c      	mov	r4, r3
 8002e04:	4615      	mov	r5, r2
 8002e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e12:	6020      	str	r0, [r4, #0]
 8002e14:	3404      	adds	r4, #4
 8002e16:	7021      	strb	r1, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd f9a1 	bl	8000164 <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	f107 010c 	add.w	r1, r7, #12
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	485a      	ldr	r0, [pc, #360]	@ (8002f98 <command+0x918>)
 8002e30:	f007 f9fa 	bl	800a228 <HAL_UART_Transmit>
	    }

	    process_uart = false;
 8002e34:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <command+0x948>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
	    memset(rxBuffer, 0, sizeof(rxBuffer));
 8002e3a:	2280      	movs	r2, #128	@ 0x80
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4863      	ldr	r0, [pc, #396]	@ (8002fcc <command+0x94c>)
 8002e40:	f008 ffb6 	bl	800bdb0 <memset>
	    return;
 8002e44:	f001 bb00 	b.w	8004448 <command+0x1dc8>
	}

	else if (strcmp(token1, "SHOW") == 0 && strcmp(token2, "IMAGE") == 0) {
 8002e48:	4961      	ldr	r1, [pc, #388]	@ (8002fd0 <command+0x950>)
 8002e4a:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8002e4e:	f7fd f97f 	bl	8000150 <strcmp>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d128      	bne.n	8002eaa <command+0x82a>
 8002e58:	495e      	ldr	r1, [pc, #376]	@ (8002fd4 <command+0x954>)
 8002e5a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8002e5e:	f7fd f977 	bl	8000150 <strcmp>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d120      	bne.n	8002eaa <command+0x82a>
	    OLED_ShowImageCentered();
 8002e68:	f7fe ffbe 	bl	8001de8 <OLED_ShowImageCentered>
	    const char ok[] = "OLED: 64x64 bitmap gosterildi.\r\n";
 8002e6c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e70:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002e74:	4a58      	ldr	r2, [pc, #352]	@ (8002fd8 <command+0x958>)
 8002e76:	461c      	mov	r4, r3
 8002e78:	4615      	mov	r5, r2
 8002e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	7023      	strb	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t*)ok, strlen(ok), HAL_MAX_DELAY);
 8002e86:	f107 010c 	add.w	r1, r7, #12
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	2220      	movs	r2, #32
 8002e90:	4841      	ldr	r0, [pc, #260]	@ (8002f98 <command+0x918>)
 8002e92:	f007 f9c9 	bl	800a228 <HAL_UART_Transmit>
	    memset(rxBuffer, 0, sizeof(rxBuffer));
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	2100      	movs	r1, #0
 8002e9a:	484c      	ldr	r0, [pc, #304]	@ (8002fcc <command+0x94c>)
 8002e9c:	f008 ff88 	bl	800bdb0 <memset>
	    process_uart = false;
 8002ea0:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <command+0x948>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	f001 bacf 	b.w	8004448 <command+0x1dc8>
	    return;
	}

	else if (strcmp(token1, "RADAR") == 0) {
 8002eaa:	494c      	ldr	r1, [pc, #304]	@ (8002fdc <command+0x95c>)
 8002eac:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8002eb0:	f7fd f94e 	bl	8000150 <strcmp>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80fd 	bne.w	80030b6 <command+0xa36>
	    if (token2 == NULL) {
 8002ebc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d124      	bne.n	8002f0e <command+0x88e>
	        char m[] = "RADAR;ON veya RADAR;OFF kullanin.\r\n";
 8002ec4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ec8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002ecc:	4a44      	ldr	r2, [pc, #272]	@ (8002fe0 <command+0x960>)
 8002ece:	461c      	mov	r4, r3
 8002ed0:	4615      	mov	r5, r2
 8002ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	6023      	str	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd f93e 	bl	8000164 <strlen>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f107 010c 	add.w	r1, r7, #12
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	4828      	ldr	r0, [pc, #160]	@ (8002f98 <command+0x918>)
 8002ef6:	f007 f997 	bl	800a228 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	2100      	movs	r1, #0
 8002efe:	4833      	ldr	r0, [pc, #204]	@ (8002fcc <command+0x94c>)
 8002f00:	f008 ff56 	bl	800bdb0 <memset>
		    process_uart = false;
 8002f04:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <command+0x948>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	f001 ba9d 	b.w	8004448 <command+0x1dc8>
		    return;
	    }

	    if (strcmp(token2, "ON") == 0) {
 8002f0e:	4935      	ldr	r1, [pc, #212]	@ (8002fe4 <command+0x964>)
 8002f10:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8002f14:	f7fd f91c 	bl	8000150 <strcmp>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d170      	bne.n	8003000 <command+0x980>
	        radarEnabled = 1;
 8002f1e:	4b32      	ldr	r3, [pc, #200]	@ (8002fe8 <command+0x968>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
	        servoFollowY = false;
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <command+0x96c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
	        oledDistanceOn = 0;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <command+0x91c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
	        radarAngle = -90;
 8002f30:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <command+0x970>)
 8002f32:	f64f 72a6 	movw	r2, #65446	@ 0xffa6
 8002f36:	801a      	strh	r2, [r3, #0]
	        radarDir   = +1;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <command+0x974>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
	        nextRadarStepMs = HAL_GetTick();
 8002f3e:	f002 f9ad 	bl	800529c <HAL_GetTick>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff8 <command+0x978>)
 8002f46:	6013      	str	r3, [r2, #0]
	        // blip’leri temizle

	        char m[] = "RADAR baslatildi.\r\n";
 8002f48:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f4c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f50:	4a2a      	ldr	r2, [pc, #168]	@ (8002ffc <command+0x97c>)
 8002f52:	461c      	mov	r4, r3
 8002f54:	4615      	mov	r5, r2
 8002f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	6023      	str	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8002f5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd f8fe 	bl	8000164 <strlen>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	4808      	ldr	r0, [pc, #32]	@ (8002f98 <command+0x918>)
 8002f76:	f007 f957 	bl	800a228 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4813      	ldr	r0, [pc, #76]	@ (8002fcc <command+0x94c>)
 8002f80:	f008 ff16 	bl	800bdb0 <memset>
	        	    process_uart = false;
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <command+0x948>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	f001 ba5d 	b.w	8004448 <command+0x1dc8>
 8002f8e:	bf00      	nop
 8002f90:	200006fa 	.word	0x200006fa
 8002f94:	0800f180 	.word	0x0800f180
 8002f98:	200005f8 	.word	0x200005f8
 8002f9c:	200006fb 	.word	0x200006fb
 8002fa0:	200006fc 	.word	0x200006fc
 8002fa4:	20000700 	.word	0x20000700
 8002fa8:	200006f8 	.word	0x200006f8
 8002fac:	0800eb20 	.word	0x0800eb20
 8002fb0:	0800ff20 	.word	0x0800ff20
 8002fb4:	0800ec98 	.word	0x0800ec98
 8002fb8:	0800eb38 	.word	0x0800eb38
 8002fbc:	0800ec58 	.word	0x0800ec58
 8002fc0:	0800f19c 	.word	0x0800f19c
 8002fc4:	0800f1bc 	.word	0x0800f1bc
 8002fc8:	200006d6 	.word	0x200006d6
 8002fcc:	20000654 	.word	0x20000654
 8002fd0:	0800eca4 	.word	0x0800eca4
 8002fd4:	0800ecac 	.word	0x0800ecac
 8002fd8:	0800f1e4 	.word	0x0800f1e4
 8002fdc:	0800ecb4 	.word	0x0800ecb4
 8002fe0:	0800f208 	.word	0x0800f208
 8002fe4:	0800ec54 	.word	0x0800ec54
 8002fe8:	20000640 	.word	0x20000640
 8002fec:	200006ec 	.word	0x200006ec
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000002 	.word	0x20000002
 8002ff8:	20000644 	.word	0x20000644
 8002ffc:	0800f22c 	.word	0x0800f22c
	        	    return;	    }
	    		else if (strcmp(token2, "OFF") == 0) {
 8003000:	49c8      	ldr	r1, [pc, #800]	@ (8003324 <command+0xca4>)
 8003002:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8003006:	f7fd f8a3 	bl	8000150 <strcmp>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d12a      	bne.n	8003066 <command+0x9e6>
	        radarEnabled = 0;
 8003010:	4bc5      	ldr	r3, [pc, #788]	@ (8003328 <command+0xca8>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
	        ssd1306_Fill(Black);
 8003016:	2000      	movs	r0, #0
 8003018:	f001 fe72 	bl	8004d00 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 800301c:	f001 fe88 	bl	8004d30 <ssd1306_UpdateScreen>
	        char m[] = "RADAR durduruldu.\r\n";
 8003020:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003024:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003028:	4ac0      	ldr	r2, [pc, #768]	@ (800332c <command+0xcac>)
 800302a:	461c      	mov	r4, r3
 800302c:	4615      	mov	r5, r2
 800302e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	6023      	str	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8003036:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd f892 	bl	8000164 <strlen>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	48b8      	ldr	r0, [pc, #736]	@ (8003330 <command+0xcb0>)
 800304e:	f007 f8eb 	bl	800a228 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	2100      	movs	r1, #0
 8003056:	48b7      	ldr	r0, [pc, #732]	@ (8003334 <command+0xcb4>)
 8003058:	f008 feaa 	bl	800bdb0 <memset>
	        	    process_uart = false;
 800305c:	4bb6      	ldr	r3, [pc, #728]	@ (8003338 <command+0xcb8>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	f001 b9f1 	b.w	8004448 <command+0x1dc8>
	        	    return;	    }

	        	else {
	        char m[] = "Ornek komutlar icin HELP; yaziniz. \r\n";
 8003066:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800306a:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 800306e:	4ab3      	ldr	r2, [pc, #716]	@ (800333c <command+0xcbc>)
 8003070:	461c      	mov	r4, r3
 8003072:	4615      	mov	r5, r2
 8003074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003080:	6020      	str	r0, [r4, #0]
 8003082:	3404      	adds	r4, #4
 8003084:	8021      	strh	r1, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd f86a 	bl	8000164 <strlen>
 8003090:	4603      	mov	r3, r0
 8003092:	b29a      	uxth	r2, r3
 8003094:	f107 010c 	add.w	r1, r7, #12
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	48a4      	ldr	r0, [pc, #656]	@ (8003330 <command+0xcb0>)
 800309e:	f007 f8c3 	bl	800a228 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	2100      	movs	r1, #0
 80030a6:	48a3      	ldr	r0, [pc, #652]	@ (8003334 <command+0xcb4>)
 80030a8:	f008 fe82 	bl	800bdb0 <memset>
	        	    process_uart = false;
 80030ac:	4ba2      	ldr	r3, [pc, #648]	@ (8003338 <command+0xcb8>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	f001 b9c9 	b.w	8004448 <command+0x1dc8>
	        	    return;	    }
	}


	else if(strcmp(token1, "WAIT") == 0 && token2 != NULL)
 80030b6:	49a2      	ldr	r1, [pc, #648]	@ (8003340 <command+0xcc0>)
 80030b8:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80030bc:	f7fd f848 	bl	8000150 <strcmp>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d13d      	bne.n	8003142 <command+0xac2>
 80030c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d039      	beq.n	8003142 <command+0xac2>
	{
	    uint32_t delayMs = atoi(token2);
 80030ce:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80030d2:	f007 fec3 	bl	800ae5c <atoi>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
	    char msg[64];
	    sprintf(msg, "Bekleme baslatiliyor: %lu ms\r\n", delayMs);
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 80030e4:	4997      	ldr	r1, [pc, #604]	@ (8003344 <command+0xcc4>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f008 fd68 	bl	800bbbc <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f837 	bl	8000164 <strlen>
 80030f6:	4603      	mov	r3, r0
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	f107 010c 	add.w	r1, r7, #12
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	488b      	ldr	r0, [pc, #556]	@ (8003330 <command+0xcb0>)
 8003104:	f007 f890 	bl	800a228 <HAL_UART_Transmit>

	    HAL_Delay(delayMs);
 8003108:	f8d7 0338 	ldr.w	r0, [r7, #824]	@ 0x338
 800310c:	f002 f8d0 	bl	80052b0 <HAL_Delay>

	    sprintf(msg, "Bekleme tamamlandi\r\n");
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	498c      	ldr	r1, [pc, #560]	@ (8003348 <command+0xcc8>)
 8003116:	4618      	mov	r0, r3
 8003118:	f008 fd50 	bl	800bbbc <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f81f 	bl	8000164 <strlen>
 8003126:	4603      	mov	r3, r0
 8003128:	b29a      	uxth	r2, r3
 800312a:	f107 010c 	add.w	r1, r7, #12
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	487f      	ldr	r0, [pc, #508]	@ (8003330 <command+0xcb0>)
 8003134:	f007 f878 	bl	800a228 <HAL_UART_Transmit>
	    process_uart = false;
 8003138:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <command+0xcb8>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	f001 b983 	b.w	8004448 <command+0x1dc8>
	    sprintf(msg, "delay_us(%u) OK, elapsed ~%u us\r\n", t, (uint16_t)(b - a));
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	    process_uart = false; return;
	}
// delay_us test kodu     */
	else if (strcmp(token1, "PWM") == 0 && strcmp(token2, "SET") == 0)
 8003142:	4982      	ldr	r1, [pc, #520]	@ (800334c <command+0xccc>)
 8003144:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8003148:	f7fd f802 	bl	8000150 <strcmp>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d17d      	bne.n	800324e <command+0xbce>
 8003152:	497f      	ldr	r1, [pc, #508]	@ (8003350 <command+0xcd0>)
 8003154:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8003158:	f7fc fffa 	bl	8000150 <strcmp>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d175      	bne.n	800324e <command+0xbce>
	{
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 8003162:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003166:	2b00      	cmp	r3, #0
 8003168:	f001 8163 	beq.w	8004432 <command+0x1db2>
 800316c:	4979      	ldr	r1, [pc, #484]	@ (8003354 <command+0xcd4>)
 800316e:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003172:	f7fc ffed 	bl	8000150 <strcmp>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	f041 815a 	bne.w	8004432 <command+0x1db2>
 800317e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003182:	2b00      	cmp	r3, #0
 8003184:	f001 8155 	beq.w	8004432 <command+0x1db2>
	        uint32_t freq = atoi(token4);
 8003188:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 800318c:	f007 fe66 	bl	800ae5c <atoi>
 8003190:	4603      	mov	r3, r0
 8003192:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
	        char *token5 = strtok(NULL, ";");
 8003196:	4970      	ldr	r1, [pc, #448]	@ (8003358 <command+0xcd8>)
 8003198:	2000      	movs	r0, #0
 800319a:	f008 fe1f 	bl	800bddc <strtok>
 800319e:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
	        char *token6 = strtok(NULL, ";");
 80031a2:	496d      	ldr	r1, [pc, #436]	@ (8003358 <command+0xcd8>)
 80031a4:	2000      	movs	r0, #0
 80031a6:	f008 fe19 	bl	800bddc <strtok>
 80031aa:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
	        if(token5 && strcmp(token5, "DUTY") == 0 && token6) {
 80031ae:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f001 813d 	beq.w	8004432 <command+0x1db2>
 80031b8:	4968      	ldr	r1, [pc, #416]	@ (800335c <command+0xcdc>)
 80031ba:	f8d7 0330 	ldr.w	r0, [r7, #816]	@ 0x330
 80031be:	f7fc ffc7 	bl	8000150 <strcmp>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f041 8134 	bne.w	8004432 <command+0x1db2>
 80031ca:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f001 812f 	beq.w	8004432 <command+0x1db2>
	            uint8_t duty = atoi(token6);
 80031d4:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 80031d8:	f007 fe40 	bl	800ae5c <atoi>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 332b 	strb.w	r3, [r7, #811]	@ 0x32b
	            set_pwm_freq_duty(freq, duty);
 80031e2:	f897 332b 	ldrb.w	r3, [r7, #811]	@ 0x32b
 80031e6:	4619      	mov	r1, r3
 80031e8:	f8d7 0334 	ldr.w	r0, [r7, #820]	@ 0x334
 80031ec:	f7fe fec4 	bl	8001f78 <set_pwm_freq_duty>

	            HAL_Delay(50);
 80031f0:	2032      	movs	r0, #50	@ 0x32
 80031f2:	f002 f85d 	bl	80052b0 <HAL_Delay>

	            char msg[128];
	            sprintf(msg, "PWM set: %lu Hz, %d%%\r\nOlculen Frekans: %.1f Hz\r\nOlculen Duty: %.1f%%\r\n",
 80031f6:	f897 632b 	ldrb.w	r6, [r7, #811]	@ 0x32b
 80031fa:	4b59      	ldr	r3, [pc, #356]	@ (8003360 <command+0xce0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f91c 	bl	800043c <__aeabi_f2d>
 8003204:	4604      	mov	r4, r0
 8003206:	460d      	mov	r5, r1
 8003208:	4b56      	ldr	r3, [pc, #344]	@ (8003364 <command+0xce4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f915 	bl	800043c <__aeabi_f2d>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	f107 000c 	add.w	r0, r7, #12
 800321a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800321e:	e9cd 4500 	strd	r4, r5, [sp]
 8003222:	4633      	mov	r3, r6
 8003224:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8003228:	494f      	ldr	r1, [pc, #316]	@ (8003368 <command+0xce8>)
 800322a:	f008 fcc7 	bl	800bbbc <siprintf>
	                    freq, duty, measured_freq, measured_duty);
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f7fc ff96 	bl	8000164 <strlen>
 8003238:	4603      	mov	r3, r0
 800323a:	b29a      	uxth	r2, r3
 800323c:	f107 010c 	add.w	r1, r7, #12
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	483a      	ldr	r0, [pc, #232]	@ (8003330 <command+0xcb0>)
 8003246:	f006 ffef 	bl	800a228 <HAL_UART_Transmit>
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 800324a:	f001 b8f2 	b.w	8004432 <command+0x1db2>
	        }
	    }
	}

	else if(strcmp(token1, "FLASH") == 0){
 800324e:	4947      	ldr	r1, [pc, #284]	@ (800336c <command+0xcec>)
 8003250:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8003254:	f7fc ff7c 	bl	8000150 <strcmp>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 80b4 	bne.w	80033c8 <command+0xd48>
		 if(token2 && strcmp(token2, "WRITE") == 0 && token3 && token4){
 8003260:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003264:	2b00      	cmp	r3, #0
 8003266:	d026      	beq.n	80032b6 <command+0xc36>
 8003268:	4941      	ldr	r1, [pc, #260]	@ (8003370 <command+0xcf0>)
 800326a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 800326e:	f7fc ff6f 	bl	8000150 <strcmp>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11e      	bne.n	80032b6 <command+0xc36>
 8003278:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <command+0xc36>
 8003280:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d016      	beq.n	80032b6 <command+0xc36>
		        uint32_t addr = strtoul(token3, NULL, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003290:	f007 feda 	bl	800b048 <strtoul>
 8003294:	f8c7 02e4 	str.w	r0, [r7, #740]	@ 0x2e4
		        uint32_t data = strtoul(token4, NULL, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 80032a0:	f007 fed2 	bl	800b048 <strtoul>
 80032a4:	f8c7 02e0 	str.w	r0, [r7, #736]	@ 0x2e0
		        Flash_Write_Word(addr, data);
 80032a8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 80032ac:	f8d7 02e4 	ldr.w	r0, [r7, #740]	@ 0x2e4
 80032b0:	f7fe ff48 	bl	8002144 <Flash_Write_Word>
		 if(token2 && strcmp(token2, "WRITE") == 0 && token3 && token4){
 80032b4:	e07e      	b.n	80033b4 <command+0xd34>
		 }
		 else if(token2 && strcmp(token2, "READ") == 0 && token3){
 80032b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d05e      	beq.n	800337c <command+0xcfc>
 80032be:	492d      	ldr	r1, [pc, #180]	@ (8003374 <command+0xcf4>)
 80032c0:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80032c4:	f7fc ff44 	bl	8000150 <strcmp>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d156      	bne.n	800337c <command+0xcfc>
 80032ce:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d052      	beq.n	800337c <command+0xcfc>
			 uint32_t addr = strtoul(token3, NULL, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80032de:	f007 feb3 	bl	800b048 <strtoul>
 80032e2:	f8c7 02dc 	str.w	r0, [r7, #732]	@ 0x2dc
			 uint32_t value = Flash_Read_Word(addr);
 80032e6:	f8d7 02dc 	ldr.w	r0, [r7, #732]	@ 0x2dc
 80032ea:	f7fe ffa5 	bl	8002238 <Flash_Read_Word>
 80032ee:	f8c7 02d8 	str.w	r0, [r7, #728]	@ 0x2d8
			 char msg[40];
			 sprintf(msg, "FLASH READ --> 0x%08lX: 0x%08lX\r\n",addr ,value);
 80032f2:	f107 000c 	add.w	r0, r7, #12
 80032f6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80032fa:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 80032fe:	491e      	ldr	r1, [pc, #120]	@ (8003378 <command+0xcf8>)
 8003300:	f008 fc5c 	bl	800bbbc <siprintf>
			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	4618      	mov	r0, r3
 800330a:	f7fc ff2b 	bl	8000164 <strlen>
 800330e:	4603      	mov	r3, r0
 8003310:	b29a      	uxth	r2, r3
 8003312:	f107 010c 	add.w	r1, r7, #12
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	4805      	ldr	r0, [pc, #20]	@ (8003330 <command+0xcb0>)
 800331c:	f006 ff84 	bl	800a228 <HAL_UART_Transmit>
		 else if(token2 && strcmp(token2, "READ") == 0 && token3){
 8003320:	e048      	b.n	80033b4 <command+0xd34>
 8003322:	bf00      	nop
 8003324:	0800ec58 	.word	0x0800ec58
 8003328:	20000640 	.word	0x20000640
 800332c:	0800f240 	.word	0x0800f240
 8003330:	200005f8 	.word	0x200005f8
 8003334:	20000654 	.word	0x20000654
 8003338:	200006d6 	.word	0x200006d6
 800333c:	0800f254 	.word	0x0800f254
 8003340:	0800ecbc 	.word	0x0800ecbc
 8003344:	0800ecc4 	.word	0x0800ecc4
 8003348:	0800ece4 	.word	0x0800ece4
 800334c:	0800ecfc 	.word	0x0800ecfc
 8003350:	0800ed00 	.word	0x0800ed00
 8003354:	0800ed04 	.word	0x0800ed04
 8003358:	0800ec18 	.word	0x0800ec18
 800335c:	0800ed0c 	.word	0x0800ed0c
 8003360:	200006f0 	.word	0x200006f0
 8003364:	200006f4 	.word	0x200006f4
 8003368:	0800ed14 	.word	0x0800ed14
 800336c:	0800ed5c 	.word	0x0800ed5c
 8003370:	0800ec6c 	.word	0x0800ec6c
 8003374:	0800ed64 	.word	0x0800ed64
 8003378:	0800ed6c 	.word	0x0800ed6c
		 }
		 else{
			 char msg[] = "FLASH komutu hatali\r\n";
 800337c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003380:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003384:	4ab3      	ldr	r2, [pc, #716]	@ (8003654 <command+0xfd4>)
 8003386:	461c      	mov	r4, r3
 8003388:	4615      	mov	r5, r2
 800338a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800338c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800338e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003392:	6020      	str	r0, [r4, #0]
 8003394:	3404      	adds	r4, #4
 8003396:	8021      	strh	r1, [r4, #0]
			 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003398:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800339c:	4618      	mov	r0, r3
 800339e:	f7fc fee1 	bl	8000164 <strlen>
 80033a2:	4603      	mov	r3, r0
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
 80033ae:	48aa      	ldr	r0, [pc, #680]	@ (8003658 <command+0xfd8>)
 80033b0:	f006 ff3a 	bl	800a228 <HAL_UART_Transmit>
		 }
		 memset(rxBuffer, 0, sizeof(rxBuffer));
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	2100      	movs	r1, #0
 80033b8:	48a8      	ldr	r0, [pc, #672]	@ (800365c <command+0xfdc>)
 80033ba:	f008 fcf9 	bl	800bdb0 <memset>
		 process_uart = false;
 80033be:	4ba8      	ldr	r3, [pc, #672]	@ (8003660 <command+0xfe0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
		 return;
 80033c4:	f001 b840 	b.w	8004448 <command+0x1dc8>
	}

	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "SHOW") == 0) {
 80033c8:	49a6      	ldr	r1, [pc, #664]	@ (8003664 <command+0xfe4>)
 80033ca:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80033ce:	f7fc febf 	bl	8000150 <strcmp>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 81f1 	bne.w	80037bc <command+0x113c>
 80033da:	49a3      	ldr	r1, [pc, #652]	@ (8003668 <command+0xfe8>)
 80033dc:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80033e0:	f7fc feb6 	bl	8000150 <strcmp>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 81e8 	bne.w	80037bc <command+0x113c>
	    adcDataReady = false;  // Flag'i başlat
 80033ec:	4b9f      	ldr	r3, [pc, #636]	@ (800366c <command+0xfec>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
	    HAL_ADC_Stop_DMA(&hadc1);
 80033f2:	489f      	ldr	r0, [pc, #636]	@ (8003670 <command+0xff0>)
 80033f4:	f002 faea 	bl	80059cc <HAL_ADC_Stop_DMA>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, ADC_CHANNEL_COUNT);
 80033f8:	2203      	movs	r2, #3
 80033fa:	499e      	ldr	r1, [pc, #632]	@ (8003674 <command+0xff4>)
 80033fc:	489c      	ldr	r0, [pc, #624]	@ (8003670 <command+0xff0>)
 80033fe:	f002 fa07 	bl	8005810 <HAL_ADC_Start_DMA>

	    uint32_t startTick = HAL_GetTick() + 10; // SONSUZ DÖNGÜYÜ ÖNLEMEK İÇİN
 8003402:	f001 ff4b 	bl	800529c <HAL_GetTick>
 8003406:	4603      	mov	r3, r0
 8003408:	330a      	adds	r3, #10
 800340a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
	    while (!adcDataReady) {
 800340e:	e02b      	b.n	8003468 <command+0xde8>
	        if (HAL_GetTick() > startTick) {  // 300ms timeout
 8003410:	f001 ff44 	bl	800529c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800341a:	4293      	cmp	r3, r2
 800341c:	d221      	bcs.n	8003462 <command+0xde2>
	            char errMsg[] = "ADC read timeout\r\n";
 800341e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003422:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003426:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <command+0xff8>)
 8003428:	461c      	mov	r4, r3
 800342a:	4615      	mov	r5, r2
 800342c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	8022      	strh	r2, [r4, #0]
 8003436:	3402      	adds	r4, #2
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	7023      	strb	r3, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 800343c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003440:	4618      	mov	r0, r3
 8003442:	f7fc fe8f 	bl	8000164 <strlen>
 8003446:	4603      	mov	r3, r0
 8003448:	b29a      	uxth	r2, r3
 800344a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	4881      	ldr	r0, [pc, #516]	@ (8003658 <command+0xfd8>)
 8003454:	f006 fee8 	bl	800a228 <HAL_UART_Transmit>
	            process_uart = false;
 8003458:	4b81      	ldr	r3, [pc, #516]	@ (8003660 <command+0xfe0>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	f000 bff3 	b.w	8004448 <command+0x1dc8>
	            return;
	        }
	        HAL_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f001 ff24 	bl	80052b0 <HAL_Delay>
	    while (!adcDataReady) {
 8003468:	4b80      	ldr	r3, [pc, #512]	@ (800366c <command+0xfec>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ce      	beq.n	8003410 <command+0xd90>
	    }

	    char msg[100];
	    if (strcmp(token3, "1") == 0) {
 8003472:	4982      	ldr	r1, [pc, #520]	@ (800367c <command+0xffc>)
 8003474:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003478:	f7fc fe6a 	bl	8000150 <strcmp>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d120      	bne.n	80034c4 <command+0xe44>
	        int len = sprintf(msg, "PA2 Voltage: %.2f V\r\n", adcToVoltage(adcValues[0]));
 8003482:	4b7c      	ldr	r3, [pc, #496]	@ (8003674 <command+0xff4>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f8de 	bl	8002648 <adcToVoltage>
 800348c:	4603      	mov	r3, r0
 800348e:	4618      	mov	r0, r3
 8003490:	f7fc ffd4 	bl	800043c <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	f107 000c 	add.w	r0, r7, #12
 800349c:	4978      	ldr	r1, [pc, #480]	@ (8003680 <command+0x1000>)
 800349e:	f008 fb8d 	bl	800bbbc <siprintf>
 80034a2:	f8c7 02f8 	str.w	r0, [r7, #760]	@ 0x2f8
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80034a6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	f107 010c 	add.w	r1, r7, #12
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	4868      	ldr	r0, [pc, #416]	@ (8003658 <command+0xfd8>)
 80034b6:	f006 feb7 	bl	800a228 <HAL_UART_Transmit>
	 //       for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	 //      	                adcValues[i] = 0;
	 //      	           }
	        process_uart = false;  // Komut işlendi, flag kapat
 80034ba:	4b69      	ldr	r3, [pc, #420]	@ (8003660 <command+0xfe0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 80034c0:	f000 bfc2 	b.w	8004448 <command+0x1dc8>
	    }
	    else if (strcmp(token3, "2") == 0) {
 80034c4:	496f      	ldr	r1, [pc, #444]	@ (8003684 <command+0x1004>)
 80034c6:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80034ca:	f7fc fe41 	bl	8000150 <strcmp>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d123      	bne.n	800351c <command+0xe9c>
	        int len = sprintf(msg, "PA3 Voltage: %.2f V\r\n", adcToVoltage(adcValues[1]));
 80034d4:	4b67      	ldr	r3, [pc, #412]	@ (8003674 <command+0xff4>)
 80034d6:	885b      	ldrh	r3, [r3, #2]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f8b5 	bl	8002648 <adcToVoltage>
 80034de:	4603      	mov	r3, r0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fc ffab 	bl	800043c <__aeabi_f2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	f107 000c 	add.w	r0, r7, #12
 80034ee:	4966      	ldr	r1, [pc, #408]	@ (8003688 <command+0x1008>)
 80034f0:	f008 fb64 	bl	800bbbc <siprintf>
 80034f4:	f8c7 02fc 	str.w	r0, [r7, #764]	@ 0x2fc
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80034f8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	f107 010c 	add.w	r1, r7, #12
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	4854      	ldr	r0, [pc, #336]	@ (8003658 <command+0xfd8>)
 8003508:	f006 fe8e 	bl	800a228 <HAL_UART_Transmit>
	        process_uart = false;
 800350c:	4b54      	ldr	r3, [pc, #336]	@ (8003660 <command+0xfe0>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
	       // for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	       	 //               adcValues[i] = 0;
	       	   //        }
	        process_uart = false;
 8003512:	4b53      	ldr	r3, [pc, #332]	@ (8003660 <command+0xfe0>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
	            return;
 8003518:	f000 bf96 	b.w	8004448 <command+0x1dc8>
	    }
	    else if (strcmp(token3, "3") == 0) {
 800351c:	495b      	ldr	r1, [pc, #364]	@ (800368c <command+0x100c>)
 800351e:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003522:	f7fc fe15 	bl	8000150 <strcmp>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d120      	bne.n	800356e <command+0xeee>
	        int len = sprintf(msg, "PA4 Voltage: %.2f V\r\n", adcToVoltage(adcValues[2]));
 800352c:	4b51      	ldr	r3, [pc, #324]	@ (8003674 <command+0xff4>)
 800352e:	889b      	ldrh	r3, [r3, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f889 	bl	8002648 <adcToVoltage>
 8003536:	4603      	mov	r3, r0
 8003538:	4618      	mov	r0, r3
 800353a:	f7fc ff7f 	bl	800043c <__aeabi_f2d>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	f107 000c 	add.w	r0, r7, #12
 8003546:	4952      	ldr	r1, [pc, #328]	@ (8003690 <command+0x1010>)
 8003548:	f008 fb38 	bl	800bbbc <siprintf>
 800354c:	f8c7 0300 	str.w	r0, [r7, #768]	@ 0x300
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8003550:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8003554:	b29a      	uxth	r2, r3
 8003556:	f107 010c 	add.w	r1, r7, #12
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	483e      	ldr	r0, [pc, #248]	@ (8003658 <command+0xfd8>)
 8003560:	f006 fe62 	bl	800a228 <HAL_UART_Transmit>
	//        for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      // 	                adcValues[i] = 0;
//	       	           }
	        process_uart = false;
 8003564:	4b3e      	ldr	r3, [pc, #248]	@ (8003660 <command+0xfe0>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
	            return;
 800356a:	f000 bf6d 	b.w	8004448 <command+0x1dc8>
	    }
	    else if (strcmp(token3, "ALL") == 0) {
 800356e:	4949      	ldr	r1, [pc, #292]	@ (8003694 <command+0x1014>)
 8003570:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003574:	f7fc fdec 	bl	8000150 <strcmp>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 8096 	bne.w	80036ac <command+0x102c>
	    	if (adcDataReady) {
 8003580:	4b3a      	ldr	r3, [pc, #232]	@ (800366c <command+0xfec>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d05c      	beq.n	8003644 <command+0xfc4>
	    	    adcDataReady = false; // bayrağı sıfırla
 800358a:	4b38      	ldr	r3, [pc, #224]	@ (800366c <command+0xfec>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]

	    	    printf("ADC Conversion Complete\r\n");
 8003590:	4841      	ldr	r0, [pc, #260]	@ (8003698 <command+0x1018>)
 8003592:	f008 fad5 	bl	800bb40 <puts>
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
	    	           adcValues[0] * 3.3f / 4095.0f,
 8003596:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <command+0xff4>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fb88 	bl	8000cb0 <__aeabi_i2f>
 80035a0:	4603      	mov	r3, r0
 80035a2:	493e      	ldr	r1, [pc, #248]	@ (800369c <command+0x101c>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fbd7 	bl	8000d58 <__aeabi_fmul>
 80035aa:	4603      	mov	r3, r0
 80035ac:	493c      	ldr	r1, [pc, #240]	@ (80036a0 <command+0x1020>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fc86 	bl	8000ec0 <__aeabi_fdiv>
 80035b4:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ff40 	bl	800043c <__aeabi_f2d>
 80035bc:	4680      	mov	r8, r0
 80035be:	4689      	mov	r9, r1
	    	           adcValues[1] * 3.3f / 4095.0f,
 80035c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003674 <command+0xff4>)
 80035c2:	885b      	ldrh	r3, [r3, #2]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fb73 	bl	8000cb0 <__aeabi_i2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4933      	ldr	r1, [pc, #204]	@ (800369c <command+0x101c>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fbc2 	bl	8000d58 <__aeabi_fmul>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4932      	ldr	r1, [pc, #200]	@ (80036a0 <command+0x1020>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fc71 	bl	8000ec0 <__aeabi_fdiv>
 80035de:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ff2b 	bl	800043c <__aeabi_f2d>
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
	    	           adcValues[2] * 3.3f / 4095.0f);
 80035ea:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <command+0xff4>)
 80035ec:	889b      	ldrh	r3, [r3, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fb5e 	bl	8000cb0 <__aeabi_i2f>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4929      	ldr	r1, [pc, #164]	@ (800369c <command+0x101c>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbad 	bl	8000d58 <__aeabi_fmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	4927      	ldr	r1, [pc, #156]	@ (80036a0 <command+0x1020>)
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fc5c 	bl	8000ec0 <__aeabi_fdiv>
 8003608:	4603      	mov	r3, r0
	    	 int len = sprintf(msg, "PA2: %.2f V, PA3: %.2f V, PA4: %.2f V\r\n",
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ff16 	bl	800043c <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	f107 000c 	add.w	r0, r7, #12
 8003618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800361c:	e9cd 4500 	strd	r4, r5, [sp]
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	491f      	ldr	r1, [pc, #124]	@ (80036a4 <command+0x1024>)
 8003626:	f008 fac9 	bl	800bbbc <siprintf>
 800362a:	f8c7 0304 	str.w	r0, [r7, #772]	@ 0x304
	    	 HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800362e:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8003632:	b29a      	uxth	r2, r3
 8003634:	f107 010c 	add.w	r1, r7, #12
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	4806      	ldr	r0, [pc, #24]	@ (8003658 <command+0xfd8>)
 800363e:	f006 fdf3 	bl	800a228 <HAL_UART_Transmit>
 8003642:	e002      	b.n	800364a <command+0xfca>
	    	} else {
	    	    printf("ADC read timeout\r\n");
 8003644:	4818      	ldr	r0, [pc, #96]	@ (80036a8 <command+0x1028>)
 8003646:	f008 fa7b 	bl	800bb40 <puts>
	    	}
	    //    for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      //          adcValues[i] = 0;
	        //   }
	        process_uart = false;  // Komut işlendi, flag kapat
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <command+0xfe0>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 8003650:	f000 befa 	b.w	8004448 <command+0x1dc8>
 8003654:	0800f27c 	.word	0x0800f27c
 8003658:	200005f8 	.word	0x200005f8
 800365c:	20000654 	.word	0x20000654
 8003660:	200006d6 	.word	0x200006d6
 8003664:	0800ed90 	.word	0x0800ed90
 8003668:	0800eca4 	.word	0x0800eca4
 800366c:	20000648 	.word	0x20000648
 8003670:	2000044c 	.word	0x2000044c
 8003674:	2000064c 	.word	0x2000064c
 8003678:	0800f294 	.word	0x0800f294
 800367c:	0800ed94 	.word	0x0800ed94
 8003680:	0800ed98 	.word	0x0800ed98
 8003684:	0800edb0 	.word	0x0800edb0
 8003688:	0800edb4 	.word	0x0800edb4
 800368c:	0800edcc 	.word	0x0800edcc
 8003690:	0800edd0 	.word	0x0800edd0
 8003694:	0800ede8 	.word	0x0800ede8
 8003698:	0800edec 	.word	0x0800edec
 800369c:	40533333 	.word	0x40533333
 80036a0:	457ff000 	.word	0x457ff000
 80036a4:	0800ee08 	.word	0x0800ee08
 80036a8:	0800ee30 	.word	0x0800ee30
	    }
	    else if (strcmp(token3, "RESISTOR") == 0) {
 80036ac:	49bb      	ldr	r1, [pc, #748]	@ (800399c <command+0x131c>)
 80036ae:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80036b2:	f7fc fd4d 	bl	8000150 <strcmp>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d169      	bne.n	8003790 <command+0x1110>
	        float vOut = adcToVoltage(adcValues[2]);  // PA4
 80036bc:	4bb8      	ldr	r3, [pc, #736]	@ (80039a0 <command+0x1320>)
 80036be:	889b      	ldrh	r3, [r3, #4]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe ffc1 	bl	8002648 <adcToVoltage>
 80036c6:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
	        float rFixed = 1000.0f;
 80036ca:	4bb6      	ldr	r3, [pc, #728]	@ (80039a4 <command+0x1324>)
 80036cc:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	        float vIn = 3.3f;
 80036d0:	4bb5      	ldr	r3, [pc, #724]	@ (80039a8 <command+0x1328>)
 80036d2:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

	        if (vOut <= 0.01f || vOut >= 3.29f) {
 80036d6:	49b5      	ldr	r1, [pc, #724]	@ (80039ac <command+0x132c>)
 80036d8:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 80036dc:	f7fd fce4 	bl	80010a8 <__aeabi_fcmple>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <command+0x1076>
 80036e6:	49b2      	ldr	r1, [pc, #712]	@ (80039b0 <command+0x1330>)
 80036e8:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 80036ec:	f7fd fce6 	bl	80010bc <__aeabi_fcmpge>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01b      	beq.n	800372e <command+0x10ae>
	            int len = sprintf(msg, "Gecersiz Vout: %.2f V - \r\n", vOut);
 80036f6:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 80036fa:	f7fc fe9f 	bl	800043c <__aeabi_f2d>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	f107 000c 	add.w	r0, r7, #12
 8003706:	49ab      	ldr	r1, [pc, #684]	@ (80039b4 <command+0x1334>)
 8003708:	f008 fa58 	bl	800bbbc <siprintf>
 800370c:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8003710:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8003714:	b29a      	uxth	r2, r3
 8003716:	f107 010c 	add.w	r1, r7, #12
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	48a6      	ldr	r0, [pc, #664]	@ (80039b8 <command+0x1338>)
 8003720:	f006 fd82 	bl	800a228 <HAL_UART_Transmit>
	            process_uart = false;
 8003724:	4ba5      	ldr	r3, [pc, #660]	@ (80039bc <command+0x133c>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
	            return;
 800372a:	f000 be8d 	b.w	8004448 <command+0x1dc8>
	        }

	        float rUnknown = (rFixed) * (vOut / (vIn - vOut));
 800372e:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8003732:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8003736:	f7fd fa05 	bl	8000b44 <__aeabi_fsub>
 800373a:	4603      	mov	r3, r0
 800373c:	4619      	mov	r1, r3
 800373e:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8003742:	f7fd fbbd 	bl	8000ec0 <__aeabi_fdiv>
 8003746:	4603      	mov	r3, r0
 8003748:	4619      	mov	r1, r3
 800374a:	f8d7 0318 	ldr.w	r0, [r7, #792]	@ 0x318
 800374e:	f7fd fb03 	bl	8000d58 <__aeabi_fmul>
 8003752:	4603      	mov	r3, r0
 8003754:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
	        int len = sprintf(msg, "R degeri: %.2f Ohm\r\n", rUnknown);
 8003758:	f8d7 0310 	ldr.w	r0, [r7, #784]	@ 0x310
 800375c:	f7fc fe6e 	bl	800043c <__aeabi_f2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	f107 000c 	add.w	r0, r7, #12
 8003768:	4995      	ldr	r1, [pc, #596]	@ (80039c0 <command+0x1340>)
 800376a:	f008 fa27 	bl	800bbbc <siprintf>
 800376e:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8003772:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8003776:	b29a      	uxth	r2, r3
 8003778:	f107 010c 	add.w	r1, r7, #12
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	488d      	ldr	r0, [pc, #564]	@ (80039b8 <command+0x1338>)
 8003782:	f006 fd51 	bl	800a228 <HAL_UART_Transmit>
	     //   for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
	      //  	                adcValues[i] = 0;
	       // 	            }
	        process_uart = false;  // Komut işlendi, flag kapat
 8003786:	4b8d      	ldr	r3, [pc, #564]	@ (80039bc <command+0x133c>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
	            return;                // Fonksiyondan çık, daha fazla işlem yapma
 800378c:	f000 be5c 	b.w	8004448 <command+0x1dc8>
	    }
	    else {
	        int len = sprintf(msg, "Hatali giris yaptiniz: %s\r\n", token3);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	f8d7 2350 	ldr.w	r2, [r7, #848]	@ 0x350
 8003798:	498a      	ldr	r1, [pc, #552]	@ (80039c4 <command+0x1344>)
 800379a:	4618      	mov	r0, r3
 800379c:	f008 fa0e 	bl	800bbbc <siprintf>
 80037a0:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80037a4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f107 010c 	add.w	r1, r7, #12
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	4881      	ldr	r0, [pc, #516]	@ (80039b8 <command+0x1338>)
 80037b4:	f006 fd38 	bl	800a228 <HAL_UART_Transmit>
	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "SHOW") == 0) {
 80037b8:	f000 be3c 	b.w	8004434 <command+0x1db4>
	    }
	}
	else if (strcmp(token1, "ADC") == 0 && strcmp(token2, "MEASURE") == 0)
 80037bc:	4982      	ldr	r1, [pc, #520]	@ (80039c8 <command+0x1348>)
 80037be:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80037c2:	f7fc fcc5 	bl	8000150 <strcmp>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d154      	bne.n	8003876 <command+0x11f6>
 80037cc:	497f      	ldr	r1, [pc, #508]	@ (80039cc <command+0x134c>)
 80037ce:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80037d2:	f7fc fcbd 	bl	8000150 <strcmp>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d14c      	bne.n	8003876 <command+0x11f6>
	{
	    if (token3 == NULL)
 80037dc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11f      	bne.n	8003824 <command+0x11a4>
	    {
	        char msg[] = "ADC;MEASURE;CAP komutu eksik.\r\n";
 80037e4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80037e8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80037ec:	4a78      	ldr	r2, [pc, #480]	@ (80039d0 <command+0x1350>)
 80037ee:	461c      	mov	r4, r3
 80037f0:	4615      	mov	r5, r2
 80037f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fcae 	bl	8000164 <strlen>
 8003808:	4603      	mov	r3, r0
 800380a:	b29a      	uxth	r2, r3
 800380c:	f107 010c 	add.w	r1, r7, #12
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	4868      	ldr	r0, [pc, #416]	@ (80039b8 <command+0x1338>)
 8003816:	f006 fd07 	bl	800a228 <HAL_UART_Transmit>
	        process_uart = false;
 800381a:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <command+0x133c>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	f000 be12 	b.w	8004448 <command+0x1dc8>
	        return;
	    }

	    if (strcmp(token3, "CAP") == 0)
 8003824:	496b      	ldr	r1, [pc, #428]	@ (80039d4 <command+0x1354>)
 8003826:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 800382a:	f7fc fc91 	bl	8000150 <strcmp>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	f040 85ff 	bne.w	8004434 <command+0x1db4>
	    {
	        float cap_uF = measureCapacitance();
 8003836:	f7fe fde1 	bl	80023fc <measureCapacitance>
 800383a:	f8c7 02f4 	str.w	r0, [r7, #756]	@ 0x2f4
	        char msg[64];
	        int len = sprintf(msg, "Olculen kapasite: %.2f uF\r\n", cap_uF);
 800383e:	f8d7 02f4 	ldr.w	r0, [r7, #756]	@ 0x2f4
 8003842:	f7fc fdfb 	bl	800043c <__aeabi_f2d>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	f107 000c 	add.w	r0, r7, #12
 800384e:	4962      	ldr	r1, [pc, #392]	@ (80039d8 <command+0x1358>)
 8003850:	f008 f9b4 	bl	800bbbc <siprintf>
 8003854:	f8c7 02f0 	str.w	r0, [r7, #752]	@ 0x2f0
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8003858:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800385c:	b29a      	uxth	r2, r3
 800385e:	f107 010c 	add.w	r1, r7, #12
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	4854      	ldr	r0, [pc, #336]	@ (80039b8 <command+0x1338>)
 8003868:	f006 fcde 	bl	800a228 <HAL_UART_Transmit>
	        process_uart = false;
 800386c:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <command+0x133c>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	f000 bde9 	b.w	8004448 <command+0x1dc8>
	        return;
	    }
	}


	else if(strcmp(token1, "ADXL") == 0 && strcmp(token2, "SERVO") == 0 && strcmp(token3,"Y") == 0){
 8003876:	4959      	ldr	r1, [pc, #356]	@ (80039dc <command+0x135c>)
 8003878:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 800387c:	f7fc fc68 	bl	8000150 <strcmp>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 80e7 	bne.w	8003a56 <command+0x13d6>
 8003888:	4955      	ldr	r1, [pc, #340]	@ (80039e0 <command+0x1360>)
 800388a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 800388e:	f7fc fc5f 	bl	8000150 <strcmp>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 80de 	bne.w	8003a56 <command+0x13d6>
 800389a:	4952      	ldr	r1, [pc, #328]	@ (80039e4 <command+0x1364>)
 800389c:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80038a0:	f7fc fc56 	bl	8000150 <strcmp>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f040 80d5 	bne.w	8003a56 <command+0x13d6>
		if (token4 == NULL){
 80038ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d124      	bne.n	80038fe <command+0x127e>
			char msg[] = "ADXL;SERVO;<ON-OFF> yapiniz. \r\n";
 80038b4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80038b8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80038bc:	4a4a      	ldr	r2, [pc, #296]	@ (80039e8 <command+0x1368>)
 80038be:	461c      	mov	r4, r3
 80038c0:	4615      	mov	r5, r2
 80038c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80038ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fc46 	bl	8000164 <strlen>
 80038d8:	4603      	mov	r3, r0
 80038da:	b29a      	uxth	r2, r3
 80038dc:	f107 010c 	add.w	r1, r7, #12
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	4834      	ldr	r0, [pc, #208]	@ (80039b8 <command+0x1338>)
 80038e6:	f006 fc9f 	bl	800a228 <HAL_UART_Transmit>
			memset(rxBuffer, 0, sizeof(rxBuffer));
 80038ea:	2280      	movs	r2, #128	@ 0x80
 80038ec:	2100      	movs	r1, #0
 80038ee:	483f      	ldr	r0, [pc, #252]	@ (80039ec <command+0x136c>)
 80038f0:	f008 fa5e 	bl	800bdb0 <memset>
			    process_uart = false;
 80038f4:	4b31      	ldr	r3, [pc, #196]	@ (80039bc <command+0x133c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	f000 bda5 	b.w	8004448 <command+0x1dc8>
			return;
		}
		if (strcmp(token4, "ON") == 0){
 80038fe:	493c      	ldr	r1, [pc, #240]	@ (80039f0 <command+0x1370>)
 8003900:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 8003904:	f7fc fc24 	bl	8000150 <strcmp>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11e      	bne.n	800394c <command+0x12cc>
			servoFollowY = true;
 800390e:	4b39      	ldr	r3, [pc, #228]	@ (80039f4 <command+0x1374>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
			char msg[] = "SERVO Y takip modu aktif. \r\n";
 8003914:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003918:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800391c:	4a36      	ldr	r2, [pc, #216]	@ (80039f8 <command+0x1378>)
 800391e:	461c      	mov	r4, r3
 8003920:	4615      	mov	r5, r2
 8003922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003926:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800392a:	c407      	stmia	r4!, {r0, r1, r2}
 800392c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800392e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fc16 	bl	8000164 <strlen>
 8003938:	4603      	mov	r3, r0
 800393a:	b29a      	uxth	r2, r3
 800393c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
 8003944:	481c      	ldr	r0, [pc, #112]	@ (80039b8 <command+0x1338>)
 8003946:	f006 fc6f 	bl	800a228 <HAL_UART_Transmit>
 800394a:	e07a      	b.n	8003a42 <command+0x13c2>
		}
		else if(strcmp(token4, "OFF") == 0){
 800394c:	492b      	ldr	r1, [pc, #172]	@ (80039fc <command+0x137c>)
 800394e:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 8003952:	f7fc fbfd 	bl	8000150 <strcmp>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d153      	bne.n	8003a04 <command+0x1384>
			servoFollowY = false;
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <command+0x1374>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
			char msg[] = "SERVO Y takip modu kapatildi. \r\n";
 8003962:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003966:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <command+0x1380>)
 800396c:	461c      	mov	r4, r3
 800396e:	4615      	mov	r5, r2
 8003970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fbef 	bl	8000164 <strlen>
 8003986:	4603      	mov	r3, r0
 8003988:	b29a      	uxth	r2, r3
 800398a:	f107 010c 	add.w	r1, r7, #12
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	4809      	ldr	r0, [pc, #36]	@ (80039b8 <command+0x1338>)
 8003994:	f006 fc48 	bl	800a228 <HAL_UART_Transmit>
 8003998:	e053      	b.n	8003a42 <command+0x13c2>
 800399a:	bf00      	nop
 800399c:	0800ee44 	.word	0x0800ee44
 80039a0:	2000064c 	.word	0x2000064c
 80039a4:	447a0000 	.word	0x447a0000
 80039a8:	40533333 	.word	0x40533333
 80039ac:	3c23d70a 	.word	0x3c23d70a
 80039b0:	40528f5c 	.word	0x40528f5c
 80039b4:	0800ee50 	.word	0x0800ee50
 80039b8:	200005f8 	.word	0x200005f8
 80039bc:	200006d6 	.word	0x200006d6
 80039c0:	0800ee6c 	.word	0x0800ee6c
 80039c4:	0800ee84 	.word	0x0800ee84
 80039c8:	0800ed90 	.word	0x0800ed90
 80039cc:	0800ec74 	.word	0x0800ec74
 80039d0:	0800f2a8 	.word	0x0800f2a8
 80039d4:	0800eea0 	.word	0x0800eea0
 80039d8:	0800eea4 	.word	0x0800eea4
 80039dc:	0800eec0 	.word	0x0800eec0
 80039e0:	0800eec8 	.word	0x0800eec8
 80039e4:	0800eed0 	.word	0x0800eed0
 80039e8:	0800f2c8 	.word	0x0800f2c8
 80039ec:	20000654 	.word	0x20000654
 80039f0:	0800ec54 	.word	0x0800ec54
 80039f4:	200006ec 	.word	0x200006ec
 80039f8:	0800f2e8 	.word	0x0800f2e8
 80039fc:	0800ec58 	.word	0x0800ec58
 8003a00:	0800f308 	.word	0x0800f308
		}
		else{
			char msg[] = "Yanlis komut girdiniz. Ornek komutlar icin HELP; yaziniz. \r\n";
 8003a04:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003a08:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003a0c:	4aad      	ldr	r2, [pc, #692]	@ (8003cc4 <command+0x1644>)
 8003a0e:	461c      	mov	r4, r3
 8003a10:	4615      	mov	r5, r2
 8003a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a22:	c407      	stmia	r4!, {r0, r1, r2}
 8003a24:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fb9a 	bl	8000164 <strlen>
 8003a30:	4603      	mov	r3, r0
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	f107 010c 	add.w	r1, r7, #12
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3c:	48a2      	ldr	r0, [pc, #648]	@ (8003cc8 <command+0x1648>)
 8003a3e:	f006 fbf3 	bl	800a228 <HAL_UART_Transmit>
		}
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	2100      	movs	r1, #0
 8003a46:	48a1      	ldr	r0, [pc, #644]	@ (8003ccc <command+0x164c>)
 8003a48:	f008 f9b2 	bl	800bdb0 <memset>
		    process_uart = false;
 8003a4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003cd0 <command+0x1650>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
		return;
 8003a52:	f000 bcf9 	b.w	8004448 <command+0x1dc8>
	}

	else if(strcmp(token1, "ADXL") == 0 && strcmp(token2, "ACC") == 0 && strcmp(token3,"LED") == 0){
 8003a56:	499f      	ldr	r1, [pc, #636]	@ (8003cd4 <command+0x1654>)
 8003a58:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8003a5c:	f7fc fb78 	bl	8000150 <strcmp>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80b2 	bne.w	8003bcc <command+0x154c>
 8003a68:	499b      	ldr	r1, [pc, #620]	@ (8003cd8 <command+0x1658>)
 8003a6a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8003a6e:	f7fc fb6f 	bl	8000150 <strcmp>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 80a9 	bne.w	8003bcc <command+0x154c>
 8003a7a:	4998      	ldr	r1, [pc, #608]	@ (8003cdc <command+0x165c>)
 8003a7c:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003a80:	f7fc fb66 	bl	8000150 <strcmp>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80a0 	bne.w	8003bcc <command+0x154c>
			if (token4 == NULL){
 8003a8c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d124      	bne.n	8003ade <command+0x145e>
				char msg[] = "ADXL;ACC;LED;<ON-OFF> yapiniz. \r\n";
 8003a94:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003a98:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003a9c:	4a90      	ldr	r2, [pc, #576]	@ (8003ce0 <command+0x1660>)
 8003a9e:	461c      	mov	r4, r3
 8003aa0:	4615      	mov	r5, r2
 8003aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fb56 	bl	8000164 <strlen>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f107 010c 	add.w	r1, r7, #12
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	4880      	ldr	r0, [pc, #512]	@ (8003cc8 <command+0x1648>)
 8003ac6:	f006 fbaf 	bl	800a228 <HAL_UART_Transmit>
				memset(rxBuffer, 0, sizeof(rxBuffer));
 8003aca:	2280      	movs	r2, #128	@ 0x80
 8003acc:	2100      	movs	r1, #0
 8003ace:	487f      	ldr	r0, [pc, #508]	@ (8003ccc <command+0x164c>)
 8003ad0:	f008 f96e 	bl	800bdb0 <memset>
				    process_uart = false;
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd0 <command+0x1650>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	f000 bcb5 	b.w	8004448 <command+0x1dc8>
				return;
			}
			if (strcmp(token4, "ON") == 0){
 8003ade:	4981      	ldr	r1, [pc, #516]	@ (8003ce4 <command+0x1664>)
 8003ae0:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 8003ae4:	f7fc fb34 	bl	8000150 <strcmp>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11e      	bne.n	8003b2c <command+0x14ac>
				ledFollowAccX = true;
 8003aee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce8 <command+0x1668>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
				char msg[] = "LED-Ivme kontrol modu aktif. \r\n";
 8003af4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003af8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003afc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cec <command+0x166c>)
 8003afe:	461c      	mov	r4, r3
 8003b00:	4615      	mov	r5, r2
 8003b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fb26 	bl	8000164 <strlen>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	f107 010c 	add.w	r1, r7, #12
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	4868      	ldr	r0, [pc, #416]	@ (8003cc8 <command+0x1648>)
 8003b26:	f006 fb7f 	bl	800a228 <HAL_UART_Transmit>
 8003b2a:	e045      	b.n	8003bb8 <command+0x1538>
			}
			else if(strcmp(token4, "OFF") == 0){
 8003b2c:	4970      	ldr	r1, [pc, #448]	@ (8003cf0 <command+0x1670>)
 8003b2e:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 8003b32:	f7fc fb0d 	bl	8000150 <strcmp>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11e      	bne.n	8003b7a <command+0x14fa>
				ledFollowAccX = false;
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce8 <command+0x1668>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
				char msg[] = "LED-Ivme kontrol modu kapatildi. \r\n";
 8003b42:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003b46:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <command+0x1674>)
 8003b4c:	461c      	mov	r4, r3
 8003b4e:	4615      	mov	r5, r2
 8003b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc faff 	bl	8000164 <strlen>
 8003b66:	4603      	mov	r3, r0
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	f107 010c 	add.w	r1, r7, #12
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	4855      	ldr	r0, [pc, #340]	@ (8003cc8 <command+0x1648>)
 8003b74:	f006 fb58 	bl	800a228 <HAL_UART_Transmit>
 8003b78:	e01e      	b.n	8003bb8 <command+0x1538>
			}
			else{
				char msg[] = "Yanlis komut girdiniz. Ornek komutlar icin HELP; yaziniz. \r\n";
 8003b7a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003b7e:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003b82:	4a50      	ldr	r2, [pc, #320]	@ (8003cc4 <command+0x1644>)
 8003b84:	461c      	mov	r4, r3
 8003b86:	4615      	mov	r5, r2
 8003b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b98:	c407      	stmia	r4!, {r0, r1, r2}
 8003b9a:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fadf 	bl	8000164 <strlen>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	f107 010c 	add.w	r1, r7, #12
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	4845      	ldr	r0, [pc, #276]	@ (8003cc8 <command+0x1648>)
 8003bb4:	f006 fb38 	bl	800a228 <HAL_UART_Transmit>
			}
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4843      	ldr	r0, [pc, #268]	@ (8003ccc <command+0x164c>)
 8003bbe:	f008 f8f7 	bl	800bdb0 <memset>
			    process_uart = false;
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <command+0x1650>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
			return;
 8003bc8:	f000 bc3e 	b.w	8004448 <command+0x1dc8>
		}

	else if(strcmp(token1, "I2C") == 0){
 8003bcc:	494a      	ldr	r1, [pc, #296]	@ (8003cf8 <command+0x1678>)
 8003bce:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8003bd2:	f7fc fabd 	bl	8000150 <strcmp>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 82b3 	bne.w	8004144 <command+0x1ac4>
	//		 char msg[] = "I2C komutu icin I2C;SCAN; yaziniz\r\n";
	//		 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	//		 memset(rxBuffer, 0, sizeof(rxBuffer));
	//		        process_uart = false;
	//		        return;
		if(strcmp(token2, "SCAN")== 0){
 8003bde:	4947      	ldr	r1, [pc, #284]	@ (8003cfc <command+0x167c>)
 8003be0:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8003be4:	f7fc fab4 	bl	8000150 <strcmp>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8090 	bne.w	8003d10 <command+0x1690>
			 char msg[] = "I2C taramasi basladi.\r\n";
 8003bf0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003bf4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8003bf8:	4a41      	ldr	r2, [pc, #260]	@ (8003d00 <command+0x1680>)
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	4615      	mov	r5, r2
 8003bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c06:	e884 0003 	stmia.w	r4, {r0, r1}
			    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003c0a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc faa8 	bl	8000164 <strlen>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c20:	4829      	ldr	r0, [pc, #164]	@ (8003cc8 <command+0x1648>)
 8003c22:	f006 fb01 	bl	800a228 <HAL_UART_Transmit>

			    for(uint8_t adress = 1; adress < 128; adress++) {
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 335f 	strb.w	r3, [r7, #863]	@ 0x35f
 8003c2c:	e045      	b.n	8003cba <command+0x163a>
			    	if(HAL_I2C_IsDeviceReady(&hi2c1, (adress<<1), 2, 10) == HAL_OK){
 8003c2e:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	b299      	uxth	r1, r3
 8003c38:	230a      	movs	r3, #10
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4831      	ldr	r0, [pc, #196]	@ (8003d04 <command+0x1684>)
 8003c3e:	f003 fd57 	bl	80076f0 <HAL_I2C_IsDeviceReady>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d133      	bne.n	8003cb0 <command+0x1630>
			    		char msg[32];
			    		sprintf(msg, "I2C cihaz bulundu:0x%02x\r\n", adress);
 8003c48:	f897 235f 	ldrb.w	r2, [r7, #863]	@ 0x35f
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	492d      	ldr	r1, [pc, #180]	@ (8003d08 <command+0x1688>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f007 ffb2 	bl	800bbbc <siprintf>
			    		char amsg[] = "I2C taramasi tamamlandi.\r\n";
 8003c58:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003c5c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8003c60:	4a2a      	ldr	r2, [pc, #168]	@ (8003d0c <command+0x168c>)
 8003c62:	461c      	mov	r4, r3
 8003c64:	4615      	mov	r5, r2
 8003c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c6e:	c403      	stmia	r4!, {r0, r1}
 8003c70:	8022      	strh	r2, [r4, #0]
 8003c72:	3402      	adds	r4, #2
 8003c74:	0c13      	lsrs	r3, r2, #16
 8003c76:	7023      	strb	r3, [r4, #0]
			    						    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fa71 	bl	8000164 <strlen>
 8003c82:	4603      	mov	r3, r0
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	f107 010c 	add.w	r1, r7, #12
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	480e      	ldr	r0, [pc, #56]	@ (8003cc8 <command+0x1648>)
 8003c90:	f006 faca 	bl	800a228 <HAL_UART_Transmit>
			    		HAL_UART_Transmit(&huart1, (uint8_t*)amsg, strlen(amsg), HAL_MAX_DELAY);
 8003c94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fa63 	bl	8000164 <strlen>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	4807      	ldr	r0, [pc, #28]	@ (8003cc8 <command+0x1648>)
 8003cac:	f006 fabc 	bl	800a228 <HAL_UART_Transmit>
			    for(uint8_t adress = 1; adress < 128; adress++) {
 8003cb0:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f887 335f 	strb.w	r3, [r7, #863]	@ 0x35f
 8003cba:	f997 335f 	ldrsb.w	r3, [r7, #863]	@ 0x35f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dab5      	bge.n	8003c2e <command+0x15ae>
 8003cc2:	e3b7      	b.n	8004434 <command+0x1db4>
 8003cc4:	0800f32c 	.word	0x0800f32c
 8003cc8:	200005f8 	.word	0x200005f8
 8003ccc:	20000654 	.word	0x20000654
 8003cd0:	200006d6 	.word	0x200006d6
 8003cd4:	0800eec0 	.word	0x0800eec0
 8003cd8:	0800eed4 	.word	0x0800eed4
 8003cdc:	0800ec50 	.word	0x0800ec50
 8003ce0:	0800f36c 	.word	0x0800f36c
 8003ce4:	0800ec54 	.word	0x0800ec54
 8003ce8:	200006ed 	.word	0x200006ed
 8003cec:	0800f390 	.word	0x0800f390
 8003cf0:	0800ec58 	.word	0x0800ec58
 8003cf4:	0800f3b0 	.word	0x0800f3b0
 8003cf8:	0800eed8 	.word	0x0800eed8
 8003cfc:	0800eedc 	.word	0x0800eedc
 8003d00:	0800f3d4 	.word	0x0800f3d4
 8003d04:	200004c0 	.word	0x200004c0
 8003d08:	0800eee4 	.word	0x0800eee4
 8003d0c:	0800f3ec 	.word	0x0800f3ec
			    	}
			    }
		}
	else if (strcmp(token1, "I2C") == 0 && (strcmp(token2, "DATA") == 0)){
 8003d10:	49ba      	ldr	r1, [pc, #744]	@ (8003ffc <command+0x197c>)
 8003d12:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8003d16:	f7fc fa1b 	bl	8000150 <strcmp>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8389 	bne.w	8004434 <command+0x1db4>
 8003d22:	49b7      	ldr	r1, [pc, #732]	@ (8004000 <command+0x1980>)
 8003d24:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8003d28:	f7fc fa12 	bl	8000150 <strcmp>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 8380 	bne.w	8004434 <command+0x1db4>
		adxl345_read_xyz(&hi2c1, &gx, &gy, &gz);
 8003d34:	4bb3      	ldr	r3, [pc, #716]	@ (8004004 <command+0x1984>)
 8003d36:	4ab4      	ldr	r2, [pc, #720]	@ (8004008 <command+0x1988>)
 8003d38:	49b4      	ldr	r1, [pc, #720]	@ (800400c <command+0x198c>)
 8003d3a:	48b5      	ldr	r0, [pc, #724]	@ (8004010 <command+0x1990>)
 8003d3c:	f7fe fb26 	bl	800238c <adxl345_read_xyz>
		calc_acceleration_ms2(gx,gy,gz,&ax,&ay,&az);
 8003d40:	4bb2      	ldr	r3, [pc, #712]	@ (800400c <command+0x198c>)
 8003d42:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003d46:	4bb0      	ldr	r3, [pc, #704]	@ (8004008 <command+0x1988>)
 8003d48:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003d4c:	4bad      	ldr	r3, [pc, #692]	@ (8004004 <command+0x1984>)
 8003d4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d52:	4bb0      	ldr	r3, [pc, #704]	@ (8004014 <command+0x1994>)
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	4bb0      	ldr	r3, [pc, #704]	@ (8004018 <command+0x1998>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800401c <command+0x199c>)
 8003d5c:	f7fe fa78 	bl	8002250 <calc_acceleration_ms2>
		if(token3 == NULL){
 8003d60:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11d      	bne.n	8003da4 <command+0x1724>
			char msg[]="I2C;DATA;<gX,gY,gZ,aX,aY,aZ> yaziniz.\r\n";
 8003d68:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003d6c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003d70:	4aab      	ldr	r2, [pc, #684]	@ (8004020 <command+0x19a0>)
 8003d72:	461c      	mov	r4, r3
 8003d74:	4615      	mov	r5, r2
 8003d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d82:	e884 0003 	stmia.w	r4, {r0, r1}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc f9ea 	bl	8000164 <strlen>
 8003d90:	4603      	mov	r3, r0
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	f107 010c 	add.w	r1, r7, #12
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	48a1      	ldr	r0, [pc, #644]	@ (8004024 <command+0x19a4>)
 8003d9e:	f006 fa43 	bl	800a228 <HAL_UART_Transmit>
 8003da2:	e1c6      	b.n	8004132 <command+0x1ab2>
		}
		else if(strcmp(token3, "gX") == 0){
 8003da4:	49a0      	ldr	r1, [pc, #640]	@ (8004028 <command+0x19a8>)
 8003da6:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003daa:	f7fc f9d1 	bl	8000150 <strcmp>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <command+0x1766>
			char msg[64];
			sprintf(msg, "gX: %d \r\n", gx);
 8003db4:	4b95      	ldr	r3, [pc, #596]	@ (800400c <command+0x198c>)
 8003db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	499a      	ldr	r1, [pc, #616]	@ (800402c <command+0x19ac>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f007 fefa 	bl	800bbbc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc f9c9 	bl	8000164 <strlen>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	f107 010c 	add.w	r1, r7, #12
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	4891      	ldr	r0, [pc, #580]	@ (8004024 <command+0x19a4>)
 8003de0:	f006 fa22 	bl	800a228 <HAL_UART_Transmit>
 8003de4:	e1a5      	b.n	8004132 <command+0x1ab2>
		}
		else if(strcmp(token3, "gY") == 0){
 8003de6:	4992      	ldr	r1, [pc, #584]	@ (8004030 <command+0x19b0>)
 8003de8:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003dec:	f7fc f9b0 	bl	8000150 <strcmp>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <command+0x17a8>
					char msg[64];
					sprintf(msg, "gY: %d \r\n", gy);
 8003df6:	4b84      	ldr	r3, [pc, #528]	@ (8004008 <command+0x1988>)
 8003df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	498c      	ldr	r1, [pc, #560]	@ (8004034 <command+0x19b4>)
 8003e04:	4618      	mov	r0, r3
 8003e06:	f007 fed9 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc f9a8 	bl	8000164 <strlen>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f107 010c 	add.w	r1, r7, #12
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	4880      	ldr	r0, [pc, #512]	@ (8004024 <command+0x19a4>)
 8003e22:	f006 fa01 	bl	800a228 <HAL_UART_Transmit>
 8003e26:	e184      	b.n	8004132 <command+0x1ab2>
				}
		else if(strcmp(token3, "gZ") == 0){
 8003e28:	4983      	ldr	r1, [pc, #524]	@ (8004038 <command+0x19b8>)
 8003e2a:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003e2e:	f7fc f98f 	bl	8000150 <strcmp>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d118      	bne.n	8003e6a <command+0x17ea>
					char msg[64];
					sprintf(msg, "gZ: %d \r\n", gz);
 8003e38:	4b72      	ldr	r3, [pc, #456]	@ (8004004 <command+0x1984>)
 8003e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	497d      	ldr	r1, [pc, #500]	@ (800403c <command+0x19bc>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f007 feb8 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc f987 	bl	8000164 <strlen>
 8003e56:	4603      	mov	r3, r0
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	f107 010c 	add.w	r1, r7, #12
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	4870      	ldr	r0, [pc, #448]	@ (8004024 <command+0x19a4>)
 8003e64:	f006 f9e0 	bl	800a228 <HAL_UART_Transmit>
 8003e68:	e163      	b.n	8004132 <command+0x1ab2>
				}
		else if(strcmp(token3, "gALL") == 0){
 8003e6a:	4975      	ldr	r1, [pc, #468]	@ (8004040 <command+0x19c0>)
 8003e6c:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003e70:	f7fc f96e 	bl	8000150 <strcmp>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d120      	bne.n	8003ebc <command+0x183c>
					char msg[128];
					sprintf(msg, "gX: %d , gY: %d , gZ: %d \r\n", gx,gy,gz);
 8003e7a:	4b64      	ldr	r3, [pc, #400]	@ (800400c <command+0x198c>)
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b61      	ldr	r3, [pc, #388]	@ (8004008 <command+0x1988>)
 8003e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <command+0x1984>)
 8003e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e90:	f107 000c 	add.w	r0, r7, #12
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	460b      	mov	r3, r1
 8003e98:	496a      	ldr	r1, [pc, #424]	@ (8004044 <command+0x19c4>)
 8003e9a:	f007 fe8f 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc f95e 	bl	8000164 <strlen>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	f107 010c 	add.w	r1, r7, #12
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	485b      	ldr	r0, [pc, #364]	@ (8004024 <command+0x19a4>)
 8003eb6:	f006 f9b7 	bl	800a228 <HAL_UART_Transmit>
 8003eba:	e13a      	b.n	8004132 <command+0x1ab2>
				}
		else if(strcmp(token3, "aX") == 0){
 8003ebc:	4962      	ldr	r1, [pc, #392]	@ (8004048 <command+0x19c8>)
 8003ebe:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003ec2:	f7fc f945 	bl	8000150 <strcmp>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d11a      	bne.n	8003f02 <command+0x1882>
			char msg[64];
			sprintf(msg, "aX: %.2f m/s2 \r\n", ax);
 8003ecc:	4b53      	ldr	r3, [pc, #332]	@ (800401c <command+0x199c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fab3 	bl	800043c <__aeabi_f2d>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	f107 000c 	add.w	r0, r7, #12
 8003ede:	495b      	ldr	r1, [pc, #364]	@ (800404c <command+0x19cc>)
 8003ee0:	f007 fe6c 	bl	800bbbc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc f93b 	bl	8000164 <strlen>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	f107 010c 	add.w	r1, r7, #12
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	484a      	ldr	r0, [pc, #296]	@ (8004024 <command+0x19a4>)
 8003efc:	f006 f994 	bl	800a228 <HAL_UART_Transmit>
 8003f00:	e117      	b.n	8004132 <command+0x1ab2>
		}
		else if(strcmp(token3, "aY") == 0){
 8003f02:	4953      	ldr	r1, [pc, #332]	@ (8004050 <command+0x19d0>)
 8003f04:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003f08:	f7fc f922 	bl	8000150 <strcmp>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d11a      	bne.n	8003f48 <command+0x18c8>
					char msg[64];
					sprintf(msg, "aY: %.2f m/s2 \r\n", ay);
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <command+0x1998>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fa90 	bl	800043c <__aeabi_f2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f107 000c 	add.w	r0, r7, #12
 8003f24:	494b      	ldr	r1, [pc, #300]	@ (8004054 <command+0x19d4>)
 8003f26:	f007 fe49 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc f918 	bl	8000164 <strlen>
 8003f34:	4603      	mov	r3, r0
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f107 010c 	add.w	r1, r7, #12
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	4838      	ldr	r0, [pc, #224]	@ (8004024 <command+0x19a4>)
 8003f42:	f006 f971 	bl	800a228 <HAL_UART_Transmit>
 8003f46:	e0f4      	b.n	8004132 <command+0x1ab2>
				}
		else if(strcmp(token3, "aZ") == 0){
 8003f48:	4943      	ldr	r1, [pc, #268]	@ (8004058 <command+0x19d8>)
 8003f4a:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003f4e:	f7fc f8ff 	bl	8000150 <strcmp>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11a      	bne.n	8003f8e <command+0x190e>
					char msg[64];
					sprintf(msg, "aZ: %.2f m/s2 \r\n", az);
 8003f58:	4b2e      	ldr	r3, [pc, #184]	@ (8004014 <command+0x1994>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fa6d 	bl	800043c <__aeabi_f2d>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	f107 000c 	add.w	r0, r7, #12
 8003f6a:	493c      	ldr	r1, [pc, #240]	@ (800405c <command+0x19dc>)
 8003f6c:	f007 fe26 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc f8f5 	bl	8000164 <strlen>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	f107 010c 	add.w	r1, r7, #12
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295
 8003f86:	4827      	ldr	r0, [pc, #156]	@ (8004024 <command+0x19a4>)
 8003f88:	f006 f94e 	bl	800a228 <HAL_UART_Transmit>
 8003f8c:	e0d1      	b.n	8004132 <command+0x1ab2>
				}
		else if(strcmp(token3, "aALL") == 0){
 8003f8e:	4934      	ldr	r1, [pc, #208]	@ (8004060 <command+0x19e0>)
 8003f90:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 8003f94:	f7fc f8dc 	bl	8000150 <strcmp>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d164      	bne.n	8004068 <command+0x19e8>
					char msg[64];
					sprintf(msg, "aX: %.2f m/s2 , aY: %.2f m/s2, aZ: %.2f m/s2 \r\n", ax,ay,az);
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800401c <command+0x199c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fa4a 	bl	800043c <__aeabi_f2d>
 8003fa8:	4680      	mov	r8, r0
 8003faa:	4689      	mov	r9, r1
 8003fac:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <command+0x1998>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa43 	bl	800043c <__aeabi_f2d>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <command+0x1994>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fa3c 	bl	800043c <__aeabi_f2d>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	f107 000c 	add.w	r0, r7, #12
 8003fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fd0:	e9cd 4500 	strd	r4, r5, [sp]
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	4922      	ldr	r1, [pc, #136]	@ (8004064 <command+0x19e4>)
 8003fda:	f007 fdef 	bl	800bbbc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc f8be 	bl	8000164 <strlen>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	f107 010c 	add.w	r1, r7, #12
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	480b      	ldr	r0, [pc, #44]	@ (8004024 <command+0x19a4>)
 8003ff6:	f006 f917 	bl	800a228 <HAL_UART_Transmit>
 8003ffa:	e09a      	b.n	8004132 <command+0x1ab2>
 8003ffc:	0800eed8 	.word	0x0800eed8
 8004000:	0800ef00 	.word	0x0800ef00
 8004004:	200006dc 	.word	0x200006dc
 8004008:	200006da 	.word	0x200006da
 800400c:	200006d8 	.word	0x200006d8
 8004010:	200004c0 	.word	0x200004c0
 8004014:	200006e8 	.word	0x200006e8
 8004018:	200006e4 	.word	0x200006e4
 800401c:	200006e0 	.word	0x200006e0
 8004020:	0800f408 	.word	0x0800f408
 8004024:	200005f8 	.word	0x200005f8
 8004028:	0800ef08 	.word	0x0800ef08
 800402c:	0800ef0c 	.word	0x0800ef0c
 8004030:	0800ef18 	.word	0x0800ef18
 8004034:	0800ef1c 	.word	0x0800ef1c
 8004038:	0800ef28 	.word	0x0800ef28
 800403c:	0800ef2c 	.word	0x0800ef2c
 8004040:	0800ef38 	.word	0x0800ef38
 8004044:	0800ef40 	.word	0x0800ef40
 8004048:	0800ef5c 	.word	0x0800ef5c
 800404c:	0800ef60 	.word	0x0800ef60
 8004050:	0800ef74 	.word	0x0800ef74
 8004054:	0800ef78 	.word	0x0800ef78
 8004058:	0800ef8c 	.word	0x0800ef8c
 800405c:	0800ef90 	.word	0x0800ef90
 8004060:	0800efa4 	.word	0x0800efa4
 8004064:	0800efac 	.word	0x0800efac
				}
		else if(strcmp(token3, "ALL") == 0){
 8004068:	49b6      	ldr	r1, [pc, #728]	@ (8004344 <command+0x1cc4>)
 800406a:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 800406e:	f7fc f86f 	bl	8000150 <strcmp>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d13d      	bne.n	80040f4 <command+0x1a74>
					char msg[128];
					sprintf(msg, "gX: %d | gY: %d | gZ: %d \r\n"
 8004078:	4bb3      	ldr	r3, [pc, #716]	@ (8004348 <command+0x1cc8>)
 800407a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800407e:	469a      	mov	sl, r3
 8004080:	4bb2      	ldr	r3, [pc, #712]	@ (800434c <command+0x1ccc>)
 8004082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004086:	469b      	mov	fp, r3
 8004088:	4bb1      	ldr	r3, [pc, #708]	@ (8004350 <command+0x1cd0>)
 800408a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800408e:	461e      	mov	r6, r3
 8004090:	4bb0      	ldr	r3, [pc, #704]	@ (8004354 <command+0x1cd4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc f9d1 	bl	800043c <__aeabi_f2d>
 800409a:	4604      	mov	r4, r0
 800409c:	460d      	mov	r5, r1
 800409e:	4bae      	ldr	r3, [pc, #696]	@ (8004358 <command+0x1cd8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc f9ca 	bl	800043c <__aeabi_f2d>
 80040a8:	4680      	mov	r8, r0
 80040aa:	4689      	mov	r9, r1
 80040ac:	4bab      	ldr	r3, [pc, #684]	@ (800435c <command+0x1cdc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f9c3 	bl	800043c <__aeabi_f2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	f107 000c 	add.w	r0, r7, #12
 80040be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040c2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80040c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80040ca:	9600      	str	r6, [sp, #0]
 80040cc:	465b      	mov	r3, fp
 80040ce:	4652      	mov	r2, sl
 80040d0:	49a3      	ldr	r1, [pc, #652]	@ (8004360 <command+0x1ce0>)
 80040d2:	f007 fd73 	bl	800bbbc <siprintf>
								 "-----------------------------	\r\n"
								 "aX: %.2f m/s2 | aY: %.2f m/s2 | aZ: %.2f m/s2 \r\n", gx,gy,gz,ax,ay,az);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80040d6:	f107 030c 	add.w	r3, r7, #12
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc f842 	bl	8000164 <strlen>
 80040e0:	4603      	mov	r3, r0
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f107 010c 	add.w	r1, r7, #12
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	489d      	ldr	r0, [pc, #628]	@ (8004364 <command+0x1ce4>)
 80040ee:	f006 f89b 	bl	800a228 <HAL_UART_Transmit>
 80040f2:	e01e      	b.n	8004132 <command+0x1ab2>
		}
		else {
			   char msg[] = "Hatali komut girdiniz. HELP; ile komutlara ulasabilirsiniz.";
 80040f4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80040f8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80040fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004368 <command+0x1ce8>)
 80040fe:	461c      	mov	r4, r3
 8004100:	4615      	mov	r5, r2
 8004102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004116:	f107 030c 	add.w	r3, r7, #12
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc f822 	bl	8000164 <strlen>
 8004120:	4603      	mov	r3, r0
 8004122:	b29a      	uxth	r2, r3
 8004124:	f107 010c 	add.w	r1, r7, #12
 8004128:	f04f 33ff 	mov.w	r3, #4294967295
 800412c:	488d      	ldr	r0, [pc, #564]	@ (8004364 <command+0x1ce4>)
 800412e:	f006 f87b 	bl	800a228 <HAL_UART_Transmit>
		}
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8004132:	2280      	movs	r2, #128	@ 0x80
 8004134:	2100      	movs	r1, #0
 8004136:	488d      	ldr	r0, [pc, #564]	@ (800436c <command+0x1cec>)
 8004138:	f007 fe3a 	bl	800bdb0 <memset>
		    process_uart = false;
 800413c:	4b8c      	ldr	r3, [pc, #560]	@ (8004370 <command+0x1cf0>)
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
		    return;
 8004142:	e181      	b.n	8004448 <command+0x1dc8>
	}
}
	else if (strcmp(token1, "MCU") == 0) {
 8004144:	498b      	ldr	r1, [pc, #556]	@ (8004374 <command+0x1cf4>)
 8004146:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 800414a:	f7fc f801 	bl	8000150 <strcmp>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d16d      	bne.n	8004230 <command+0x1bb0>
		if(token2 == NULL){
 8004154:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11d      	bne.n	8004198 <command+0x1b18>
			char msg[] = "Reset atmak icin MCU;RESTART yaziniz.\r\n";
 800415c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8004160:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8004164:	4a84      	ldr	r2, [pc, #528]	@ (8004378 <command+0x1cf8>)
 8004166:	461c      	mov	r4, r3
 8004168:	4615      	mov	r5, r2
 800416a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800416c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004172:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004176:	e884 0003 	stmia.w	r4, {r0, r1}
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	4618      	mov	r0, r3
 8004180:	f7fb fff0 	bl	8000164 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	b29a      	uxth	r2, r3
 8004188:	f107 010c 	add.w	r1, r7, #12
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	4874      	ldr	r0, [pc, #464]	@ (8004364 <command+0x1ce4>)
 8004192:	f006 f849 	bl	800a228 <HAL_UART_Transmit>
 8004196:	e14d      	b.n	8004434 <command+0x1db4>
		}
		else if (strcmp(token2, "RESTART") == 0){
 8004198:	4978      	ldr	r1, [pc, #480]	@ (800437c <command+0x1cfc>)
 800419a:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 800419e:	f7fb ffd7 	bl	8000150 <strcmp>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d123      	bne.n	80041f0 <command+0x1b70>
			char msg[] = "Sistem yeniden baslatiliyor.\r\n";
 80041a8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80041ac:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80041b0:	4a73      	ldr	r2, [pc, #460]	@ (8004380 <command+0x1d00>)
 80041b2:	461c      	mov	r4, r3
 80041b4:	4615      	mov	r5, r2
 80041b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80041be:	c407      	stmia	r4!, {r0, r1, r2}
 80041c0:	8023      	strh	r3, [r4, #0]
 80041c2:	3402      	adds	r4, #2
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80041c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fb ffc9 	bl	8000164 <strlen>
 80041d2:	4603      	mov	r3, r0
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	4861      	ldr	r0, [pc, #388]	@ (8004364 <command+0x1ce4>)
 80041e0:	f006 f822 	bl	800a228 <HAL_UART_Transmit>
			HAL_Delay(1000);
 80041e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041e8:	f001 f862 	bl	80052b0 <HAL_Delay>
			NVIC_SystemReset();
 80041ec:	f7fc ffc0 	bl	8001170 <__NVIC_SystemReset>
		}
		else {
				char msg[] = "Gecersiz MCU komutu. Ornek komutlar icin HELP; yaziniz.\r\n";
 80041f0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80041f4:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80041f8:	4a62      	ldr	r2, [pc, #392]	@ (8004384 <command+0x1d04>)
 80041fa:	461c      	mov	r4, r3
 80041fc:	4615      	mov	r5, r2
 80041fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800420e:	c403      	stmia	r4!, {r0, r1}
 8004210:	8022      	strh	r2, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	4618      	mov	r0, r3
 8004218:	f7fb ffa4 	bl	8000164 <strlen>
 800421c:	4603      	mov	r3, r0
 800421e:	b29a      	uxth	r2, r3
 8004220:	f107 010c 	add.w	r1, r7, #12
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	484e      	ldr	r0, [pc, #312]	@ (8004364 <command+0x1ce4>)
 800422a:	f005 fffd 	bl	800a228 <HAL_UART_Transmit>
 800422e:	e101      	b.n	8004434 <command+0x1db4>
			}
	}
	else if (strcmp(token1, "SERVO") == 0)
 8004230:	4955      	ldr	r1, [pc, #340]	@ (8004388 <command+0x1d08>)
 8004232:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 8004236:	f7fb ff8b 	bl	8000150 <strcmp>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 80c8 	bne.w	80043d2 <command+0x1d52>
	{
	    if (token2 == NULL || strcmp(token2, "SET") != 0)
 8004242:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <command+0x1bda>
 800424a:	4950      	ldr	r1, [pc, #320]	@ (800438c <command+0x1d0c>)
 800424c:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 8004250:	f7fb ff7e 	bl	8000150 <strcmp>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d025      	beq.n	80042a6 <command+0x1c26>
	    {
	        char msg[] = "SERVO icin SERVO;SET; komutunu kullaniniz. \r\n";
 800425a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800425e:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8004262:	4a4b      	ldr	r2, [pc, #300]	@ (8004390 <command+0x1d10>)
 8004264:	461c      	mov	r4, r3
 8004266:	4615      	mov	r5, r2
 8004268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004270:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004274:	c407      	stmia	r4!, {r0, r1, r2}
 8004276:	8023      	strh	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	4618      	mov	r0, r3
 800427e:	f7fb ff71 	bl	8000164 <strlen>
 8004282:	4603      	mov	r3, r0
 8004284:	b29a      	uxth	r2, r3
 8004286:	f107 010c 	add.w	r1, r7, #12
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	4835      	ldr	r0, [pc, #212]	@ (8004364 <command+0x1ce4>)
 8004290:	f005 ffca 	bl	800a228 <HAL_UART_Transmit>
	        memset(rxBuffer, 0, sizeof(rxBuffer));
 8004294:	2280      	movs	r2, #128	@ 0x80
 8004296:	2100      	movs	r1, #0
 8004298:	4834      	ldr	r0, [pc, #208]	@ (800436c <command+0x1cec>)
 800429a:	f007 fd89 	bl	800bdb0 <memset>
	        process_uart = false;
 800429e:	4b34      	ldr	r3, [pc, #208]	@ (8004370 <command+0x1cf0>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e0d0      	b.n	8004448 <command+0x1dc8>
	        return;
	    }

	    if (token3 == NULL)
 80042a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <command+0x1c6a>
	    {
	        char msg[] = "Lutfen servo acisi giriniz (-90 ile 90 arasi)\r\n";
 80042ae:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80042b2:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80042b6:	4a37      	ldr	r2, [pc, #220]	@ (8004394 <command+0x1d14>)
 80042b8:	461c      	mov	r4, r3
 80042ba:	4615      	mov	r5, r2
 80042bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fb ff47 	bl	8000164 <strlen>
 80042d6:	4603      	mov	r3, r0
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f107 010c 	add.w	r1, r7, #12
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	4820      	ldr	r0, [pc, #128]	@ (8004364 <command+0x1ce4>)
 80042e4:	f005 ffa0 	bl	800a228 <HAL_UART_Transmit>
 80042e8:	e0ae      	b.n	8004448 <command+0x1dc8>
	        return;
	    }

	    int angle = atoi(token3);
 80042ea:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80042ee:	f006 fdb5 	bl	800ae5c <atoi>
 80042f2:	f8c7 02ec 	str.w	r0, [r7, #748]	@ 0x2ec
	    if (angle < -90 || angle > 90)
 80042f6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80042fa:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 80042fe:	db03      	blt.n	8004308 <command+0x1c88>
 8004300:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8004304:	2b5a      	cmp	r3, #90	@ 0x5a
 8004306:	dd49      	ble.n	800439c <command+0x1d1c>
	    {
	        char msg[] = "Servo acisi -90 ile 90 arasinda olmalidir\r\n";
 8004308:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800430c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8004310:	4a21      	ldr	r2, [pc, #132]	@ (8004398 <command+0x1d18>)
 8004312:	461c      	mov	r4, r3
 8004314:	4615      	mov	r5, r2
 8004316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800431a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800431c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800431e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	4618      	mov	r0, r3
 800432c:	f7fb ff1a 	bl	8000164 <strlen>
 8004330:	4603      	mov	r3, r0
 8004332:	b29a      	uxth	r2, r3
 8004334:	f107 010c 	add.w	r1, r7, #12
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	4809      	ldr	r0, [pc, #36]	@ (8004364 <command+0x1ce4>)
 800433e:	f005 ff73 	bl	800a228 <HAL_UART_Transmit>
 8004342:	e081      	b.n	8004448 <command+0x1dc8>
 8004344:	0800ede8 	.word	0x0800ede8
 8004348:	200006d8 	.word	0x200006d8
 800434c:	200006da 	.word	0x200006da
 8004350:	200006dc 	.word	0x200006dc
 8004354:	200006e0 	.word	0x200006e0
 8004358:	200006e4 	.word	0x200006e4
 800435c:	200006e8 	.word	0x200006e8
 8004360:	0800efdc 	.word	0x0800efdc
 8004364:	200005f8 	.word	0x200005f8
 8004368:	0800f430 	.word	0x0800f430
 800436c:	20000654 	.word	0x20000654
 8004370:	200006d6 	.word	0x200006d6
 8004374:	0800f048 	.word	0x0800f048
 8004378:	0800f46c 	.word	0x0800f46c
 800437c:	0800f04c 	.word	0x0800f04c
 8004380:	0800f494 	.word	0x0800f494
 8004384:	0800f4b4 	.word	0x0800f4b4
 8004388:	0800eec8 	.word	0x0800eec8
 800438c:	0800ed00 	.word	0x0800ed00
 8004390:	0800f4f0 	.word	0x0800f4f0
 8004394:	0800f520 	.word	0x0800f520
 8004398:	0800f550 	.word	0x0800f550
	        return;
	    }

	    // Açıyı servoSetAngle ile ayarla
	    servoSetAngle(&htim2, TIM_CHANNEL_2, angle);
 800439c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80043a0:	2104      	movs	r1, #4
 80043a2:	482c      	ldr	r0, [pc, #176]	@ (8004454 <command+0x1dd4>)
 80043a4:	f000 f866 	bl	8004474 <servoSetAngle>

	    char msg[50];
	    int len = sprintf(msg, "Servo acisi ayarlandi: %d derece\r\n", angle);
 80043a8:	f107 030c 	add.w	r3, r7, #12
 80043ac:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80043b0:	4929      	ldr	r1, [pc, #164]	@ (8004458 <command+0x1dd8>)
 80043b2:	4618      	mov	r0, r3
 80043b4:	f007 fc02 	bl	800bbbc <siprintf>
 80043b8:	f8c7 02e8 	str.w	r0, [r7, #744]	@ 0x2e8
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80043bc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	f107 010c 	add.w	r1, r7, #12
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	4824      	ldr	r0, [pc, #144]	@ (800445c <command+0x1ddc>)
 80043cc:	f005 ff2c 	bl	800a228 <HAL_UART_Transmit>
 80043d0:	e030      	b.n	8004434 <command+0x1db4>
	}
	else if(strcmp(token1, "HELP")== 0){
 80043d2:	4923      	ldr	r1, [pc, #140]	@ (8004460 <command+0x1de0>)
 80043d4:	f8d7 0358 	ldr.w	r0, [r7, #856]	@ 0x358
 80043d8:	f7fb feba 	bl	8000150 <strcmp>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <command+0x1d7a>
		HAL_UART_Transmit(&huart1, (uint8_t*)exampleCommands, strlen(exampleCommands), HAL_MAX_DELAY);
 80043e2:	4820      	ldr	r0, [pc, #128]	@ (8004464 <command+0x1de4>)
 80043e4:	f7fb febe 	bl	8000164 <strlen>
 80043e8:	4603      	mov	r3, r0
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	491c      	ldr	r1, [pc, #112]	@ (8004464 <command+0x1de4>)
 80043f2:	481a      	ldr	r0, [pc, #104]	@ (800445c <command+0x1ddc>)
 80043f4:	f005 ff18 	bl	800a228 <HAL_UART_Transmit>
 80043f8:	e01c      	b.n	8004434 <command+0x1db4>
	}

		    else
		    {
		        char msg[] = "Bilinmeyen komut girdiniz.\r\n";
 80043fa:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80043fe:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8004402:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <command+0x1de8>)
 8004404:	461c      	mov	r4, r3
 8004406:	4615      	mov	r5, r2
 8004408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800440a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800440c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004410:	c407      	stmia	r4!, {r0, r1, r2}
 8004412:	7023      	strb	r3, [r4, #0]
		        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004414:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004418:	4618      	mov	r0, r3
 800441a:	f7fb fea3 	bl	8000164 <strlen>
 800441e:	4603      	mov	r3, r0
 8004420:	b29a      	uxth	r2, r3
 8004422:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	480c      	ldr	r0, [pc, #48]	@ (800445c <command+0x1ddc>)
 800442c:	f005 fefc 	bl	800a228 <HAL_UART_Transmit>
 8004430:	e000      	b.n	8004434 <command+0x1db4>
	    if(token3 && strcmp(token3, "FREQ") == 0 && token4) {
 8004432:	bf00      	nop
		    }
	memset(rxBuffer,0,sizeof(rxBuffer));
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	2100      	movs	r1, #0
 8004438:	480c      	ldr	r0, [pc, #48]	@ (800446c <command+0x1dec>)
 800443a:	f007 fcb9 	bl	800bdb0 <memset>
	process_uart = false;
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <command+0x1df0>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e000      	b.n	8004448 <command+0x1dc8>
	if (token1 == NULL) return;
 8004446:	bf00      	nop

}
 8004448:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	20000568 	.word	0x20000568
 8004458:	0800f054 	.word	0x0800f054
 800445c:	200005f8 	.word	0x200005f8
 8004460:	0800f078 	.word	0x0800f078
 8004464:	20000004 	.word	0x20000004
 8004468:	0800f57c 	.word	0x0800f57c
 800446c:	20000654 	.word	0x20000654
 8004470:	200006d6 	.word	0x200006d6

08004474 <servoSetAngle>:
		        char msg[50];
		        int len = sprintf(msg, "PWM duty yuzde olarak ayarlandi: %d%%\r\n", pwmValue);
		        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
		    }
		    */
void servoSetAngle(TIM_HandleTypeDef *htim, uint32_t channel, int angle) {
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	@ 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
	if(angle < -90) angle = -90;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8004486:	da02      	bge.n	800448e <servoSetAngle+0x1a>
 8004488:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 800448c:	607b      	str	r3, [r7, #4]
	if(angle > 90) angle = 90; // max ve min degerde kalsın
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b5a      	cmp	r3, #90	@ 0x5a
 8004492:	dd01      	ble.n	8004498 <servoSetAngle+0x24>
 8004494:	235a      	movs	r3, #90	@ 0x5a
 8004496:	607b      	str	r3, [r7, #4]

	int shift_angle = angle + 90;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	335a      	adds	r3, #90	@ 0x5a
 800449c:	61bb      	str	r3, [r7, #24]
	uint32_t pulse_width_us = 500 + ((uint32_t)shift_angle * 2000) / 180; // us cinsinden ayar -90 shifted ile 0 oluyor. 500 us OLUYOR o da.
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <servoSetAngle+0xa0>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80044b6:	617b      	str	r3, [r7, #20]
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	613b      	str	r3, [r7, #16]
	uint32_t ccr_value = pulse_width_us;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	61fb      	str	r3, [r7, #28]
	if(ccr_value > arr) ccr_value = arr;
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d901      	bls.n	80044d0 <servoSetAngle+0x5c>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	61fb      	str	r3, [r7, #28]
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <servoSetAngle+0x6c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80044de:	e013      	b.n	8004508 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d104      	bne.n	80044f0 <servoSetAngle+0x7c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80044ee:	e00b      	b.n	8004508 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d104      	bne.n	8004500 <servoSetAngle+0x8c>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80044fe:	e003      	b.n	8004508 <servoSetAngle+0x94>
	 __HAL_TIM_SET_COMPARE(htim, channel, ccr_value);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004508:	bf00      	nop
 800450a:	3724      	adds	r7, #36	@ 0x24
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	16c16c17 	.word	0x16c16c17

08004518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800451c:	b672      	cpsid	i
}
 800451e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <Error_Handler+0x8>

08004524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_MspInit+0x5c>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <HAL_MspInit+0x5c>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6193      	str	r3, [r2, #24]
 8004536:	4b12      	ldr	r3, [pc, #72]	@ (8004580 <HAL_MspInit+0x5c>)
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <HAL_MspInit+0x5c>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4a0e      	ldr	r2, [pc, #56]	@ (8004580 <HAL_MspInit+0x5c>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454c:	61d3      	str	r3, [r2, #28]
 800454e:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <HAL_MspInit+0x5c>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800455a:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <HAL_MspInit+0x60>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	4a04      	ldr	r2, [pc, #16]	@ (8004584 <HAL_MspInit+0x60>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40021000 	.word	0x40021000
 8004584:	40010000 	.word	0x40010000

08004588 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a28      	ldr	r2, [pc, #160]	@ (8004644 <HAL_ADC_MspInit+0xbc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d149      	bne.n	800463c <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4a26      	ldr	r2, [pc, #152]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b2:	6193      	str	r3, [r2, #24]
 80045b4:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c0:	4b21      	ldr	r3, [pc, #132]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a20      	ldr	r2, [pc, #128]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <HAL_ADC_MspInit+0xc0>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80045d8:	233c      	movs	r3, #60	@ 0x3c
 80045da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045dc:	2303      	movs	r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e0:	f107 0310 	add.w	r3, r7, #16
 80045e4:	4619      	mov	r1, r3
 80045e6:	4819      	ldr	r0, [pc, #100]	@ (800464c <HAL_ADC_MspInit+0xc4>)
 80045e8:	f002 fa04 	bl	80069f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80045ec:	4b18      	ldr	r3, [pc, #96]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 80045ee:	4a19      	ldr	r2, [pc, #100]	@ (8004654 <HAL_ADC_MspInit+0xcc>)
 80045f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f2:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f8:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045fe:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800460a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800460c:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 800460e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004612:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004616:	2200      	movs	r2, #0
 8004618:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 800461c:	2200      	movs	r2, #0
 800461e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004620:	480b      	ldr	r0, [pc, #44]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004622:	f001 fd45 	bl	80060b0 <HAL_DMA_Init>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800462c:	f7ff ff74 	bl	8004518 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a07      	ldr	r2, [pc, #28]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004634:	621a      	str	r2, [r3, #32]
 8004636:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <HAL_ADC_MspInit+0xc8>)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800463c:	bf00      	nop
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40012400 	.word	0x40012400
 8004648:	40021000 	.word	0x40021000
 800464c:	40010800 	.word	0x40010800
 8004650:	2000047c 	.word	0x2000047c
 8004654:	40020008 	.word	0x40020008

08004658 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <HAL_I2C_MspInit+0x70>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d123      	bne.n	80046c0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004678:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 800467e:	f043 0308 	orr.w	r3, r3, #8
 8004682:	6193      	str	r3, [r2, #24]
 8004684:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004690:	23c0      	movs	r3, #192	@ 0xc0
 8004692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004694:	2312      	movs	r3, #18
 8004696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	4619      	mov	r1, r3
 80046a2:	480b      	ldr	r0, [pc, #44]	@ (80046d0 <HAL_I2C_MspInit+0x78>)
 80046a4:	f002 f9a6 	bl	80069f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046a8:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4a07      	ldr	r2, [pc, #28]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 80046ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046b2:	61d3      	str	r3, [r2, #28]
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_I2C_MspInit+0x74>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80046c0:	bf00      	nop
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40005400 	.word	0x40005400
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40010c00 	.word	0x40010c00

080046d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a09      	ldr	r2, [pc, #36]	@ (8004708 <HAL_TIM_Base_MspInit+0x34>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10b      	bne.n	80046fe <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <HAL_TIM_Base_MspInit+0x38>)
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	4a08      	ldr	r2, [pc, #32]	@ (800470c <HAL_TIM_Base_MspInit+0x38>)
 80046ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046f0:	6193      	str	r3, [r2, #24]
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_TIM_Base_MspInit+0x38>)
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40021000 	.word	0x40021000

08004710 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 0318 	add.w	r3, r7, #24
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472e:	d10c      	bne.n	800474a <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004730:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4a2b      	ldr	r2, [pc, #172]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	61d3      	str	r3, [r2, #28]
 800473c:	4b29      	ldr	r3, [pc, #164]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004748:	e048      	b.n	80047dc <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a26      	ldr	r2, [pc, #152]	@ (80047e8 <HAL_TIM_PWM_MspInit+0xd8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d143      	bne.n	80047dc <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004754:	4b23      	ldr	r3, [pc, #140]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4a22      	ldr	r2, [pc, #136]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	61d3      	str	r3, [r2, #28]
 8004760:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6193      	str	r3, [r2, #24]
 8004778:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004784:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 800478a:	f043 0308 	orr.w	r3, r3, #8
 800478e:	6193      	str	r3, [r2, #24]
 8004790:	4b14      	ldr	r3, [pc, #80]	@ (80047e4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a8:	f107 0318 	add.w	r3, r7, #24
 80047ac:	4619      	mov	r1, r3
 80047ae:	480f      	ldr	r0, [pc, #60]	@ (80047ec <HAL_TIM_PWM_MspInit+0xdc>)
 80047b0:	f002 f920 	bl	80069f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047b4:	2301      	movs	r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	4619      	mov	r1, r3
 80047c6:	480a      	ldr	r0, [pc, #40]	@ (80047f0 <HAL_TIM_PWM_MspInit+0xe0>)
 80047c8:	f002 f914 	bl	80069f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2100      	movs	r1, #0
 80047d0:	201d      	movs	r0, #29
 80047d2:	f001 fc36 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047d6:	201d      	movs	r0, #29
 80047d8:	f001 fc4f 	bl	800607a <HAL_NVIC_EnableIRQ>
}
 80047dc:	bf00      	nop
 80047de:	3728      	adds	r7, #40	@ 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40010800 	.word	0x40010800
 80047f0:	40010c00 	.word	0x40010c00

080047f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004812:	d118      	bne.n	8004846 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004814:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800482c:	2302      	movs	r3, #2
 800482e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004830:	2302      	movs	r3, #2
 8004832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004834:	2302      	movs	r3, #2
 8004836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	4619      	mov	r1, r3
 800483e:	4813      	ldr	r0, [pc, #76]	@ (800488c <HAL_TIM_MspPostInit+0x98>)
 8004840:	f002 f8d8 	bl	80069f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004844:	e01c      	b.n	8004880 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a11      	ldr	r2, [pc, #68]	@ (8004890 <HAL_TIM_MspPostInit+0x9c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d117      	bne.n	8004880 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004850:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4a0c      	ldr	r2, [pc, #48]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 8004856:	f043 0304 	orr.w	r3, r3, #4
 800485a:	6193      	str	r3, [r2, #24]
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <HAL_TIM_MspPostInit+0x94>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004868:	2340      	movs	r3, #64	@ 0x40
 800486a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004870:	2302      	movs	r3, #2
 8004872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004874:	f107 0310 	add.w	r3, r7, #16
 8004878:	4619      	mov	r1, r3
 800487a:	4804      	ldr	r0, [pc, #16]	@ (800488c <HAL_TIM_MspPostInit+0x98>)
 800487c:	f002 f8ba 	bl	80069f4 <HAL_GPIO_Init>
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	40010800 	.word	0x40010800
 8004890:	40000400 	.word	0x40000400

08004894 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <HAL_UART_MspInit+0x9c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d139      	bne.n	8004928 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048be:	6193      	str	r3, [r2, #24]
 80048c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	6193      	str	r3, [r2, #24]
 80048d8:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_UART_MspInit+0xa0>)
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048ee:	2303      	movs	r3, #3
 80048f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f2:	f107 0310 	add.w	r3, r7, #16
 80048f6:	4619      	mov	r1, r3
 80048f8:	480f      	ldr	r0, [pc, #60]	@ (8004938 <HAL_UART_MspInit+0xa4>)
 80048fa:	f002 f87b 	bl	80069f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	f107 0310 	add.w	r3, r7, #16
 8004910:	4619      	mov	r1, r3
 8004912:	4809      	ldr	r0, [pc, #36]	@ (8004938 <HAL_UART_MspInit+0xa4>)
 8004914:	f002 f86e 	bl	80069f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004918:	2200      	movs	r2, #0
 800491a:	2100      	movs	r1, #0
 800491c:	2025      	movs	r0, #37	@ 0x25
 800491e:	f001 fb90 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004922:	2025      	movs	r0, #37	@ 0x25
 8004924:	f001 fba9 	bl	800607a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40013800 	.word	0x40013800
 8004934:	40021000 	.word	0x40021000
 8004938:	40010800 	.word	0x40010800

0800493c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <NMI_Handler+0x4>

08004944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <HardFault_Handler+0x4>

0800494c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <MemManage_Handler+0x4>

08004954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <BusFault_Handler+0x4>

0800495c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <UsageFault_Handler+0x4>

08004964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800498c:	f000 fc74 	bl	8005278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}

08004994 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004998:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <DMA1_Channel1_IRQHandler+0x10>)
 800499a:	f001 fcf7 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000047c 	.word	0x2000047c

080049a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80049ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80049b0:	f002 f9d4 	bl	8006d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049bc:	4802      	ldr	r0, [pc, #8]	@ (80049c8 <TIM3_IRQHandler+0x10>)
 80049be:	f004 fc37 	bl	8009230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200005b0 	.word	0x200005b0

080049cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049d0:	4802      	ldr	r0, [pc, #8]	@ (80049dc <USART1_IRQHandler+0x10>)
 80049d2:	f005 fcd9 	bl	800a388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200005f8 	.word	0x200005f8

080049e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return 1;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <_kill>:

int _kill(int pid, int sig)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049f8:	f007 fa96 	bl	800bf28 <__errno>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2216      	movs	r2, #22
 8004a00:	601a      	str	r2, [r3, #0]
  return -1;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <_exit>:

void _exit (int status)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a16:	f04f 31ff 	mov.w	r1, #4294967295
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ffe7 	bl	80049ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <_exit+0x12>

08004a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e00a      	b.n	8004a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a36:	f3af 8000 	nop.w
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	60ba      	str	r2, [r7, #8]
 8004a42:	b2ca      	uxtb	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dbf0      	blt.n	8004a36 <_read+0x12>
  }

  return len;
 8004a54:	687b      	ldr	r3, [r7, #4]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e009      	b.n	8004a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dbf1      	blt.n	8004a70 <_write+0x12>
  }
  return len;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_close>:

int _close(int file)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004abc:	605a      	str	r2, [r3, #4]
  return 0;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <_isatty>:

int _isatty(int file)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ad2:	2301      	movs	r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
	...

08004af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b00:	4a14      	ldr	r2, [pc, #80]	@ (8004b54 <_sbrk+0x5c>)
 8004b02:	4b15      	ldr	r3, [pc, #84]	@ (8004b58 <_sbrk+0x60>)
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b0c:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <_sbrk+0x64>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b14:	4b11      	ldr	r3, [pc, #68]	@ (8004b5c <_sbrk+0x64>)
 8004b16:	4a12      	ldr	r2, [pc, #72]	@ (8004b60 <_sbrk+0x68>)
 8004b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <_sbrk+0x64>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d207      	bcs.n	8004b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b28:	f007 f9fe 	bl	800bf28 <__errno>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	220c      	movs	r2, #12
 8004b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	e009      	b.n	8004b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b38:	4b08      	ldr	r3, [pc, #32]	@ (8004b5c <_sbrk+0x64>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b3e:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <_sbrk+0x64>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	4a05      	ldr	r2, [pc, #20]	@ (8004b5c <_sbrk+0x64>)
 8004b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20005000 	.word	0x20005000
 8004b58:	00000400 	.word	0x00000400
 8004b5c:	2000071c 	.word	0x2000071c
 8004b60:	20000ca0 	.word	0x20000ca0

08004b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b70:	f7ff fff8 	bl	8004b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b74:	480b      	ldr	r0, [pc, #44]	@ (8004ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004b76:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004b78:	4a0c      	ldr	r2, [pc, #48]	@ (8004bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8004b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b7c:	e002      	b.n	8004b84 <LoopCopyDataInit>

08004b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b82:	3304      	adds	r3, #4

08004b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b88:	d3f9      	bcc.n	8004b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b8a:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004b8c:	4c09      	ldr	r4, [pc, #36]	@ (8004bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b90:	e001      	b.n	8004b96 <LoopFillZerobss>

08004b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b94:	3204      	adds	r2, #4

08004b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b98:	d3fb      	bcc.n	8004b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b9a:	f007 f9cb 	bl	800bf34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b9e:	f7fc fb67 	bl	8001270 <main>
  bx lr
 8004ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8004ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ba8:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8004bac:	08010700 	.word	0x08010700
  ldr r2, =_sbss
 8004bb0:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8004bb4:	20000c9c 	.word	0x20000c9c

08004bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bb8:	e7fe      	b.n	8004bb8 <ADC1_2_IRQHandler>

08004bba <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
	...

08004bc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af04      	add	r7, sp, #16
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	9302      	str	r3, [sp, #8]
 8004bd8:	2301      	movs	r3, #1
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2301      	movs	r3, #1
 8004be2:	2200      	movs	r2, #0
 8004be4:	2178      	movs	r1, #120	@ 0x78
 8004be6:	4803      	ldr	r0, [pc, #12]	@ (8004bf4 <ssd1306_WriteCommand+0x2c>)
 8004be8:	f002 fa14 	bl	8007014 <HAL_I2C_Mem_Write>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200004c0 	.word	0x200004c0

08004bf8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0a:	9202      	str	r2, [sp, #8]
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2301      	movs	r3, #1
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	2178      	movs	r1, #120	@ 0x78
 8004c18:	4803      	ldr	r0, [pc, #12]	@ (8004c28 <ssd1306_WriteData+0x30>)
 8004c1a:	f002 f9fb 	bl	8007014 <HAL_I2C_Mem_Write>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200004c0 	.word	0x200004c0

08004c2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004c30:	f7ff ffc3 	bl	8004bba <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004c34:	2064      	movs	r0, #100	@ 0x64
 8004c36:	f000 fb3b 	bl	80052b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f000 fab8 	bl	80051b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004c40:	2020      	movs	r0, #32
 8004c42:	f7ff ffc1 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7ff ffbe 	bl	8004bc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004c4c:	20b0      	movs	r0, #176	@ 0xb0
 8004c4e:	f7ff ffbb 	bl	8004bc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004c52:	20c8      	movs	r0, #200	@ 0xc8
 8004c54:	f7ff ffb8 	bl	8004bc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7ff ffb5 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004c5e:	2010      	movs	r0, #16
 8004c60:	f7ff ffb2 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004c64:	2040      	movs	r0, #64	@ 0x40
 8004c66:	f7ff ffaf 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004c6a:	20ff      	movs	r0, #255	@ 0xff
 8004c6c:	f000 fa8c 	bl	8005188 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004c70:	20a1      	movs	r0, #161	@ 0xa1
 8004c72:	f7ff ffa9 	bl	8004bc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004c76:	20a6      	movs	r0, #166	@ 0xa6
 8004c78:	f7ff ffa6 	bl	8004bc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c7c:	20a8      	movs	r0, #168	@ 0xa8
 8004c7e:	f7ff ffa3 	bl	8004bc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004c82:	203f      	movs	r0, #63	@ 0x3f
 8004c84:	f7ff ffa0 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004c88:	20a4      	movs	r0, #164	@ 0xa4
 8004c8a:	f7ff ff9d 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004c8e:	20d3      	movs	r0, #211	@ 0xd3
 8004c90:	f7ff ff9a 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7ff ff97 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004c9a:	20d5      	movs	r0, #213	@ 0xd5
 8004c9c:	f7ff ff94 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004ca0:	20f0      	movs	r0, #240	@ 0xf0
 8004ca2:	f7ff ff91 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004ca6:	20d9      	movs	r0, #217	@ 0xd9
 8004ca8:	f7ff ff8e 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004cac:	2022      	movs	r0, #34	@ 0x22
 8004cae:	f7ff ff8b 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004cb2:	20da      	movs	r0, #218	@ 0xda
 8004cb4:	f7ff ff88 	bl	8004bc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004cb8:	2012      	movs	r0, #18
 8004cba:	f7ff ff85 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004cbe:	20db      	movs	r0, #219	@ 0xdb
 8004cc0:	f7ff ff82 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004cc4:	2020      	movs	r0, #32
 8004cc6:	f7ff ff7f 	bl	8004bc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004cca:	208d      	movs	r0, #141	@ 0x8d
 8004ccc:	f7ff ff7c 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004cd0:	2014      	movs	r0, #20
 8004cd2:	f7ff ff79 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f000 fa6a 	bl	80051b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f000 f80f 	bl	8004d00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004ce2:	f000 f825 	bl	8004d30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004ce6:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <ssd1306_Init+0xd0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004cec:	4b03      	ldr	r3, [pc, #12]	@ (8004cfc <ssd1306_Init+0xd0>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004cf2:	4b02      	ldr	r3, [pc, #8]	@ (8004cfc <ssd1306_Init+0xd0>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	711a      	strb	r2, [r3, #4]
}
 8004cf8:	bf00      	nop
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000b20 	.word	0x20000b20

08004d00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <ssd1306_Fill+0x14>
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <ssd1306_Fill+0x16>
 8004d14:	23ff      	movs	r3, #255	@ 0xff
 8004d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4803      	ldr	r0, [pc, #12]	@ (8004d2c <ssd1306_Fill+0x2c>)
 8004d1e:	f007 f847 	bl	800bdb0 <memset>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000720 	.word	0x20000720

08004d30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004d36:	2300      	movs	r3, #0
 8004d38:	71fb      	strb	r3, [r7, #7]
 8004d3a:	e016      	b.n	8004d6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	3b50      	subs	r3, #80	@ 0x50
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff40 	bl	8004bc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f7ff ff3d 	bl	8004bc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004d4e:	2010      	movs	r0, #16
 8004d50:	f7ff ff3a 	bl	8004bc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	4a08      	ldr	r2, [pc, #32]	@ (8004d7c <ssd1306_UpdateScreen+0x4c>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2180      	movs	r1, #128	@ 0x80
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff4a 	bl	8004bf8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	3301      	adds	r3, #1
 8004d68:	71fb      	strb	r3, [r7, #7]
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d9e5      	bls.n	8004d3c <ssd1306_UpdateScreen+0xc>
    }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000720 	.word	0x20000720

08004d80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	71bb      	strb	r3, [r7, #6]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db3d      	blt.n	8004e16 <ssd1306_DrawPixel+0x96>
 8004d9a:	79bb      	ldrb	r3, [r7, #6]
 8004d9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d9e:	d83a      	bhi.n	8004e16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004da0:	797b      	ldrb	r3, [r7, #5]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d11a      	bne.n	8004ddc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004da6:	79fa      	ldrb	r2, [r7, #7]
 8004da8:	79bb      	ldrb	r3, [r7, #6]
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	b2d8      	uxtb	r0, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	01db      	lsls	r3, r3, #7
 8004db2:	4413      	add	r3, r2
 8004db4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e20 <ssd1306_DrawPixel+0xa0>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	79bb      	ldrb	r3, [r7, #6]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b259      	sxtb	r1, r3
 8004dcc:	79fa      	ldrb	r2, [r7, #7]
 8004dce:	4603      	mov	r3, r0
 8004dd0:	01db      	lsls	r3, r3, #7
 8004dd2:	4413      	add	r3, r2
 8004dd4:	b2c9      	uxtb	r1, r1
 8004dd6:	4a12      	ldr	r2, [pc, #72]	@ (8004e20 <ssd1306_DrawPixel+0xa0>)
 8004dd8:	54d1      	strb	r1, [r2, r3]
 8004dda:	e01d      	b.n	8004e18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	79bb      	ldrb	r3, [r7, #6]
 8004de0:	08db      	lsrs	r3, r3, #3
 8004de2:	b2d8      	uxtb	r0, r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	01db      	lsls	r3, r3, #7
 8004de8:	4413      	add	r3, r2
 8004dea:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <ssd1306_DrawPixel+0xa0>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	b25a      	sxtb	r2, r3
 8004df0:	79bb      	ldrb	r3, [r7, #6]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	4013      	ands	r3, r2
 8004e04:	b259      	sxtb	r1, r3
 8004e06:	79fa      	ldrb	r2, [r7, #7]
 8004e08:	4603      	mov	r3, r0
 8004e0a:	01db      	lsls	r3, r3, #7
 8004e0c:	4413      	add	r3, r2
 8004e0e:	b2c9      	uxtb	r1, r1
 8004e10:	4a03      	ldr	r2, [pc, #12]	@ (8004e20 <ssd1306_DrawPixel+0xa0>)
 8004e12:	54d1      	strb	r1, [r2, r3]
 8004e14:	e000      	b.n	8004e18 <ssd1306_DrawPixel+0x98>
        return;
 8004e16:	bf00      	nop
    }
}
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr
 8004e20:	20000720 	.word	0x20000720

08004e24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004e32:	4623      	mov	r3, r4
 8004e34:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b1f      	cmp	r3, #31
 8004e3a:	d902      	bls.n	8004e42 <ssd1306_WriteChar+0x1e>
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e40:	d901      	bls.n	8004e46 <ssd1306_WriteChar+0x22>
        return 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e079      	b.n	8004f3a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <ssd1306_WriteChar+0x34>
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	3b20      	subs	r3, #32
 8004e52:	4413      	add	r3, r2
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	e000      	b.n	8004e5a <ssd1306_WriteChar+0x36>
 8004e58:	783b      	ldrb	r3, [r7, #0]
 8004e5a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004e5c:	4b39      	ldr	r3, [pc, #228]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	4413      	add	r3, r2
 8004e66:	2b80      	cmp	r3, #128	@ 0x80
 8004e68:	dc06      	bgt.n	8004e78 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004e6a:	4b36      	ldr	r3, [pc, #216]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004e6c:	885b      	ldrh	r3, [r3, #2]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	787b      	ldrb	r3, [r7, #1]
 8004e72:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	dd01      	ble.n	8004e7c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e05e      	b.n	8004f3a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e04d      	b.n	8004f1e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	3b20      	subs	r3, #32
 8004e88:	7879      	ldrb	r1, [r7, #1]
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	440b      	add	r3, r1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e036      	b.n	8004f10 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d013      	beq.n	8004eda <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	b2d8      	uxtb	r0, r3
 8004ec0:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004ec2:	885b      	ldrh	r3, [r3, #2]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f7ff ff54 	bl	8004d80 <ssd1306_DrawPixel>
 8004ed8:	e017      	b.n	8004f0a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004eda:	4b1a      	ldr	r3, [pc, #104]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b2d8      	uxtb	r0, r3
 8004ee8:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004eea:	885b      	ldrh	r3, [r3, #2]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	b2d9      	uxtb	r1, r3
 8004ef6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	f7ff ff3b 	bl	8004d80 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d3c4      	bcc.n	8004ea2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	461a      	mov	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d3ac      	bcc.n	8004e82 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	4b03      	ldr	r3, [pc, #12]	@ (8004f44 <ssd1306_WriteChar+0x120>)
 8004f36:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	@ 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000b20 	.word	0x20000b20

08004f48 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4638      	mov	r0, r7
 8004f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004f56:	e013      	b.n	8004f80 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	7818      	ldrb	r0, [r3, #0]
 8004f5c:	7e3b      	ldrb	r3, [r7, #24]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	463b      	mov	r3, r7
 8004f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f64:	f7ff ff5e 	bl	8004e24 <ssd1306_WriteChar>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d002      	beq.n	8004f7a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	e008      	b.n	8004f8c <ssd1306_WriteString+0x44>
        }
        str++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e7      	bne.n	8004f58 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	71fb      	strb	r3, [r7, #7]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <ssd1306_SetCursor+0x2c>)
 8004faa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004fac:	79bb      	ldrb	r3, [r7, #6]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	4b03      	ldr	r3, [pc, #12]	@ (8004fc0 <ssd1306_SetCursor+0x2c>)
 8004fb2:	805a      	strh	r2, [r3, #2]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000b20 	.word	0x20000b20

08004fc4 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	71fb      	strb	r3, [r7, #7]
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71bb      	strb	r3, [r7, #6]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	717b      	strb	r3, [r7, #5]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004fe2:	797b      	ldrb	r3, [r7, #5]
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8004fec:	797b      	ldrb	r3, [r7, #5]
 8004fee:	f1c3 0301 	rsb	r3, r3, #1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db65      	blt.n	80050ca <ssd1306_DrawCircle+0x106>
 8004ffe:	79bb      	ldrb	r3, [r7, #6]
 8005000:	2b3f      	cmp	r3, #63	@ 0x3f
 8005002:	d862      	bhi.n	80050ca <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	79fa      	ldrb	r2, [r7, #7]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b2d8      	uxtb	r0, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	79bb      	ldrb	r3, [r7, #6]
 8005014:	4413      	add	r3, r2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	793a      	ldrb	r2, [r7, #4]
 800501a:	4619      	mov	r1, r3
 800501c:	f7ff feb0 	bl	8004d80 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	4413      	add	r3, r2
 8005028:	b2d8      	uxtb	r0, r3
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	79bb      	ldrb	r3, [r7, #6]
 8005030:	4413      	add	r3, r2
 8005032:	b2db      	uxtb	r3, r3
 8005034:	793a      	ldrb	r2, [r7, #4]
 8005036:	4619      	mov	r1, r3
 8005038:	f7ff fea2 	bl	8004d80 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	4413      	add	r3, r2
 8005044:	b2d8      	uxtb	r0, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	79ba      	ldrb	r2, [r7, #6]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	793a      	ldrb	r2, [r7, #4]
 8005052:	4619      	mov	r1, r3
 8005054:	f7ff fe94 	bl	8004d80 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	79fa      	ldrb	r2, [r7, #7]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	b2d8      	uxtb	r0, r3
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	79ba      	ldrb	r2, [r7, #6]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	b2db      	uxtb	r3, r3
 800506c:	793a      	ldrb	r2, [r7, #4]
 800506e:	4619      	mov	r1, r3
 8005070:	f7ff fe86 	bl	8004d80 <ssd1306_DrawPixel>
        e2 = err;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	dc13      	bgt.n	80050a8 <ssd1306_DrawCircle+0xe4>
            y++;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3301      	adds	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	3301      	adds	r3, #1
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	425b      	negs	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	d105      	bne.n	80050a8 <ssd1306_DrawCircle+0xe4>
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	dc01      	bgt.n	80050a8 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	dd08      	ble.n	80050c2 <ssd1306_DrawCircle+0xfe>
            x++;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	3301      	adds	r3, #1
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dd9d      	ble.n	8005004 <ssd1306_DrawCircle+0x40>

    return;
 80050c8:	e000      	b.n	80050cc <ssd1306_DrawCircle+0x108>
        return;
 80050ca:	bf00      	nop
}
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}

080050d2 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	603a      	str	r2, [r7, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	4603      	mov	r3, r0
 80050de:	71fb      	strb	r3, [r7, #7]
 80050e0:	460b      	mov	r3, r1
 80050e2:	71bb      	strb	r3, [r7, #6]
 80050e4:	4613      	mov	r3, r2
 80050e6:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80050e8:	797b      	ldrb	r3, [r7, #5]
 80050ea:	3307      	adds	r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da00      	bge.n	80050f2 <ssd1306_DrawBitmap+0x20>
 80050f0:	3307      	adds	r3, #7
 80050f2:	10db      	asrs	r3, r3, #3
 80050f4:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	db3e      	blt.n	8005180 <ssd1306_DrawBitmap+0xae>
 8005102:	79bb      	ldrb	r3, [r7, #6]
 8005104:	2b3f      	cmp	r3, #63	@ 0x3f
 8005106:	d83b      	bhi.n	8005180 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8005108:	2300      	movs	r3, #0
 800510a:	73bb      	strb	r3, [r7, #14]
 800510c:	e033      	b.n	8005176 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800510e:	2300      	movs	r3, #0
 8005110:	737b      	strb	r3, [r7, #13]
 8005112:	e026      	b.n	8005162 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8005114:	7b7b      	ldrb	r3, [r7, #13]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	e00d      	b.n	8005142 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8005126:	7bbb      	ldrb	r3, [r7, #14]
 8005128:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	7b7a      	ldrb	r2, [r7, #13]
 8005132:	08d2      	lsrs	r2, r2, #3
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	4413      	add	r3, r2
 8005138:	461a      	mov	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8005142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da08      	bge.n	800515c <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800514a:	79fa      	ldrb	r2, [r7, #7]
 800514c:	7b7b      	ldrb	r3, [r7, #13]
 800514e:	4413      	add	r3, r2
 8005150:	b2db      	uxtb	r3, r3
 8005152:	7f3a      	ldrb	r2, [r7, #28]
 8005154:	79b9      	ldrb	r1, [r7, #6]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fe12 	bl	8004d80 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800515c:	7b7b      	ldrb	r3, [r7, #13]
 800515e:	3301      	adds	r3, #1
 8005160:	737b      	strb	r3, [r7, #13]
 8005162:	7b7a      	ldrb	r2, [r7, #13]
 8005164:	797b      	ldrb	r3, [r7, #5]
 8005166:	429a      	cmp	r2, r3
 8005168:	d3d4      	bcc.n	8005114 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	3301      	adds	r3, #1
 800516e:	73bb      	strb	r3, [r7, #14]
 8005170:	79bb      	ldrb	r3, [r7, #6]
 8005172:	3301      	adds	r3, #1
 8005174:	71bb      	strb	r3, [r7, #6]
 8005176:	7bba      	ldrb	r2, [r7, #14]
 8005178:	7e3b      	ldrb	r3, [r7, #24]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3c7      	bcc.n	800510e <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800517e:	e000      	b.n	8005182 <ssd1306_DrawBitmap+0xb0>
        return;
 8005180:	bf00      	nop
}
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005192:	2381      	movs	r3, #129	@ 0x81
 8005194:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fd15 	bl	8004bc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fd11 	bl	8004bc8 <ssd1306_WriteCommand>
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80051c0:	23af      	movs	r3, #175	@ 0xaf
 80051c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80051c4:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <ssd1306_SetDisplayOn+0x38>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	715a      	strb	r2, [r3, #5]
 80051ca:	e004      	b.n	80051d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80051cc:	23ae      	movs	r3, #174	@ 0xae
 80051ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <ssd1306_SetDisplayOn+0x38>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fcf5 	bl	8004bc8 <ssd1306_WriteCommand>
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000b20 	.word	0x20000b20

080051ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051f0:	4b08      	ldr	r3, [pc, #32]	@ (8005214 <HAL_Init+0x28>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a07      	ldr	r2, [pc, #28]	@ (8005214 <HAL_Init+0x28>)
 80051f6:	f043 0310 	orr.w	r3, r3, #16
 80051fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051fc:	2003      	movs	r0, #3
 80051fe:	f000 ff15 	bl	800602c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005202:	200f      	movs	r0, #15
 8005204:	f000 f808 	bl	8005218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005208:	f7ff f98c 	bl	8004524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40022000 	.word	0x40022000

08005218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005220:	4b12      	ldr	r3, [pc, #72]	@ (800526c <HAL_InitTick+0x54>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <HAL_InitTick+0x58>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800522e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff2d 	bl	8006096 <HAL_SYSTICK_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00e      	b.n	8005264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d80a      	bhi.n	8005262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800524c:	2200      	movs	r2, #0
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	f000 fef5 	bl	8006042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005258:	4a06      	ldr	r2, [pc, #24]	@ (8005274 <HAL_InitTick+0x5c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	2000025c 	.word	0x2000025c
 8005270:	20000264 	.word	0x20000264
 8005274:	20000260 	.word	0x20000260

08005278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_IncTick+0x1c>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_IncTick+0x20>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4a03      	ldr	r2, [pc, #12]	@ (8005298 <HAL_IncTick+0x20>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000264 	.word	0x20000264
 8005298:	20000b28 	.word	0x20000b28

0800529c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return uwTick;
 80052a0:	4b02      	ldr	r3, [pc, #8]	@ (80052ac <HAL_GetTick+0x10>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	20000b28 	.word	0x20000b28

080052b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052b8:	f7ff fff0 	bl	800529c <HAL_GetTick>
 80052bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d005      	beq.n	80052d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ca:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <HAL_Delay+0x44>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052d6:	bf00      	nop
 80052d8:	f7ff ffe0 	bl	800529c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d8f7      	bhi.n	80052d8 <HAL_Delay+0x28>
  {
  }
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000264 	.word	0x20000264

080052f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0be      	b.n	8005498 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff f926 	bl	8004588 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fd01 	bl	8005d44 <ADC_ConversionStop_Disable>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8099 	bne.w	8005486 <HAL_ADC_Init+0x18e>
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8095 	bne.w	8005486 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005364:	f023 0302 	bic.w	r3, r3, #2
 8005368:	f043 0202 	orr.w	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005378:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7b1b      	ldrb	r3, [r3, #12]
 800537e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005380:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005390:	d003      	beq.n	800539a <HAL_ADC_Init+0xa2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d102      	bne.n	80053a0 <HAL_ADC_Init+0xa8>
 800539a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800539e:	e000      	b.n	80053a2 <HAL_ADC_Init+0xaa>
 80053a0:	2300      	movs	r3, #0
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7d1b      	ldrb	r3, [r3, #20]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d119      	bne.n	80053e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7b1b      	ldrb	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	3b01      	subs	r3, #1
 80053be:	035a      	lsls	r2, r3, #13
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e00b      	b.n	80053e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <HAL_ADC_Init+0x1a8>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	430b      	orrs	r3, r1
 800540a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005414:	d003      	beq.n	800541e <HAL_ADC_Init+0x126>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d104      	bne.n	8005428 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	3b01      	subs	r3, #1
 8005424:	051b      	lsls	r3, r3, #20
 8005426:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	430a      	orrs	r2, r1
 800543a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	4b18      	ldr	r3, [pc, #96]	@ (80054a4 <HAL_ADC_Init+0x1ac>)
 8005444:	4013      	ands	r3, r2
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d10b      	bne.n	8005464 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005462:	e018      	b.n	8005496 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	f023 0312 	bic.w	r3, r3, #18
 800546c:	f043 0210 	orr.w	r2, r3, #16
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005484:	e007      	b.n	8005496 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	f043 0210 	orr.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	ffe1f7fd 	.word	0xffe1f7fd
 80054a4:	ff1f0efe 	.word	0xff1f0efe

080054a8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_ADC_Start+0x1a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e098      	b.n	80055f4 <HAL_ADC_Start+0x14c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fbe0 	bl	8005c90 <ADC_Enable>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 8087 	bne.w	80055ea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a41      	ldr	r2, [pc, #260]	@ (80055fc <HAL_ADC_Start+0x154>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d105      	bne.n	8005506 <HAL_ADC_Start+0x5e>
 80054fa:	4b41      	ldr	r3, [pc, #260]	@ (8005600 <HAL_ADC_Start+0x158>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d115      	bne.n	8005532 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d026      	beq.n	800556e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005524:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005528:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005530:	e01d      	b.n	800556e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2f      	ldr	r2, [pc, #188]	@ (8005600 <HAL_ADC_Start+0x158>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_ADC_Start+0xaa>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2b      	ldr	r2, [pc, #172]	@ (80055fc <HAL_ADC_Start+0x154>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10d      	bne.n	800556e <HAL_ADC_Start+0xc6>
 8005552:	4b2b      	ldr	r3, [pc, #172]	@ (8005600 <HAL_ADC_Start+0x158>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005566:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	f023 0206 	bic.w	r2, r3, #6
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005586:	e002      	b.n	800558e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0202 	mvn.w	r2, #2
 800559e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80055aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80055ae:	d113      	bne.n	80055d8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80055b4:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <HAL_ADC_Start+0x154>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d105      	bne.n	80055c6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80055ba:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <HAL_ADC_Start+0x158>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e00c      	b.n	80055f2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	e003      	b.n	80055f2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40012800 	.word	0x40012800
 8005600:	40012400 	.word	0x40012400

08005604 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800561a:	f7ff fe3f 	bl	800529c <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e0d3      	b.n	80057ee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d131      	bne.n	80056b8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12a      	bne.n	80056b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005662:	e021      	b.n	80056a8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d01d      	beq.n	80056a8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <HAL_ADC_PollForConversion+0x7e>
 8005672:	f7ff fe13 	bl	800529c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d212      	bcs.n	80056a8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	f043 0204 	orr.w	r2, r3, #4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e0a2      	b.n	80057ee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0d6      	beq.n	8005664 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80056b6:	e070      	b.n	800579a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80056b8:	4b4f      	ldr	r3, [pc, #316]	@ (80057f8 <HAL_ADC_PollForConversion+0x1f4>)
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	2002      	movs	r0, #2
 80056be:	f003 fa11 	bl	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq>
 80056c2:	4603      	mov	r3, r0
 80056c4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6919      	ldr	r1, [r3, #16]
 80056ce:	4b4b      	ldr	r3, [pc, #300]	@ (80057fc <HAL_ADC_PollForConversion+0x1f8>)
 80056d0:	400b      	ands	r3, r1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d118      	bne.n	8005708 <HAL_ADC_PollForConversion+0x104>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68d9      	ldr	r1, [r3, #12]
 80056dc:	4b48      	ldr	r3, [pc, #288]	@ (8005800 <HAL_ADC_PollForConversion+0x1fc>)
 80056de:	400b      	ands	r3, r1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d111      	bne.n	8005708 <HAL_ADC_PollForConversion+0x104>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6919      	ldr	r1, [r3, #16]
 80056ea:	4b46      	ldr	r3, [pc, #280]	@ (8005804 <HAL_ADC_PollForConversion+0x200>)
 80056ec:	400b      	ands	r3, r1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d108      	bne.n	8005704 <HAL_ADC_PollForConversion+0x100>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68d9      	ldr	r1, [r3, #12]
 80056f8:	4b43      	ldr	r3, [pc, #268]	@ (8005808 <HAL_ADC_PollForConversion+0x204>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_ADC_PollForConversion+0x100>
 8005700:	2314      	movs	r3, #20
 8005702:	e020      	b.n	8005746 <HAL_ADC_PollForConversion+0x142>
 8005704:	2329      	movs	r3, #41	@ 0x29
 8005706:	e01e      	b.n	8005746 <HAL_ADC_PollForConversion+0x142>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6919      	ldr	r1, [r3, #16]
 800570e:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_ADC_PollForConversion+0x200>)
 8005710:	400b      	ands	r3, r1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_ADC_PollForConversion+0x120>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68d9      	ldr	r1, [r3, #12]
 800571c:	4b3a      	ldr	r3, [pc, #232]	@ (8005808 <HAL_ADC_PollForConversion+0x204>)
 800571e:	400b      	ands	r3, r1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00d      	beq.n	8005740 <HAL_ADC_PollForConversion+0x13c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6919      	ldr	r1, [r3, #16]
 800572a:	4b38      	ldr	r3, [pc, #224]	@ (800580c <HAL_ADC_PollForConversion+0x208>)
 800572c:	400b      	ands	r3, r1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <HAL_ADC_PollForConversion+0x140>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	4b34      	ldr	r3, [pc, #208]	@ (800580c <HAL_ADC_PollForConversion+0x208>)
 800573a:	400b      	ands	r3, r1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_ADC_PollForConversion+0x140>
 8005740:	2354      	movs	r3, #84	@ 0x54
 8005742:	e000      	b.n	8005746 <HAL_ADC_PollForConversion+0x142>
 8005744:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800574c:	e021      	b.n	8005792 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d01a      	beq.n	800578c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_ADC_PollForConversion+0x168>
 800575c:	f7ff fd9e 	bl	800529c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d20f      	bcs.n	800578c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d90b      	bls.n	800578c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	f043 0204 	orr.w	r2, r3, #4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e030      	b.n	80057ee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	429a      	cmp	r2, r3
 8005798:	d8d9      	bhi.n	800574e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0212 	mvn.w	r2, #18
 80057a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80057ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80057be:	d115      	bne.n	80057ec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	f043 0201 	orr.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}
 80057f6:	bf00      	nop
 80057f8:	2000025c 	.word	0x2000025c
 80057fc:	24924924 	.word	0x24924924
 8005800:	00924924 	.word	0x00924924
 8005804:	12492492 	.word	0x12492492
 8005808:	00492492 	.word	0x00492492
 800580c:	00249249 	.word	0x00249249

08005810 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a64      	ldr	r2, [pc, #400]	@ (80059b8 <HAL_ADC_Start_DMA+0x1a8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_ADC_Start_DMA+0x24>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a63      	ldr	r2, [pc, #396]	@ (80059bc <HAL_ADC_Start_DMA+0x1ac>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d106      	bne.n	8005842 <HAL_ADC_Start_DMA+0x32>
 8005834:	4b60      	ldr	r3, [pc, #384]	@ (80059b8 <HAL_ADC_Start_DMA+0x1a8>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800583c:	2b00      	cmp	r3, #0
 800583e:	f040 80b3 	bne.w	80059a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_ADC_Start_DMA+0x40>
 800584c:	2302      	movs	r3, #2
 800584e:	e0ae      	b.n	80059ae <HAL_ADC_Start_DMA+0x19e>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fa19 	bl	8005c90 <ADC_Enable>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 809a 	bne.w	800599e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a4e      	ldr	r2, [pc, #312]	@ (80059bc <HAL_ADC_Start_DMA+0x1ac>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d105      	bne.n	8005894 <HAL_ADC_Start_DMA+0x84>
 8005888:	4b4b      	ldr	r3, [pc, #300]	@ (80059b8 <HAL_ADC_Start_DMA+0x1a8>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d115      	bne.n	80058c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d026      	beq.n	80058fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058be:	e01d      	b.n	80058fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a39      	ldr	r2, [pc, #228]	@ (80059b8 <HAL_ADC_Start_DMA+0x1a8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_ADC_Start_DMA+0xd0>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a38      	ldr	r2, [pc, #224]	@ (80059bc <HAL_ADC_Start_DMA+0x1ac>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10d      	bne.n	80058fc <HAL_ADC_Start_DMA+0xec>
 80058e0:	4b35      	ldr	r3, [pc, #212]	@ (80059b8 <HAL_ADC_Start_DMA+0x1a8>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	f023 0206 	bic.w	r2, r3, #6
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005914:	e002      	b.n	800591c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4a25      	ldr	r2, [pc, #148]	@ (80059c0 <HAL_ADC_Start_DMA+0x1b0>)
 800592a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <HAL_ADC_Start_DMA+0x1b4>)
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <HAL_ADC_Start_DMA+0x1b8>)
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0202 	mvn.w	r2, #2
 8005944:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005954:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a18      	ldr	r0, [r3, #32]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	334c      	adds	r3, #76	@ 0x4c
 8005960:	4619      	mov	r1, r3
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f000 fbfd 	bl	8006164 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005974:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005978:	d108      	bne.n	800598c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005988:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800598a:	e00f      	b.n	80059ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800599a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800599c:	e006      	b.n	80059ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80059a6:	e001      	b.n	80059ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40012400 	.word	0x40012400
 80059bc:	40012800 	.word	0x40012800
 80059c0:	08005dc7 	.word	0x08005dc7
 80059c4:	08005e43 	.word	0x08005e43
 80059c8:	08005e5f 	.word	0x08005e5f

080059cc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_ADC_Stop_DMA+0x1a>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e03a      	b.n	8005a5c <HAL_ADC_Stop_DMA+0x90>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9a8 	bl	8005d44 <ADC_ConversionStop_Disable>
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d129      	bne.n	8005a52 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a0c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d11a      	bne.n	8005a52 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fbff 	bl	8006224 <HAL_DMA_Abort>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a44:	e005      	b.n	8005a52 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x20>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0dc      	b.n	8005c7a <HAL_ADC_ConfigChannel+0x1da>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b06      	cmp	r3, #6
 8005ace:	d81c      	bhi.n	8005b0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	3b05      	subs	r3, #5
 8005ae2:	221f      	movs	r2, #31
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	4019      	ands	r1, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	3b05      	subs	r3, #5
 8005afc:	fa00 f203 	lsl.w	r2, r0, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b08:	e03c      	b.n	8005b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d81c      	bhi.n	8005b4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	3b23      	subs	r3, #35	@ 0x23
 8005b24:	221f      	movs	r2, #31
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	4019      	ands	r1, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3b23      	subs	r3, #35	@ 0x23
 8005b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b4a:	e01b      	b.n	8005b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3b41      	subs	r3, #65	@ 0x41
 8005b5e:	221f      	movs	r2, #31
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	4019      	ands	r1, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	3b41      	subs	r3, #65	@ 0x41
 8005b78:	fa00 f203 	lsl.w	r2, r0, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b09      	cmp	r3, #9
 8005b8a:	d91c      	bls.n	8005bc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68d9      	ldr	r1, [r3, #12]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3b1e      	subs	r3, #30
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	4019      	ands	r1, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6898      	ldr	r0, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3b1e      	subs	r3, #30
 8005bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	e019      	b.n	8005bfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6919      	ldr	r1, [r3, #16]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	4019      	ands	r1, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6898      	ldr	r0, [r3, #8]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	fa00 f203 	lsl.w	r2, r0, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d003      	beq.n	8005c0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005c06:	2b11      	cmp	r3, #17
 8005c08:	d132      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <HAL_ADC_ConfigChannel+0x1e4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d125      	bne.n	8005c60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d126      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005c30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d11a      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c3a:	4b13      	ldr	r3, [pc, #76]	@ (8005c88 <HAL_ADC_ConfigChannel+0x1e8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <HAL_ADC_ConfigChannel+0x1ec>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0c9a      	lsrs	r2, r3, #18
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c50:	e002      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f9      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x1b2>
 8005c5e:	e007      	b.n	8005c70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	40012400 	.word	0x40012400
 8005c88:	2000025c 	.word	0x2000025c
 8005c8c:	431bde83 	.word	0x431bde83

08005c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d040      	beq.n	8005d30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d3c <ADC_Enable+0xac>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <ADC_Enable+0xb0>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	0c9b      	lsrs	r3, r3, #18
 8005cca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005ccc:	e002      	b.n	8005cd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f9      	bne.n	8005cce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cda:	f7ff fadf 	bl	800529c <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005ce0:	e01f      	b.n	8005d22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ce2:	f7ff fadb 	bl	800529c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d918      	bls.n	8005d22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d011      	beq.n	8005d22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	f043 0210 	orr.w	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	f043 0201 	orr.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e007      	b.n	8005d32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d1d8      	bne.n	8005ce2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000025c 	.word	0x2000025c
 8005d40:	431bde83 	.word	0x431bde83

08005d44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d12e      	bne.n	8005dbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d6e:	f7ff fa95 	bl	800529c <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005d74:	e01b      	b.n	8005dae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d76:	f7ff fa91 	bl	800529c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d914      	bls.n	8005dae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10d      	bne.n	8005dae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	f043 0210 	orr.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	f043 0201 	orr.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e007      	b.n	8005dbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d0dc      	beq.n	8005d76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d127      	bne.n	8005e30 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005df6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005dfa:	d115      	bne.n	8005e28 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d111      	bne.n	8005e28 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7fc fbe1 	bl	80025f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005e2e:	e004      	b.n	8005e3a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fe13 	bl	8005a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff fe02 	bl	8005a8e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <__NVIC_SetPriorityGrouping>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec6:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	60d3      	str	r3, [r2, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <__NVIC_GetPriorityGrouping>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <__NVIC_EnableIRQ>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db0b      	blt.n	8005f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	f003 021f 	and.w	r2, r3, #31
 8005f10:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <__NVIC_EnableIRQ+0x34>)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <__NVIC_SetPriority>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db0a      	blt.n	8005f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	490c      	ldr	r1, [pc, #48]	@ (8005f7c <__NVIC_SetPriority+0x4c>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f58:	e00a      	b.n	8005f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4908      	ldr	r1, [pc, #32]	@ (8005f80 <__NVIC_SetPriority+0x50>)
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	3b04      	subs	r3, #4
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	761a      	strb	r2, [r3, #24]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	e000e100 	.word	0xe000e100
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <NVIC_EncodePriority>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	@ 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf28      	it	cs
 8005fa2:	2304      	movcs	r3, #4
 8005fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d902      	bls.n	8005fb4 <NVIC_EncodePriority+0x30>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3b03      	subs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <NVIC_EncodePriority+0x32>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	4313      	orrs	r3, r2
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	@ 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ff8:	d301      	bcc.n	8005ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00f      	b.n	800601e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8006028 <SysTick_Config+0x40>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3b01      	subs	r3, #1
 8006004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006006:	210f      	movs	r1, #15
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	f7ff ff90 	bl	8005f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <SysTick_Config+0x40>)
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006016:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <SysTick_Config+0x40>)
 8006018:	2207      	movs	r2, #7
 800601a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	e000e010 	.word	0xe000e010

0800602c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff2d 	bl	8005e94 <__NVIC_SetPriorityGrouping>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006054:	f7ff ff42 	bl	8005edc <__NVIC_GetPriorityGrouping>
 8006058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff ff90 	bl	8005f84 <NVIC_EncodePriority>
 8006064:	4602      	mov	r2, r0
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff ff5f 	bl	8005f30 <__NVIC_SetPriority>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff35 	bl	8005ef8 <__NVIC_EnableIRQ>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ffa2 	bl	8005fe8 <SysTick_Config>
 80060a4:	4603      	mov	r3, r0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e043      	b.n	800614e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b22      	ldr	r3, [pc, #136]	@ (8006158 <HAL_DMA_Init+0xa8>)
 80060ce:	4413      	add	r3, r2
 80060d0:	4a22      	ldr	r2, [pc, #136]	@ (800615c <HAL_DMA_Init+0xac>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	009a      	lsls	r2, r3, #2
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <HAL_DMA_Init+0xb0>)
 80060e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80060fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80060fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	bffdfff8 	.word	0xbffdfff8
 800615c:	cccccccd 	.word	0xcccccccd
 8006160:	40020000 	.word	0x40020000

08006164 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_DMA_Start_IT+0x20>
 8006180:	2302      	movs	r3, #2
 8006182:	e04b      	b.n	800621c <HAL_DMA_Start_IT+0xb8>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d13a      	bne.n	800620e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f9eb 	bl	8006598 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 020e 	orr.w	r2, r2, #14
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e00f      	b.n	80061fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 020a 	orr.w	r2, r2, #10
 80061fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e005      	b.n	800621a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006216:	2302      	movs	r3, #2
 8006218:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d008      	beq.n	800624e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2204      	movs	r2, #4
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e020      	b.n	8006290 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 020e 	bic.w	r2, r2, #14
 800625c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	2101      	movs	r1, #1
 8006278:	fa01 f202 	lsl.w	r2, r1, r2
 800627c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
	...

0800629c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d005      	beq.n	80062c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2204      	movs	r2, #4
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
 80062be:	e051      	b.n	8006364 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 020e 	bic.w	r2, r2, #14
 80062ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0201 	bic.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a22      	ldr	r2, [pc, #136]	@ (8006370 <HAL_DMA_Abort_IT+0xd4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d029      	beq.n	800633e <HAL_DMA_Abort_IT+0xa2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a21      	ldr	r2, [pc, #132]	@ (8006374 <HAL_DMA_Abort_IT+0xd8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <HAL_DMA_Abort_IT+0x9e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <HAL_DMA_Abort_IT+0xdc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01a      	beq.n	8006334 <HAL_DMA_Abort_IT+0x98>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1e      	ldr	r2, [pc, #120]	@ (800637c <HAL_DMA_Abort_IT+0xe0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d012      	beq.n	800632e <HAL_DMA_Abort_IT+0x92>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <HAL_DMA_Abort_IT+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00a      	beq.n	8006328 <HAL_DMA_Abort_IT+0x8c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <HAL_DMA_Abort_IT+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d102      	bne.n	8006322 <HAL_DMA_Abort_IT+0x86>
 800631c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006320:	e00e      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 8006322:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006326:	e00b      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 8006328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800632c:	e008      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 800632e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006332:	e005      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 8006334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006338:	e002      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 800633a:	2310      	movs	r3, #16
 800633c:	e000      	b.n	8006340 <HAL_DMA_Abort_IT+0xa4>
 800633e:	2301      	movs	r3, #1
 8006340:	4a11      	ldr	r2, [pc, #68]	@ (8006388 <HAL_DMA_Abort_IT+0xec>)
 8006342:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    } 
  }
  return status;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40020008 	.word	0x40020008
 8006374:	4002001c 	.word	0x4002001c
 8006378:	40020030 	.word	0x40020030
 800637c:	40020044 	.word	0x40020044
 8006380:	40020058 	.word	0x40020058
 8006384:	4002006c 	.word	0x4002006c
 8006388:	40020000 	.word	0x40020000

0800638c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	2204      	movs	r2, #4
 80063aa:	409a      	lsls	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d04f      	beq.n	8006454 <HAL_DMA_IRQHandler+0xc8>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d04a      	beq.n	8006454 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d107      	bne.n	80063dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0204 	bic.w	r2, r2, #4
 80063da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a66      	ldr	r2, [pc, #408]	@ (800657c <HAL_DMA_IRQHandler+0x1f0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d029      	beq.n	800643a <HAL_DMA_IRQHandler+0xae>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a65      	ldr	r2, [pc, #404]	@ (8006580 <HAL_DMA_IRQHandler+0x1f4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_DMA_IRQHandler+0xaa>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a63      	ldr	r2, [pc, #396]	@ (8006584 <HAL_DMA_IRQHandler+0x1f8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01a      	beq.n	8006430 <HAL_DMA_IRQHandler+0xa4>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a62      	ldr	r2, [pc, #392]	@ (8006588 <HAL_DMA_IRQHandler+0x1fc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d012      	beq.n	800642a <HAL_DMA_IRQHandler+0x9e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a60      	ldr	r2, [pc, #384]	@ (800658c <HAL_DMA_IRQHandler+0x200>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00a      	beq.n	8006424 <HAL_DMA_IRQHandler+0x98>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5f      	ldr	r2, [pc, #380]	@ (8006590 <HAL_DMA_IRQHandler+0x204>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d102      	bne.n	800641e <HAL_DMA_IRQHandler+0x92>
 8006418:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800641c:	e00e      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 800641e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006422:	e00b      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 8006424:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006428:	e008      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 800642a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800642e:	e005      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 8006430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006434:	e002      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 8006436:	2340      	movs	r3, #64	@ 0x40
 8006438:	e000      	b.n	800643c <HAL_DMA_IRQHandler+0xb0>
 800643a:	2304      	movs	r3, #4
 800643c:	4a55      	ldr	r2, [pc, #340]	@ (8006594 <HAL_DMA_IRQHandler+0x208>)
 800643e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8094 	beq.w	8006572 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006452:	e08e      	b.n	8006572 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	2202      	movs	r2, #2
 800645a:	409a      	lsls	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d056      	beq.n	8006512 <HAL_DMA_IRQHandler+0x186>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d051      	beq.n	8006512 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 020a 	bic.w	r2, r2, #10
 800648a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a38      	ldr	r2, [pc, #224]	@ (800657c <HAL_DMA_IRQHandler+0x1f0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d029      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x166>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a37      	ldr	r2, [pc, #220]	@ (8006580 <HAL_DMA_IRQHandler+0x1f4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d022      	beq.n	80064ee <HAL_DMA_IRQHandler+0x162>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a35      	ldr	r2, [pc, #212]	@ (8006584 <HAL_DMA_IRQHandler+0x1f8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01a      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x15c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a34      	ldr	r2, [pc, #208]	@ (8006588 <HAL_DMA_IRQHandler+0x1fc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d012      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x156>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a32      	ldr	r2, [pc, #200]	@ (800658c <HAL_DMA_IRQHandler+0x200>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00a      	beq.n	80064dc <HAL_DMA_IRQHandler+0x150>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a31      	ldr	r2, [pc, #196]	@ (8006590 <HAL_DMA_IRQHandler+0x204>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d102      	bne.n	80064d6 <HAL_DMA_IRQHandler+0x14a>
 80064d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80064d4:	e00e      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064da:	e00b      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064e0:	e008      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064e6:	e005      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064ec:	e002      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064ee:	2320      	movs	r3, #32
 80064f0:	e000      	b.n	80064f4 <HAL_DMA_IRQHandler+0x168>
 80064f2:	2302      	movs	r3, #2
 80064f4:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <HAL_DMA_IRQHandler+0x208>)
 80064f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006504:	2b00      	cmp	r3, #0
 8006506:	d034      	beq.n	8006572 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006510:	e02f      	b.n	8006572 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	2208      	movs	r2, #8
 8006518:	409a      	lsls	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d028      	beq.n	8006574 <HAL_DMA_IRQHandler+0x1e8>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d023      	beq.n	8006574 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 020e 	bic.w	r2, r2, #14
 800653a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f202 	lsl.w	r2, r1, r2
 800654a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
    }
  }
  return;
 8006572:	bf00      	nop
 8006574:	bf00      	nop
}
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40020008 	.word	0x40020008
 8006580:	4002001c 	.word	0x4002001c
 8006584:	40020030 	.word	0x40020030
 8006588:	40020044 	.word	0x40020044
 800658c:	40020058 	.word	0x40020058
 8006590:	4002006c 	.word	0x4002006c
 8006594:	40020000 	.word	0x40020000

08006598 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	2101      	movs	r1, #1
 80065b0:	fa01 f202 	lsl.w	r2, r1, r2
 80065b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d108      	bne.n	80065d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065d6:	e007      	b.n	80065e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800660e:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_FLASH_Program+0xd8>)
 8006610:	7e1b      	ldrb	r3, [r3, #24]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_FLASH_Program+0x26>
 8006616:	2302      	movs	r3, #2
 8006618:	e054      	b.n	80066c4 <HAL_FLASH_Program+0xd0>
 800661a:	4b2c      	ldr	r3, [pc, #176]	@ (80066cc <HAL_FLASH_Program+0xd8>)
 800661c:	2201      	movs	r2, #1
 800661e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006620:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006624:	f000 f8a8 	bl	8006778 <FLASH_WaitForLastOperation>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d144      	bne.n	80066bc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006638:	2301      	movs	r3, #1
 800663a:	757b      	strb	r3, [r7, #21]
 800663c:	e007      	b.n	800664e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d102      	bne.n	800664a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006644:	2302      	movs	r3, #2
 8006646:	757b      	strb	r3, [r7, #21]
 8006648:	e001      	b.n	800664e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800664a:	2304      	movs	r3, #4
 800664c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800664e:	2300      	movs	r3, #0
 8006650:	75bb      	strb	r3, [r7, #22]
 8006652:	e02d      	b.n	80066b0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	005a      	lsls	r2, r3, #1
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	eb02 0c03 	add.w	ip, r2, r3
 800665e:	7dbb      	ldrb	r3, [r7, #22]
 8006660:	0119      	lsls	r1, r3, #4
 8006662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006666:	f1c1 0620 	rsb	r6, r1, #32
 800666a:	f1a1 0020 	sub.w	r0, r1, #32
 800666e:	fa22 f401 	lsr.w	r4, r2, r1
 8006672:	fa03 f606 	lsl.w	r6, r3, r6
 8006676:	4334      	orrs	r4, r6
 8006678:	fa23 f000 	lsr.w	r0, r3, r0
 800667c:	4304      	orrs	r4, r0
 800667e:	fa23 f501 	lsr.w	r5, r3, r1
 8006682:	b2a3      	uxth	r3, r4
 8006684:	4619      	mov	r1, r3
 8006686:	4660      	mov	r0, ip
 8006688:	f000 f85a 	bl	8006740 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800668c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006690:	f000 f872 	bl	8006778 <FLASH_WaitForLastOperation>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006698:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <HAL_FLASH_Program+0xdc>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	4a0c      	ldr	r2, [pc, #48]	@ (80066d0 <HAL_FLASH_Program+0xdc>)
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80066aa:	7dbb      	ldrb	r3, [r7, #22]
 80066ac:	3301      	adds	r3, #1
 80066ae:	75bb      	strb	r3, [r7, #22]
 80066b0:	7dba      	ldrb	r2, [r7, #22]
 80066b2:	7d7b      	ldrb	r3, [r7, #21]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d3cd      	bcc.n	8006654 <HAL_FLASH_Program+0x60>
 80066b8:	e000      	b.n	80066bc <HAL_FLASH_Program+0xc8>
      {
        break;
 80066ba:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80066bc:	4b03      	ldr	r3, [pc, #12]	@ (80066cc <HAL_FLASH_Program+0xd8>)
 80066be:	2200      	movs	r2, #0
 80066c0:	761a      	strb	r2, [r3, #24]

  return status;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	20000b30 	.word	0x20000b30
 80066d0:	40022000 	.word	0x40022000

080066d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <HAL_FLASH_Unlock+0x40>)
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80066ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <HAL_FLASH_Unlock+0x40>)
 80066ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006718 <HAL_FLASH_Unlock+0x44>)
 80066ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <HAL_FLASH_Unlock+0x40>)
 80066f2:	4a0a      	ldr	r2, [pc, #40]	@ (800671c <HAL_FLASH_Unlock+0x48>)
 80066f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80066f6:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <HAL_FLASH_Unlock+0x40>)
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006706:	79fb      	ldrb	r3, [r7, #7]
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40022000 	.word	0x40022000
 8006718:	45670123 	.word	0x45670123
 800671c:	cdef89ab 	.word	0xcdef89ab

08006720 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <HAL_FLASH_Lock+0x1c>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	4a04      	ldr	r2, [pc, #16]	@ (800673c <HAL_FLASH_Lock+0x1c>)
 800672a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40022000 	.word	0x40022000

08006740 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800674c:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <FLASH_Program_HalfWord+0x30>)
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006752:	4b08      	ldr	r3, [pc, #32]	@ (8006774 <FLASH_Program_HalfWord+0x34>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	4a07      	ldr	r2, [pc, #28]	@ (8006774 <FLASH_Program_HalfWord+0x34>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	887a      	ldrh	r2, [r7, #2]
 8006762:	801a      	strh	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000b30 	.word	0x20000b30
 8006774:	40022000 	.word	0x40022000

08006778 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006780:	f7fe fd8c 	bl	800529c <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006786:	e010      	b.n	80067aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d00c      	beq.n	80067aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <FLASH_WaitForLastOperation+0x2e>
 8006796:	f7fe fd81 	bl	800529c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d201      	bcs.n	80067aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e025      	b.n	80067f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80067aa:	4b15      	ldr	r3, [pc, #84]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e8      	bne.n	8006788 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80067b6:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80067c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067c4:	2220      	movs	r2, #32
 80067c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80067c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80067d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d105      	bne.n	80067ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80067e0:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <FLASH_WaitForLastOperation+0x88>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80067ec:	f000 f80a 	bl	8006804 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40022000 	.word	0x40022000

08006804 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800680e:	4b23      	ldr	r3, [pc, #140]	@ (800689c <FLASH_SetErrorCode+0x98>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800681a:	4b21      	ldr	r3, [pc, #132]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f043 0302 	orr.w	r3, r3, #2
 8006822:	4a1f      	ldr	r2, [pc, #124]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 8006824:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f043 0310 	orr.w	r3, r3, #16
 800682c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800682e:	4b1b      	ldr	r3, [pc, #108]	@ (800689c <FLASH_SetErrorCode+0x98>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800683a:	4b19      	ldr	r3, [pc, #100]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 8006844:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800684e:	4b13      	ldr	r3, [pc, #76]	@ (800689c <FLASH_SetErrorCode+0x98>)
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00b      	beq.n	8006872 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800685a:	4b11      	ldr	r3, [pc, #68]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f043 0304 	orr.w	r3, r3, #4
 8006862:	4a0f      	ldr	r2, [pc, #60]	@ (80068a0 <FLASH_SetErrorCode+0x9c>)
 8006864:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <FLASH_SetErrorCode+0x98>)
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	4a0c      	ldr	r2, [pc, #48]	@ (800689c <FLASH_SetErrorCode+0x98>)
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f240 1201 	movw	r2, #257	@ 0x101
 8006878:	4293      	cmp	r3, r2
 800687a:	d106      	bne.n	800688a <FLASH_SetErrorCode+0x86>
 800687c:	4b07      	ldr	r3, [pc, #28]	@ (800689c <FLASH_SetErrorCode+0x98>)
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	4a06      	ldr	r2, [pc, #24]	@ (800689c <FLASH_SetErrorCode+0x98>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	61d3      	str	r3, [r2, #28]
}  
 8006888:	e002      	b.n	8006890 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800688a:	4a04      	ldr	r2, [pc, #16]	@ (800689c <FLASH_SetErrorCode+0x98>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60d3      	str	r3, [r2, #12]
}  
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40022000 	.word	0x40022000
 80068a0:	20000b30 	.word	0x20000b30

080068a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006974 <HAL_FLASHEx_Erase+0xd0>)
 80068b8:	7e1b      	ldrb	r3, [r3, #24]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_FLASHEx_Erase+0x1e>
 80068be:	2302      	movs	r3, #2
 80068c0:	e053      	b.n	800696a <HAL_FLASHEx_Erase+0xc6>
 80068c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006974 <HAL_FLASHEx_Erase+0xd0>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d116      	bne.n	80068fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80068d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068d4:	f7ff ff50 	bl	8006778 <FLASH_WaitForLastOperation>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d141      	bne.n	8006962 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80068de:	2001      	movs	r0, #1
 80068e0:	f000 f84c 	bl	800697c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068e8:	f7ff ff46 	bl	8006778 <FLASH_WaitForLastOperation>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80068f0:	4b21      	ldr	r3, [pc, #132]	@ (8006978 <HAL_FLASHEx_Erase+0xd4>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	4a20      	ldr	r2, [pc, #128]	@ (8006978 <HAL_FLASHEx_Erase+0xd4>)
 80068f6:	f023 0304 	bic.w	r3, r3, #4
 80068fa:	6113      	str	r3, [r2, #16]
 80068fc:	e031      	b.n	8006962 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80068fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006902:	f7ff ff39 	bl	8006778 <FLASH_WaitForLastOperation>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d12a      	bne.n	8006962 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	e019      	b.n	8006950 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800691c:	68b8      	ldr	r0, [r7, #8]
 800691e:	f000 f849 	bl	80069b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006922:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006926:	f7ff ff27 	bl	8006778 <FLASH_WaitForLastOperation>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800692e:	4b12      	ldr	r3, [pc, #72]	@ (8006978 <HAL_FLASHEx_Erase+0xd4>)
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4a11      	ldr	r2, [pc, #68]	@ (8006978 <HAL_FLASHEx_Erase+0xd4>)
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	601a      	str	r2, [r3, #0]
            break;
 8006946:	e00c      	b.n	8006962 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800694e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	029a      	lsls	r2, r3, #10
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	4413      	add	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	d3dc      	bcc.n	800691c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006962:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <HAL_FLASHEx_Erase+0xd0>)
 8006964:	2200      	movs	r2, #0
 8006966:	761a      	strb	r2, [r3, #24]

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000b30 	.word	0x20000b30
 8006978:	40022000 	.word	0x40022000

0800697c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <FLASH_MassErase+0x30>)
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800698a:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <FLASH_MassErase+0x34>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	4a08      	ldr	r2, [pc, #32]	@ (80069b0 <FLASH_MassErase+0x34>)
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <FLASH_MassErase+0x34>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	4a05      	ldr	r2, [pc, #20]	@ (80069b0 <FLASH_MassErase+0x34>)
 800699c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	20000b30 	.word	0x20000b30
 80069b0:	40022000 	.word	0x40022000

080069b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069bc:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <FLASH_PageErase+0x38>)
 80069be:	2200      	movs	r2, #0
 80069c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80069c2:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <FLASH_PageErase+0x3c>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	4a0a      	ldr	r2, [pc, #40]	@ (80069f0 <FLASH_PageErase+0x3c>)
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80069ce:	4a08      	ldr	r2, [pc, #32]	@ (80069f0 <FLASH_PageErase+0x3c>)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80069d4:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <FLASH_PageErase+0x3c>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4a05      	ldr	r2, [pc, #20]	@ (80069f0 <FLASH_PageErase+0x3c>)
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000b30 	.word	0x20000b30
 80069f0:	40022000 	.word	0x40022000

080069f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08b      	sub	sp, #44	@ 0x2c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006a02:	2300      	movs	r3, #0
 8006a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a06:	e169      	b.n	8006cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006a08:	2201      	movs	r2, #1
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f040 8158 	bne.w	8006cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4a9a      	ldr	r2, [pc, #616]	@ (8006c94 <HAL_GPIO_Init+0x2a0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d05e      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
 8006a30:	4a98      	ldr	r2, [pc, #608]	@ (8006c94 <HAL_GPIO_Init+0x2a0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d875      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a36:	4a98      	ldr	r2, [pc, #608]	@ (8006c98 <HAL_GPIO_Init+0x2a4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d058      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
 8006a3c:	4a96      	ldr	r2, [pc, #600]	@ (8006c98 <HAL_GPIO_Init+0x2a4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d86f      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a42:	4a96      	ldr	r2, [pc, #600]	@ (8006c9c <HAL_GPIO_Init+0x2a8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d052      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
 8006a48:	4a94      	ldr	r2, [pc, #592]	@ (8006c9c <HAL_GPIO_Init+0x2a8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d869      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a4e:	4a94      	ldr	r2, [pc, #592]	@ (8006ca0 <HAL_GPIO_Init+0x2ac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d04c      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
 8006a54:	4a92      	ldr	r2, [pc, #584]	@ (8006ca0 <HAL_GPIO_Init+0x2ac>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d863      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a5a:	4a92      	ldr	r2, [pc, #584]	@ (8006ca4 <HAL_GPIO_Init+0x2b0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d046      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
 8006a60:	4a90      	ldr	r2, [pc, #576]	@ (8006ca4 <HAL_GPIO_Init+0x2b0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d85d      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a66:	2b12      	cmp	r3, #18
 8006a68:	d82a      	bhi.n	8006ac0 <HAL_GPIO_Init+0xcc>
 8006a6a:	2b12      	cmp	r3, #18
 8006a6c:	d859      	bhi.n	8006b22 <HAL_GPIO_Init+0x12e>
 8006a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <HAL_GPIO_Init+0x80>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006aef 	.word	0x08006aef
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006adb 	.word	0x08006adb
 8006a80:	08006b1d 	.word	0x08006b1d
 8006a84:	08006b23 	.word	0x08006b23
 8006a88:	08006b23 	.word	0x08006b23
 8006a8c:	08006b23 	.word	0x08006b23
 8006a90:	08006b23 	.word	0x08006b23
 8006a94:	08006b23 	.word	0x08006b23
 8006a98:	08006b23 	.word	0x08006b23
 8006a9c:	08006b23 	.word	0x08006b23
 8006aa0:	08006b23 	.word	0x08006b23
 8006aa4:	08006b23 	.word	0x08006b23
 8006aa8:	08006b23 	.word	0x08006b23
 8006aac:	08006b23 	.word	0x08006b23
 8006ab0:	08006b23 	.word	0x08006b23
 8006ab4:	08006b23 	.word	0x08006b23
 8006ab8:	08006ad1 	.word	0x08006ad1
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	4a79      	ldr	r2, [pc, #484]	@ (8006ca8 <HAL_GPIO_Init+0x2b4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ac6:	e02c      	b.n	8006b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	623b      	str	r3, [r7, #32]
          break;
 8006ace:	e029      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	623b      	str	r3, [r7, #32]
          break;
 8006ad8:	e024      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	623b      	str	r3, [r7, #32]
          break;
 8006ae2:	e01f      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	623b      	str	r3, [r7, #32]
          break;
 8006aec:	e01a      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006af6:	2304      	movs	r3, #4
 8006af8:	623b      	str	r3, [r7, #32]
          break;
 8006afa:	e013      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d105      	bne.n	8006b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006b04:	2308      	movs	r3, #8
 8006b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	611a      	str	r2, [r3, #16]
          break;
 8006b0e:	e009      	b.n	8006b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006b10:	2308      	movs	r3, #8
 8006b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	615a      	str	r2, [r3, #20]
          break;
 8006b1a:	e003      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	623b      	str	r3, [r7, #32]
          break;
 8006b20:	e000      	b.n	8006b24 <HAL_GPIO_Init+0x130>
          break;
 8006b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2bff      	cmp	r3, #255	@ 0xff
 8006b28:	d801      	bhi.n	8006b2e <HAL_GPIO_Init+0x13a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	e001      	b.n	8006b32 <HAL_GPIO_Init+0x13e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2bff      	cmp	r3, #255	@ 0xff
 8006b38:	d802      	bhi.n	8006b40 <HAL_GPIO_Init+0x14c>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	e002      	b.n	8006b46 <HAL_GPIO_Init+0x152>
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	3b08      	subs	r3, #8
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	210f      	movs	r1, #15
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	43db      	mvns	r3, r3
 8006b56:	401a      	ands	r2, r3
 8006b58:	6a39      	ldr	r1, [r7, #32]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	431a      	orrs	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80b1 	beq.w	8006cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b74:	4b4d      	ldr	r3, [pc, #308]	@ (8006cac <HAL_GPIO_Init+0x2b8>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	4a4c      	ldr	r2, [pc, #304]	@ (8006cac <HAL_GPIO_Init+0x2b8>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6193      	str	r3, [r2, #24]
 8006b80:	4b4a      	ldr	r3, [pc, #296]	@ (8006cac <HAL_GPIO_Init+0x2b8>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b8c:	4a48      	ldr	r2, [pc, #288]	@ (8006cb0 <HAL_GPIO_Init+0x2bc>)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	089b      	lsrs	r3, r3, #2
 8006b92:	3302      	adds	r3, #2
 8006b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	220f      	movs	r2, #15
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4013      	ands	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a40      	ldr	r2, [pc, #256]	@ (8006cb4 <HAL_GPIO_Init+0x2c0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_GPIO_Init+0x1ec>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a3f      	ldr	r2, [pc, #252]	@ (8006cb8 <HAL_GPIO_Init+0x2c4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00d      	beq.n	8006bdc <HAL_GPIO_Init+0x1e8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8006cbc <HAL_GPIO_Init+0x2c8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <HAL_GPIO_Init+0x1e4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3d      	ldr	r2, [pc, #244]	@ (8006cc0 <HAL_GPIO_Init+0x2cc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d101      	bne.n	8006bd4 <HAL_GPIO_Init+0x1e0>
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e006      	b.n	8006be2 <HAL_GPIO_Init+0x1ee>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	e004      	b.n	8006be2 <HAL_GPIO_Init+0x1ee>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e002      	b.n	8006be2 <HAL_GPIO_Init+0x1ee>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <HAL_GPIO_Init+0x1ee>
 8006be0:	2300      	movs	r3, #0
 8006be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be4:	f002 0203 	and.w	r2, r2, #3
 8006be8:	0092      	lsls	r2, r2, #2
 8006bea:	4093      	lsls	r3, r2
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bf2:	492f      	ldr	r1, [pc, #188]	@ (8006cb0 <HAL_GPIO_Init+0x2bc>)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	492c      	ldr	r1, [pc, #176]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	608b      	str	r3, [r1, #8]
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	4928      	ldr	r1, [pc, #160]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c34:	4b23      	ldr	r3, [pc, #140]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	4922      	ldr	r1, [pc, #136]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60cb      	str	r3, [r1, #12]
 8006c40:	e006      	b.n	8006c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c42:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	491e      	ldr	r1, [pc, #120]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c5c:	4b19      	ldr	r3, [pc, #100]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	4918      	ldr	r1, [pc, #96]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	604b      	str	r3, [r1, #4]
 8006c68:	e006      	b.n	8006c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c6a:	4b16      	ldr	r3, [pc, #88]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	4914      	ldr	r1, [pc, #80]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d021      	beq.n	8006cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c84:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	490e      	ldr	r1, [pc, #56]	@ (8006cc4 <HAL_GPIO_Init+0x2d0>)
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]
 8006c90:	e021      	b.n	8006cd6 <HAL_GPIO_Init+0x2e2>
 8006c92:	bf00      	nop
 8006c94:	10320000 	.word	0x10320000
 8006c98:	10310000 	.word	0x10310000
 8006c9c:	10220000 	.word	0x10220000
 8006ca0:	10210000 	.word	0x10210000
 8006ca4:	10120000 	.word	0x10120000
 8006ca8:	10110000 	.word	0x10110000
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40010800 	.word	0x40010800
 8006cb8:	40010c00 	.word	0x40010c00
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	40011400 	.word	0x40011400
 8006cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <HAL_GPIO_Init+0x304>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	4909      	ldr	r1, [pc, #36]	@ (8006cf8 <HAL_GPIO_Init+0x304>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	3301      	adds	r3, #1
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f47f ae8e 	bne.w	8006a08 <HAL_GPIO_Init+0x14>
  }
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	372c      	adds	r7, #44	@ 0x2c
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr
 8006cf8:	40010400 	.word	0x40010400

08006cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	887b      	ldrh	r3, [r7, #2]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	e001      	b.n	8006d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	807b      	strh	r3, [r7, #2]
 8006d36:	4613      	mov	r3, r2
 8006d38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d3a:	787b      	ldrb	r3, [r7, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d40:	887a      	ldrh	r2, [r7, #2]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006d46:	e003      	b.n	8006d50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	041a      	lsls	r2, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	611a      	str	r2, [r3, #16]
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d66:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d72:	4a05      	ldr	r2, [pc, #20]	@ (8006d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fb fbc8 	bl	8002510 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40010400 	.word	0x40010400

08006d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e12b      	b.n	8006ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fd fc50 	bl	8004658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2224      	movs	r2, #36	@ 0x24
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006df0:	f001 fd7c 	bl	80088ec <HAL_RCC_GetPCLK1Freq>
 8006df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4a81      	ldr	r2, [pc, #516]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d807      	bhi.n	8006e10 <HAL_I2C_Init+0x84>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a80      	ldr	r2, [pc, #512]	@ (8007004 <HAL_I2C_Init+0x278>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bf94      	ite	ls
 8006e08:	2301      	movls	r3, #1
 8006e0a:	2300      	movhi	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e006      	b.n	8006e1e <HAL_I2C_Init+0x92>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a7d      	ldr	r2, [pc, #500]	@ (8007008 <HAL_I2C_Init+0x27c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bf94      	ite	ls
 8006e18:	2301      	movls	r3, #1
 8006e1a:	2300      	movhi	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0e7      	b.n	8006ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a78      	ldr	r2, [pc, #480]	@ (800700c <HAL_I2C_Init+0x280>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0c9b      	lsrs	r3, r3, #18
 8006e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4a6a      	ldr	r2, [pc, #424]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d802      	bhi.n	8006e60 <HAL_I2C_Init+0xd4>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	e009      	b.n	8006e74 <HAL_I2C_Init+0xe8>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	4a69      	ldr	r2, [pc, #420]	@ (8007010 <HAL_I2C_Init+0x284>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	099b      	lsrs	r3, r3, #6
 8006e72:	3301      	adds	r3, #1
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	495c      	ldr	r1, [pc, #368]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d819      	bhi.n	8006ec8 <HAL_I2C_Init+0x13c>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1e59      	subs	r1, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ea2:	1c59      	adds	r1, r3, #1
 8006ea4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ea8:	400b      	ands	r3, r1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_I2C_Init+0x138>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1e59      	subs	r1, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec2:	e051      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e04f      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d111      	bne.n	8006ef4 <HAL_I2C_Init+0x168>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	1e58      	subs	r0, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6859      	ldr	r1, [r3, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	440b      	add	r3, r1
 8006ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bf0c      	ite	eq
 8006eec:	2301      	moveq	r3, #1
 8006eee:	2300      	movne	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e012      	b.n	8006f1a <HAL_I2C_Init+0x18e>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1e58      	subs	r0, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6859      	ldr	r1, [r3, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	0099      	lsls	r1, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf0c      	ite	eq
 8006f14:	2301      	moveq	r3, #1
 8006f16:	2300      	movne	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_I2C_Init+0x196>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e022      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10e      	bne.n	8006f48 <HAL_I2C_Init+0x1bc>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1e58      	subs	r0, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	440b      	add	r3, r1
 8006f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f46:	e00f      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1e58      	subs	r0, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	0099      	lsls	r1, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	6809      	ldr	r1, [r1, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006f96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6911      	ldr	r1, [r2, #16]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68d2      	ldr	r2, [r2, #12]
 8006fa2:	4311      	orrs	r1, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	000186a0 	.word	0x000186a0
 8007004:	001e847f 	.word	0x001e847f
 8007008:	003d08ff 	.word	0x003d08ff
 800700c:	431bde83 	.word	0x431bde83
 8007010:	10624dd3 	.word	0x10624dd3

08007014 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	461a      	mov	r2, r3
 8007022:	4603      	mov	r3, r0
 8007024:	817b      	strh	r3, [r7, #10]
 8007026:	460b      	mov	r3, r1
 8007028:	813b      	strh	r3, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800702e:	f7fe f935 	bl	800529c <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	f040 80d9 	bne.w	80071f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	2319      	movs	r3, #25
 8007048:	2201      	movs	r2, #1
 800704a:	496d      	ldr	r1, [pc, #436]	@ (8007200 <HAL_I2C_Mem_Write+0x1ec>)
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fdfb 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
 800705a:	e0cc      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_I2C_Mem_Write+0x56>
 8007066:	2302      	movs	r3, #2
 8007068:	e0c5      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d007      	beq.n	8007090 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800709e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2221      	movs	r2, #33	@ 0x21
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a3a      	ldr	r2, [r7, #32]
 80070ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a4d      	ldr	r2, [pc, #308]	@ (8007204 <HAL_I2C_Mem_Write+0x1f0>)
 80070d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070d2:	88f8      	ldrh	r0, [r7, #6]
 80070d4:	893a      	ldrh	r2, [r7, #8]
 80070d6:	8979      	ldrh	r1, [r7, #10]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4603      	mov	r3, r0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fc32 	bl	800794c <I2C_RequestMemoryWrite>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d052      	beq.n	8007194 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e081      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fec0 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	2b04      	cmp	r3, #4
 8007108:	d107      	bne.n	800711a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06b      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_I2C_Mem_Write+0x180>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1aa      	bne.n	80070f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 feb3 	bl	8007f0c <I2C_WaitOnBTFFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00d      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d107      	bne.n	80071c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e016      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	00100002 	.word	0x00100002
 8007204:	ffff0000 	.word	0xffff0000

08007208 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	@ 0x30
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	461a      	mov	r2, r3
 8007216:	4603      	mov	r3, r0
 8007218:	817b      	strh	r3, [r7, #10]
 800721a:	460b      	mov	r3, r1
 800721c:	813b      	strh	r3, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007226:	f7fe f839 	bl	800529c <HAL_GetTick>
 800722a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b20      	cmp	r3, #32
 8007236:	f040 8250 	bne.w	80076da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2319      	movs	r3, #25
 8007240:	2201      	movs	r2, #1
 8007242:	4982      	ldr	r1, [pc, #520]	@ (800744c <HAL_I2C_Mem_Read+0x244>)
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fcff 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007250:	2302      	movs	r3, #2
 8007252:	e243      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_I2C_Mem_Read+0x5a>
 800725e:	2302      	movs	r3, #2
 8007260:	e23c      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d007      	beq.n	8007288 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0201 	orr.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2222      	movs	r2, #34	@ 0x22
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2240      	movs	r2, #64	@ 0x40
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80072b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a62      	ldr	r2, [pc, #392]	@ (8007450 <HAL_I2C_Mem_Read+0x248>)
 80072c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072ca:	88f8      	ldrh	r0, [r7, #6]
 80072cc:	893a      	ldrh	r2, [r7, #8]
 80072ce:	8979      	ldrh	r1, [r7, #10]
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4603      	mov	r3, r0
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fbcc 	bl	8007a78 <I2C_RequestMemoryRead>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e1f8      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d113      	bne.n	800731a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e1cc      	b.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731e:	2b01      	cmp	r3, #1
 8007320:	d11e      	bne.n	8007360 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007332:	b672      	cpsid	i
}
 8007334:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007336:	2300      	movs	r3, #0
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800735a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800735c:	b662      	cpsie	i
}
 800735e:	e035      	b.n	80073cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007364:	2b02      	cmp	r3, #2
 8007366:	d11e      	bne.n	80073a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007376:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007378:	b672      	cpsid	i
}
 800737a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80073a2:	b662      	cpsie	i
}
 80073a4:	e012      	b.n	80073cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80073cc:	e172      	b.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	f200 811f 	bhi.w	8007616 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d123      	bne.n	8007428 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fdd9 	bl	8007f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e173      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007426:	e145      	b.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742c:	2b02      	cmp	r3, #2
 800742e:	d152      	bne.n	80074d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	2200      	movs	r2, #0
 8007438:	4906      	ldr	r1, [pc, #24]	@ (8007454 <HAL_I2C_Mem_Read+0x24c>)
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fc04 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e148      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
 800744a:	bf00      	nop
 800744c:	00100002 	.word	0x00100002
 8007450:	ffff0000 	.word	0xffff0000
 8007454:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007458:	b672      	cpsid	i
}
 800745a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800749e:	b662      	cpsie	i
}
 80074a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074d4:	e0ee      	b.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	2200      	movs	r2, #0
 80074de:	4981      	ldr	r1, [pc, #516]	@ (80076e4 <HAL_I2C_Mem_Read+0x4dc>)
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fbb1 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0f5      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007500:	b672      	cpsid	i
}
 8007502:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007536:	4b6c      	ldr	r3, [pc, #432]	@ (80076e8 <HAL_I2C_Mem_Read+0x4e0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	4a6b      	ldr	r2, [pc, #428]	@ (80076ec <HAL_I2C_Mem_Read+0x4e4>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	0a1a      	lsrs	r2, r3, #8
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	3b01      	subs	r3, #1
 8007554:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d118      	bne.n	800758e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	f043 0220 	orr.w	r2, r3, #32
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800757e:	b662      	cpsie	i
}
 8007580:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0a6      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b04      	cmp	r3, #4
 800759a:	d1d9      	bne.n	8007550 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80075de:	b662      	cpsie	i
}
 80075e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007614:	e04e      	b.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007618:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fcbe 	bl	8007f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e058      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d124      	bne.n	80076b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800766e:	2b03      	cmp	r3, #3
 8007670:	d107      	bne.n	8007682 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007680:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f47f ae88 	bne.w	80073ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e000      	b.n	80076dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3728      	adds	r7, #40	@ 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	00010004 	.word	0x00010004
 80076e8:	2000025c 	.word	0x2000025c
 80076ec:	14f8b589 	.word	0x14f8b589

080076f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	@ 0x28
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	460b      	mov	r3, r1
 80076fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007700:	f7fd fdcc 	bl	800529c <HAL_GetTick>
 8007704:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b20      	cmp	r3, #32
 8007714:	f040 8111 	bne.w	800793a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2319      	movs	r3, #25
 800771e:	2201      	movs	r2, #1
 8007720:	4988      	ldr	r1, [pc, #544]	@ (8007944 <HAL_I2C_IsDeviceReady+0x254>)
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa90 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800772e:	2302      	movs	r3, #2
 8007730:	e104      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_I2C_IsDeviceReady+0x50>
 800773c:	2302      	movs	r3, #2
 800773e:	e0fd      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b01      	cmp	r3, #1
 8007754:	d007      	beq.n	8007766 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0201 	orr.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2224      	movs	r2, #36	@ 0x24
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a70      	ldr	r2, [pc, #448]	@ (8007948 <HAL_I2C_IsDeviceReady+0x258>)
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007798:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fa4e 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c0:	d103      	bne.n	80077ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e0b6      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077ce:	897b      	ldrh	r3, [r7, #10]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80077dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80077de:	f7fd fd5d 	bl	800529c <HAL_GetTick>
 80077e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	bf0c      	ite	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	2300      	movne	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007808:	bf0c      	ite	eq
 800780a:	2301      	moveq	r3, #1
 800780c:	2300      	movne	r3, #0
 800780e:	b2db      	uxtb	r3, r3
 8007810:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007812:	e025      	b.n	8007860 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007814:	f7fd fd42 	bl	800529c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <HAL_I2C_IsDeviceReady+0x13a>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	22a0      	movs	r2, #160	@ 0xa0
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2ba0      	cmp	r3, #160	@ 0xa0
 800786a:	d005      	beq.n	8007878 <HAL_I2C_IsDeviceReady+0x188>
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <HAL_I2C_IsDeviceReady+0x188>
 8007872:	7dbb      	ldrb	r3, [r7, #22]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0cd      	beq.n	8007814 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d129      	bne.n	80078e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800789c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	2319      	movs	r3, #25
 80078ba:	2201      	movs	r2, #1
 80078bc:	4921      	ldr	r1, [pc, #132]	@ (8007944 <HAL_I2C_IsDeviceReady+0x254>)
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f9c2 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e036      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	e02c      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2319      	movs	r3, #25
 8007902:	2201      	movs	r2, #1
 8007904:	490f      	ldr	r1, [pc, #60]	@ (8007944 <HAL_I2C_IsDeviceReady+0x254>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f99e 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e012      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	3301      	adds	r3, #1
 800791a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	f4ff af32 	bcc.w	800778a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800793a:	2302      	movs	r3, #2
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	00100002 	.word	0x00100002
 8007948:	ffff0000 	.word	0xffff0000

0800794c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	817b      	strh	r3, [r7, #10]
 800795e:	460b      	mov	r3, r1
 8007960:	813b      	strh	r3, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	2200      	movs	r2, #0
 800797e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f960 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799c:	d103      	bne.n	80079a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e05f      	b.n	8007a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079aa:	897b      	ldrh	r3, [r7, #10]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80079b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	492d      	ldr	r1, [pc, #180]	@ (8007a74 <I2C_RequestMemoryWrite+0x128>)
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f9bb 	bl	8007d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e04c      	b.n	8007a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e8:	6a39      	ldr	r1, [r7, #32]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fa46 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d107      	bne.n	8007a0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e02b      	b.n	8007a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d105      	bne.n	8007a24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a18:	893b      	ldrh	r3, [r7, #8]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	611a      	str	r2, [r3, #16]
 8007a22:	e021      	b.n	8007a68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a24:	893b      	ldrh	r3, [r7, #8]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a34:	6a39      	ldr	r1, [r7, #32]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fa20 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00d      	beq.n	8007a5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d107      	bne.n	8007a5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e005      	b.n	8007a6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5e:	893b      	ldrh	r3, [r7, #8]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	00010002 	.word	0x00010002

08007a78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	813b      	strh	r3, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ab0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f8c2 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00d      	beq.n	8007ae6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad8:	d103      	bne.n	8007ae2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ae0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e0aa      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ae6:	897b      	ldrh	r3, [r7, #10]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007af4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	4952      	ldr	r1, [pc, #328]	@ (8007c44 <I2C_RequestMemoryRead+0x1cc>)
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f91d 	bl	8007d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e097      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b24:	6a39      	ldr	r1, [r7, #32]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f9a8 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d107      	bne.n	8007b4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e076      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d105      	bne.n	8007b60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	611a      	str	r2, [r3, #16]
 8007b5e:	e021      	b.n	8007ba4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b70:	6a39      	ldr	r1, [r7, #32]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f982 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d107      	bne.n	8007b96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e050      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b9a:	893b      	ldrh	r3, [r7, #8]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba6:	6a39      	ldr	r1, [r7, #32]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f967 	bl	8007e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00d      	beq.n	8007bd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d107      	bne.n	8007bcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e035      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f82b 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c06:	d103      	bne.n	8007c10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e013      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c14:	897b      	ldrh	r3, [r7, #10]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f043 0301 	orr.w	r3, r3, #1
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	4906      	ldr	r1, [pc, #24]	@ (8007c44 <I2C_RequestMemoryRead+0x1cc>)
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 f886 	bl	8007d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e000      	b.n	8007c3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	00010002 	.word	0x00010002

08007c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c58:	e048      	b.n	8007cec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d044      	beq.n	8007cec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c62:	f7fd fb1b 	bl	800529c <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d302      	bcc.n	8007c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d139      	bne.n	8007cec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d10d      	bne.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	43da      	mvns	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	e00c      	b.n	8007cb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	43da      	mvns	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4013      	ands	r3, r2
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d116      	bne.n	8007cec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	f043 0220 	orr.w	r2, r3, #32
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e023      	b.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	0c1b      	lsrs	r3, r3, #16
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d10d      	bne.n	8007d12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	43da      	mvns	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	4013      	ands	r3, r2
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bf0c      	ite	eq
 8007d08:	2301      	moveq	r3, #1
 8007d0a:	2300      	movne	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	e00c      	b.n	8007d2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	43da      	mvns	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d093      	beq.n	8007c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d4a:	e071      	b.n	8007e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d5a:	d123      	bne.n	8007da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d90:	f043 0204 	orr.w	r2, r3, #4
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e067      	b.n	8007e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d041      	beq.n	8007e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dac:	f7fd fa76 	bl	800529c <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d302      	bcc.n	8007dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d136      	bne.n	8007e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d10c      	bne.n	8007de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	43da      	mvns	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e00b      	b.n	8007dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	43da      	mvns	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4013      	ands	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d016      	beq.n	8007e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e021      	b.n	8007e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	0c1b      	lsrs	r3, r3, #16
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10c      	bne.n	8007e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	43da      	mvns	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4013      	ands	r3, r2
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bf14      	ite	ne
 8007e4c:	2301      	movne	r3, #1
 8007e4e:	2300      	moveq	r3, #0
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	e00b      	b.n	8007e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	43da      	mvns	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f af6d 	bne.w	8007d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e88:	e034      	b.n	8007ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f8e3 	bl	8008056 <I2C_IsAcknowledgeFailed>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e034      	b.n	8007f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d028      	beq.n	8007ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7fd f9fb 	bl	800529c <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11d      	bne.n	8007ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec2:	2b80      	cmp	r3, #128	@ 0x80
 8007ec4:	d016      	beq.n	8007ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e007      	b.n	8007f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efe:	2b80      	cmp	r3, #128	@ 0x80
 8007f00:	d1c3      	bne.n	8007e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f18:	e034      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f89b 	bl	8008056 <I2C_IsAcknowledgeFailed>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e034      	b.n	8007f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d028      	beq.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f32:	f7fd f9b3 	bl	800529c <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d302      	bcc.n	8007f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11d      	bne.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d016      	beq.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e007      	b.n	8007f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d1c3      	bne.n	8007f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fa8:	e049      	b.n	800803e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d119      	bne.n	8007fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0210 	mvn.w	r2, #16
 8007fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e030      	b.n	800804e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fec:	f7fd f956 	bl	800529c <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d302      	bcc.n	8008002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d11d      	bne.n	800803e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800c:	2b40      	cmp	r3, #64	@ 0x40
 800800e:	d016      	beq.n	800803e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802a:	f043 0220 	orr.w	r2, r3, #32
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e007      	b.n	800804e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008048:	2b40      	cmp	r3, #64	@ 0x40
 800804a:	d1ae      	bne.n	8007faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800806c:	d11b      	bne.n	80080a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008076:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	f043 0204 	orr.w	r2, r3, #4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e036      	b.n	8008132 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80080cc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f245 5255 	movw	r2, #21845	@ 0x5555
 80080d6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6892      	ldr	r2, [r2, #8]
 80080ea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80080ec:	f7fd f8d6 	bl	800529c <HAL_GetTick>
 80080f0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80080f2:	e011      	b.n	8008118 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80080f4:	f7fd f8d2 	bl	800529c <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f241 323c 	movw	r2, #4924	@ 0x133c
 8008102:	4293      	cmp	r3, r2
 8008104:	d908      	bls.n	8008118 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e00c      	b.n	8008132 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800812e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800814a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e272      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8087 	beq.w	8008286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008178:	4b92      	ldr	r3, [pc, #584]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f003 030c 	and.w	r3, r3, #12
 8008180:	2b04      	cmp	r3, #4
 8008182:	d00c      	beq.n	800819e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008184:	4b8f      	ldr	r3, [pc, #572]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 030c 	and.w	r3, r3, #12
 800818c:	2b08      	cmp	r3, #8
 800818e:	d112      	bne.n	80081b6 <HAL_RCC_OscConfig+0x5e>
 8008190:	4b8c      	ldr	r3, [pc, #560]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800819c:	d10b      	bne.n	80081b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800819e:	4b89      	ldr	r3, [pc, #548]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d06c      	beq.n	8008284 <HAL_RCC_OscConfig+0x12c>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d168      	bne.n	8008284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e24c      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081be:	d106      	bne.n	80081ce <HAL_RCC_OscConfig+0x76>
 80081c0:	4b80      	ldr	r3, [pc, #512]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a7f      	ldr	r2, [pc, #508]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	e02e      	b.n	800822c <HAL_RCC_OscConfig+0xd4>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10c      	bne.n	80081f0 <HAL_RCC_OscConfig+0x98>
 80081d6:	4b7b      	ldr	r3, [pc, #492]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a7a      	ldr	r2, [pc, #488]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	4b78      	ldr	r3, [pc, #480]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a77      	ldr	r2, [pc, #476]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e01d      	b.n	800822c <HAL_RCC_OscConfig+0xd4>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081f8:	d10c      	bne.n	8008214 <HAL_RCC_OscConfig+0xbc>
 80081fa:	4b72      	ldr	r3, [pc, #456]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a71      	ldr	r2, [pc, #452]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4b6f      	ldr	r3, [pc, #444]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a6e      	ldr	r2, [pc, #440]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 800820c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e00b      	b.n	800822c <HAL_RCC_OscConfig+0xd4>
 8008214:	4b6b      	ldr	r3, [pc, #428]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a6a      	ldr	r2, [pc, #424]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 800821a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4b68      	ldr	r3, [pc, #416]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a67      	ldr	r2, [pc, #412]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800822a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d013      	beq.n	800825c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008234:	f7fd f832 	bl	800529c <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800823c:	f7fd f82e 	bl	800529c <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b64      	cmp	r3, #100	@ 0x64
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e200      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800824e:	4b5d      	ldr	r3, [pc, #372]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <HAL_RCC_OscConfig+0xe4>
 800825a:	e014      	b.n	8008286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825c:	f7fd f81e 	bl	800529c <HAL_GetTick>
 8008260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008262:	e008      	b.n	8008276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008264:	f7fd f81a 	bl	800529c <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b64      	cmp	r3, #100	@ 0x64
 8008270:	d901      	bls.n	8008276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e1ec      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008276:	4b53      	ldr	r3, [pc, #332]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f0      	bne.n	8008264 <HAL_RCC_OscConfig+0x10c>
 8008282:	e000      	b.n	8008286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d063      	beq.n	800835a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008292:	4b4c      	ldr	r3, [pc, #304]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 030c 	and.w	r3, r3, #12
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800829e:	4b49      	ldr	r3, [pc, #292]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 030c 	and.w	r3, r3, #12
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d11c      	bne.n	80082e4 <HAL_RCC_OscConfig+0x18c>
 80082aa:	4b46      	ldr	r3, [pc, #280]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d116      	bne.n	80082e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082b6:	4b43      	ldr	r3, [pc, #268]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_RCC_OscConfig+0x176>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d001      	beq.n	80082ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e1c0      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ce:	4b3d      	ldr	r3, [pc, #244]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4939      	ldr	r1, [pc, #228]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e2:	e03a      	b.n	800835a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082ec:	4b36      	ldr	r3, [pc, #216]	@ (80083c8 <HAL_RCC_OscConfig+0x270>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f2:	f7fc ffd3 	bl	800529c <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082fa:	f7fc ffcf 	bl	800529c <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e1a1      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830c:	4b2d      	ldr	r3, [pc, #180]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008318:	4b2a      	ldr	r3, [pc, #168]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4927      	ldr	r1, [pc, #156]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008328:	4313      	orrs	r3, r2
 800832a:	600b      	str	r3, [r1, #0]
 800832c:	e015      	b.n	800835a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800832e:	4b26      	ldr	r3, [pc, #152]	@ (80083c8 <HAL_RCC_OscConfig+0x270>)
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008334:	f7fc ffb2 	bl	800529c <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800833a:	e008      	b.n	800834e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800833c:	f7fc ffae 	bl	800529c <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d901      	bls.n	800834e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e180      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800834e:	4b1d      	ldr	r3, [pc, #116]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f0      	bne.n	800833c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d03a      	beq.n	80083dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d019      	beq.n	80083a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800836e:	4b17      	ldr	r3, [pc, #92]	@ (80083cc <HAL_RCC_OscConfig+0x274>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008374:	f7fc ff92 	bl	800529c <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800837c:	f7fc ff8e 	bl	800529c <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e160      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800838e:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <HAL_RCC_OscConfig+0x26c>)
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0f0      	beq.n	800837c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800839a:	2001      	movs	r0, #1
 800839c:	f000 face 	bl	800893c <RCC_Delay>
 80083a0:	e01c      	b.n	80083dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083a2:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <HAL_RCC_OscConfig+0x274>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083a8:	f7fc ff78 	bl	800529c <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ae:	e00f      	b.n	80083d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083b0:	f7fc ff74 	bl	800529c <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d908      	bls.n	80083d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e146      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
 80083c2:	bf00      	nop
 80083c4:	40021000 	.word	0x40021000
 80083c8:	42420000 	.word	0x42420000
 80083cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083d0:	4b92      	ldr	r3, [pc, #584]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80083d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e9      	bne.n	80083b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80a6 	beq.w	8008536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ee:	4b8b      	ldr	r3, [pc, #556]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10d      	bne.n	8008416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083fa:	4b88      	ldr	r3, [pc, #544]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	4a87      	ldr	r2, [pc, #540]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008404:	61d3      	str	r3, [r2, #28]
 8008406:	4b85      	ldr	r3, [pc, #532]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008416:	4b82      	ldr	r3, [pc, #520]	@ (8008620 <HAL_RCC_OscConfig+0x4c8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841e:	2b00      	cmp	r3, #0
 8008420:	d118      	bne.n	8008454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008422:	4b7f      	ldr	r3, [pc, #508]	@ (8008620 <HAL_RCC_OscConfig+0x4c8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a7e      	ldr	r2, [pc, #504]	@ (8008620 <HAL_RCC_OscConfig+0x4c8>)
 8008428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800842c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800842e:	f7fc ff35 	bl	800529c <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008436:	f7fc ff31 	bl	800529c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b64      	cmp	r3, #100	@ 0x64
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e103      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008448:	4b75      	ldr	r3, [pc, #468]	@ (8008620 <HAL_RCC_OscConfig+0x4c8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d106      	bne.n	800846a <HAL_RCC_OscConfig+0x312>
 800845c:	4b6f      	ldr	r3, [pc, #444]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	4a6e      	ldr	r2, [pc, #440]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	6213      	str	r3, [r2, #32]
 8008468:	e02d      	b.n	80084c6 <HAL_RCC_OscConfig+0x36e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10c      	bne.n	800848c <HAL_RCC_OscConfig+0x334>
 8008472:	4b6a      	ldr	r3, [pc, #424]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	4a69      	ldr	r2, [pc, #420]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	6213      	str	r3, [r2, #32]
 800847e:	4b67      	ldr	r3, [pc, #412]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4a66      	ldr	r2, [pc, #408]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008484:	f023 0304 	bic.w	r3, r3, #4
 8008488:	6213      	str	r3, [r2, #32]
 800848a:	e01c      	b.n	80084c6 <HAL_RCC_OscConfig+0x36e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b05      	cmp	r3, #5
 8008492:	d10c      	bne.n	80084ae <HAL_RCC_OscConfig+0x356>
 8008494:	4b61      	ldr	r3, [pc, #388]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	4a60      	ldr	r2, [pc, #384]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800849a:	f043 0304 	orr.w	r3, r3, #4
 800849e:	6213      	str	r3, [r2, #32]
 80084a0:	4b5e      	ldr	r3, [pc, #376]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	4a5d      	ldr	r2, [pc, #372]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6213      	str	r3, [r2, #32]
 80084ac:	e00b      	b.n	80084c6 <HAL_RCC_OscConfig+0x36e>
 80084ae:	4b5b      	ldr	r3, [pc, #364]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	4a5a      	ldr	r2, [pc, #360]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	6213      	str	r3, [r2, #32]
 80084ba:	4b58      	ldr	r3, [pc, #352]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4a57      	ldr	r2, [pc, #348]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084c0:	f023 0304 	bic.w	r3, r3, #4
 80084c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d015      	beq.n	80084fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084ce:	f7fc fee5 	bl	800529c <HAL_GetTick>
 80084d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084d4:	e00a      	b.n	80084ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d6:	f7fc fee1 	bl	800529c <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e0b1      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ec:	4b4b      	ldr	r3, [pc, #300]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0ee      	beq.n	80084d6 <HAL_RCC_OscConfig+0x37e>
 80084f8:	e014      	b.n	8008524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084fa:	f7fc fecf 	bl	800529c <HAL_GetTick>
 80084fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008500:	e00a      	b.n	8008518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008502:	f7fc fecb 	bl	800529c <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008510:	4293      	cmp	r3, r2
 8008512:	d901      	bls.n	8008518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e09b      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008518:	4b40      	ldr	r3, [pc, #256]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1ee      	bne.n	8008502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800852a:	4b3c      	ldr	r3, [pc, #240]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	4a3b      	ldr	r2, [pc, #236]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8087 	beq.w	800864e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008540:	4b36      	ldr	r3, [pc, #216]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f003 030c 	and.w	r3, r3, #12
 8008548:	2b08      	cmp	r3, #8
 800854a:	d061      	beq.n	8008610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d146      	bne.n	80085e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008554:	4b33      	ldr	r3, [pc, #204]	@ (8008624 <HAL_RCC_OscConfig+0x4cc>)
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800855a:	f7fc fe9f 	bl	800529c <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008562:	f7fc fe9b 	bl	800529c <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e06d      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008574:	4b29      	ldr	r3, [pc, #164]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f0      	bne.n	8008562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008588:	d108      	bne.n	800859c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800858a:	4b24      	ldr	r3, [pc, #144]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	4921      	ldr	r1, [pc, #132]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008598:	4313      	orrs	r3, r2
 800859a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800859c:	4b1f      	ldr	r3, [pc, #124]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a19      	ldr	r1, [r3, #32]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	430b      	orrs	r3, r1
 80085ae:	491b      	ldr	r1, [pc, #108]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008624 <HAL_RCC_OscConfig+0x4cc>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ba:	f7fc fe6f 	bl	800529c <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c2:	f7fc fe6b 	bl	800529c <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e03d      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f0      	beq.n	80085c2 <HAL_RCC_OscConfig+0x46a>
 80085e0:	e035      	b.n	800864e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <HAL_RCC_OscConfig+0x4cc>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e8:	f7fc fe58 	bl	800529c <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085ee:	e008      	b.n	8008602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085f0:	f7fc fe54 	bl	800529c <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e026      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008602:	4b06      	ldr	r3, [pc, #24]	@ (800861c <HAL_RCC_OscConfig+0x4c4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1f0      	bne.n	80085f0 <HAL_RCC_OscConfig+0x498>
 800860e:	e01e      	b.n	800864e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d107      	bne.n	8008628 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e019      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
 800861c:	40021000 	.word	0x40021000
 8008620:	40007000 	.word	0x40007000
 8008624:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <HAL_RCC_OscConfig+0x500>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	429a      	cmp	r2, r3
 800863a:	d106      	bne.n	800864a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008646:	429a      	cmp	r2, r3
 8008648:	d001      	beq.n	800864e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40021000 	.word	0x40021000

0800865c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0d0      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008670:	4b6a      	ldr	r3, [pc, #424]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d910      	bls.n	80086a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867e:	4b67      	ldr	r3, [pc, #412]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f023 0207 	bic.w	r2, r3, #7
 8008686:	4965      	ldr	r1, [pc, #404]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868e:	4b63      	ldr	r3, [pc, #396]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d001      	beq.n	80086a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0b8      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d020      	beq.n	80086ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086b8:	4b59      	ldr	r3, [pc, #356]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4a58      	ldr	r2, [pc, #352]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80086c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0308 	and.w	r3, r3, #8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086d0:	4b53      	ldr	r3, [pc, #332]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a52      	ldr	r2, [pc, #328]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80086da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086dc:	4b50      	ldr	r3, [pc, #320]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	494d      	ldr	r1, [pc, #308]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d040      	beq.n	800877c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d107      	bne.n	8008712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008702:	4b47      	ldr	r3, [pc, #284]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d115      	bne.n	800873a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e07f      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d107      	bne.n	800872a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800871a:	4b41      	ldr	r3, [pc, #260]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e073      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800872a:	4b3d      	ldr	r3, [pc, #244]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e06b      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800873a:	4b39      	ldr	r3, [pc, #228]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f023 0203 	bic.w	r2, r3, #3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4936      	ldr	r1, [pc, #216]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 8008748:	4313      	orrs	r3, r2
 800874a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800874c:	f7fc fda6 	bl	800529c <HAL_GetTick>
 8008750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008752:	e00a      	b.n	800876a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008754:	f7fc fda2 	bl	800529c <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008762:	4293      	cmp	r3, r2
 8008764:	d901      	bls.n	800876a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e053      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800876a:	4b2d      	ldr	r3, [pc, #180]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f003 020c 	and.w	r2, r3, #12
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	429a      	cmp	r2, r3
 800877a:	d1eb      	bne.n	8008754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800877c:	4b27      	ldr	r3, [pc, #156]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d210      	bcs.n	80087ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800878a:	4b24      	ldr	r3, [pc, #144]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f023 0207 	bic.w	r2, r3, #7
 8008792:	4922      	ldr	r1, [pc, #136]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	4313      	orrs	r3, r2
 8008798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800879a:	4b20      	ldr	r3, [pc, #128]	@ (800881c <HAL_RCC_ClockConfig+0x1c0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d001      	beq.n	80087ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e032      	b.n	8008812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d008      	beq.n	80087ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087b8:	4b19      	ldr	r3, [pc, #100]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4916      	ldr	r1, [pc, #88]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087d6:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	490e      	ldr	r1, [pc, #56]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80087ea:	f000 f821 	bl	8008830 <HAL_RCC_GetSysClockFreq>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008820 <HAL_RCC_ClockConfig+0x1c4>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	091b      	lsrs	r3, r3, #4
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	490a      	ldr	r1, [pc, #40]	@ (8008824 <HAL_RCC_ClockConfig+0x1c8>)
 80087fc:	5ccb      	ldrb	r3, [r1, r3]
 80087fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008802:	4a09      	ldr	r2, [pc, #36]	@ (8008828 <HAL_RCC_ClockConfig+0x1cc>)
 8008804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008806:	4b09      	ldr	r3, [pc, #36]	@ (800882c <HAL_RCC_ClockConfig+0x1d0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f7fc fd04 	bl	8005218 <HAL_InitTick>

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40022000 	.word	0x40022000
 8008820:	40021000 	.word	0x40021000
 8008824:	0800f79c 	.word	0x0800f79c
 8008828:	2000025c 	.word	0x2000025c
 800882c:	20000260 	.word	0x20000260

08008830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800884a:	4b1e      	ldr	r3, [pc, #120]	@ (80088c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	2b04      	cmp	r3, #4
 8008858:	d002      	beq.n	8008860 <HAL_RCC_GetSysClockFreq+0x30>
 800885a:	2b08      	cmp	r3, #8
 800885c:	d003      	beq.n	8008866 <HAL_RCC_GetSysClockFreq+0x36>
 800885e:	e027      	b.n	80088b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008860:	4b19      	ldr	r3, [pc, #100]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008862:	613b      	str	r3, [r7, #16]
      break;
 8008864:	e027      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	0c9b      	lsrs	r3, r3, #18
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	4a17      	ldr	r2, [pc, #92]	@ (80088cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8008870:	5cd3      	ldrb	r3, [r2, r3]
 8008872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800887e:	4b11      	ldr	r3, [pc, #68]	@ (80088c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	0c5b      	lsrs	r3, r3, #17
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	4a11      	ldr	r2, [pc, #68]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800888a:	5cd3      	ldrb	r3, [r2, r3]
 800888c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a0d      	ldr	r2, [pc, #52]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008892:	fb03 f202 	mul.w	r2, r3, r2
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	fbb2 f3f3 	udiv	r3, r2, r3
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e004      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a0c      	ldr	r2, [pc, #48]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	613b      	str	r3, [r7, #16]
      break;
 80088ae:	e002      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80088b2:	613b      	str	r3, [r7, #16]
      break;
 80088b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088b6:	693b      	ldr	r3, [r7, #16]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40021000 	.word	0x40021000
 80088c8:	007a1200 	.word	0x007a1200
 80088cc:	0800ff2c 	.word	0x0800ff2c
 80088d0:	0800ff3c 	.word	0x0800ff3c
 80088d4:	003d0900 	.word	0x003d0900

080088d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088dc:	4b02      	ldr	r3, [pc, #8]	@ (80088e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80088de:	681b      	ldr	r3, [r3, #0]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bc80      	pop	{r7}
 80088e6:	4770      	bx	lr
 80088e8:	2000025c 	.word	0x2000025c

080088ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088f0:	f7ff fff2 	bl	80088d8 <HAL_RCC_GetHCLKFreq>
 80088f4:	4602      	mov	r2, r0
 80088f6:	4b05      	ldr	r3, [pc, #20]	@ (800890c <HAL_RCC_GetPCLK1Freq+0x20>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	4903      	ldr	r1, [pc, #12]	@ (8008910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008902:	5ccb      	ldrb	r3, [r1, r3]
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008908:	4618      	mov	r0, r3
 800890a:	bd80      	pop	{r7, pc}
 800890c:	40021000 	.word	0x40021000
 8008910:	0800f7ac 	.word	0x0800f7ac

08008914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008918:	f7ff ffde 	bl	80088d8 <HAL_RCC_GetHCLKFreq>
 800891c:	4602      	mov	r2, r0
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	0adb      	lsrs	r3, r3, #11
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	4903      	ldr	r1, [pc, #12]	@ (8008938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800892a:	5ccb      	ldrb	r3, [r1, r3]
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40021000 	.word	0x40021000
 8008938:	0800f7ac 	.word	0x0800f7ac

0800893c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008944:	4b0a      	ldr	r3, [pc, #40]	@ (8008970 <RCC_Delay+0x34>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a0a      	ldr	r2, [pc, #40]	@ (8008974 <RCC_Delay+0x38>)
 800894a:	fba2 2303 	umull	r2, r3, r2, r3
 800894e:	0a5b      	lsrs	r3, r3, #9
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	fb02 f303 	mul.w	r3, r2, r3
 8008956:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008958:	bf00      	nop
  }
  while (Delay --);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1e5a      	subs	r2, r3, #1
 800895e:	60fa      	str	r2, [r7, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f9      	bne.n	8008958 <RCC_Delay+0x1c>
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr
 8008970:	2000025c 	.word	0x2000025c
 8008974:	10624dd3 	.word	0x10624dd3

08008978 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d07d      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008998:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10d      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a4:	4b4c      	ldr	r3, [pc, #304]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	4a4b      	ldr	r2, [pc, #300]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	61d3      	str	r3, [r2, #28]
 80089b0:	4b49      	ldr	r3, [pc, #292]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089bc:	2301      	movs	r3, #1
 80089be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c0:	4b46      	ldr	r3, [pc, #280]	@ (8008adc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d118      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089cc:	4b43      	ldr	r3, [pc, #268]	@ (8008adc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a42      	ldr	r2, [pc, #264]	@ (8008adc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089d8:	f7fc fc60 	bl	800529c <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089de:	e008      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e0:	f7fc fc5c 	bl	800529c <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b64      	cmp	r3, #100	@ 0x64
 80089ec:	d901      	bls.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e06d      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f2:	4b3a      	ldr	r3, [pc, #232]	@ (8008adc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f0      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089fe:	4b36      	ldr	r3, [pc, #216]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d02e      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d027      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a26:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008a32:	4a29      	ldr	r2, [pc, #164]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d014      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a42:	f7fc fc2b 	bl	800529c <HAL_GetTick>
 8008a46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a48:	e00a      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a4a:	f7fc fc27 	bl	800529c <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e036      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0ee      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	4917      	ldr	r1, [pc, #92]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d105      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a84:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	4a13      	ldr	r2, [pc, #76]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d008      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	490b      	ldr	r1, [pc, #44]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0310 	and.w	r3, r3, #16
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008aba:	4b07      	ldr	r3, [pc, #28]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	4904      	ldr	r1, [pc, #16]	@ (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40021000 	.word	0x40021000
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	42420440 	.word	0x42420440

08008ae4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	2300      	movs	r3, #0
 8008afe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d00a      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	f200 808a 	bhi.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d045      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d075      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008b1a:	e082      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008b1c:	4b46      	ldr	r3, [pc, #280]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008b22:	4b45      	ldr	r3, [pc, #276]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d07b      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	0c9b      	lsrs	r3, r3, #18
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	4a41      	ldr	r2, [pc, #260]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008b38:	5cd3      	ldrb	r3, [r2, r3]
 8008b3a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d015      	beq.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b46:	4b3c      	ldr	r3, [pc, #240]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	0c5b      	lsrs	r3, r3, #17
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	4a3b      	ldr	r2, [pc, #236]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008b52:	5cd3      	ldrb	r3, [r2, r3]
 8008b54:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00d      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008b60:	4a38      	ldr	r2, [pc, #224]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e004      	b.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4a34      	ldr	r2, [pc, #208]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
 8008b7a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b88:	d102      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	61bb      	str	r3, [r7, #24]
      break;
 8008b8e:	e04a      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	4a2d      	ldr	r2, [pc, #180]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008b96:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	61bb      	str	r3, [r7, #24]
      break;
 8008b9e:	e042      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008ba0:	4b25      	ldr	r3, [pc, #148]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bb0:	d108      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008bbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	e01f      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bce:	d109      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008bd0:	4b19      	ldr	r3, [pc, #100]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008bdc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	e00f      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bee:	d11c      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008bf0:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d016      	beq.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008bfc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008c00:	61bb      	str	r3, [r7, #24]
      break;
 8008c02:	e012      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008c04:	e011      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008c06:	f7ff fe85 	bl	8008914 <HAL_RCC_GetPCLK2Freq>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	0b9b      	lsrs	r3, r3, #14
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	3301      	adds	r3, #1
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1e:	61bb      	str	r3, [r7, #24]
      break;
 8008c20:	e004      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c22:	bf00      	nop
 8008c24:	e002      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c26:	bf00      	nop
 8008c28:	e000      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c2a:	bf00      	nop
    }
  }
  return (frequency);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	40021000 	.word	0x40021000
 8008c3c:	0800ff40 	.word	0x0800ff40
 8008c40:	0800ff50 	.word	0x0800ff50
 8008c44:	007a1200 	.word	0x007a1200
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	aaaaaaab 	.word	0xaaaaaaab

08008c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e041      	b.n	8008ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fb fd2c 	bl	80046d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f000 fe4c 	bl	800992c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d001      	beq.n	8008d08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e032      	b.n	8008d6e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <HAL_TIM_Base_Start+0x88>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00e      	beq.n	8008d38 <HAL_TIM_Base_Start+0x48>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	d009      	beq.n	8008d38 <HAL_TIM_Base_Start+0x48>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a14      	ldr	r2, [pc, #80]	@ (8008d7c <HAL_TIM_Base_Start+0x8c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_TIM_Base_Start+0x48>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a13      	ldr	r2, [pc, #76]	@ (8008d80 <HAL_TIM_Base_Start+0x90>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d111      	bne.n	8008d5c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b06      	cmp	r3, #6
 8008d48:	d010      	beq.n	8008d6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f042 0201 	orr.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5a:	e007      	b.n	8008d6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0201 	orr.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr
 8008d78:	40012c00 	.word	0x40012c00
 8008d7c:	40000400 	.word	0x40000400
 8008d80:	40000800 	.word	0x40000800

08008d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e041      	b.n	8008e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fb fcb0 	bl	8004710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f000 fdb2 	bl	800992c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <HAL_TIM_PWM_Start+0x24>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	bf14      	ite	ne
 8008e40:	2301      	movne	r3, #1
 8008e42:	2300      	moveq	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	e022      	b.n	8008e8e <HAL_TIM_PWM_Start+0x6a>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d109      	bne.n	8008e62 <HAL_TIM_PWM_Start+0x3e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	bf14      	ite	ne
 8008e5a:	2301      	movne	r3, #1
 8008e5c:	2300      	moveq	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	e015      	b.n	8008e8e <HAL_TIM_PWM_Start+0x6a>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d109      	bne.n	8008e7c <HAL_TIM_PWM_Start+0x58>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	bf14      	ite	ne
 8008e74:	2301      	movne	r3, #1
 8008e76:	2300      	moveq	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	e008      	b.n	8008e8e <HAL_TIM_PWM_Start+0x6a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	bf14      	ite	ne
 8008e88:	2301      	movne	r3, #1
 8008e8a:	2300      	moveq	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e05e      	b.n	8008f54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_TIM_PWM_Start+0x82>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ea4:	e013      	b.n	8008ece <HAL_TIM_PWM_Start+0xaa>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d104      	bne.n	8008eb6 <HAL_TIM_PWM_Start+0x92>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eb4:	e00b      	b.n	8008ece <HAL_TIM_PWM_Start+0xaa>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d104      	bne.n	8008ec6 <HAL_TIM_PWM_Start+0xa2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ec4:	e003      	b.n	8008ece <HAL_TIM_PWM_Start+0xaa>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f8c1 	bl	800a05e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f5c <HAL_TIM_PWM_Start+0x138>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d107      	bne.n	8008ef6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a18      	ldr	r2, [pc, #96]	@ (8008f5c <HAL_TIM_PWM_Start+0x138>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIM_PWM_Start+0xfa>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f08:	d009      	beq.n	8008f1e <HAL_TIM_PWM_Start+0xfa>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a14      	ldr	r2, [pc, #80]	@ (8008f60 <HAL_TIM_PWM_Start+0x13c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_TIM_PWM_Start+0xfa>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a12      	ldr	r2, [pc, #72]	@ (8008f64 <HAL_TIM_PWM_Start+0x140>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d111      	bne.n	8008f42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	d010      	beq.n	8008f52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f40:	e007      	b.n	8008f52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0201 	orr.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40012c00 	.word	0x40012c00
 8008f60:	40000400 	.word	0x40000400
 8008f64:	40000800 	.word	0x40000800

08008f68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e041      	b.n	8008ffe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f839 	bl	8009006 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f000 fcc0 	bl	800992c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800900e:	bf00      	nop
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <HAL_TIM_IC_Start_IT+0x1e>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009032:	b2db      	uxtb	r3, r3
 8009034:	e013      	b.n	800905e <HAL_TIM_IC_Start_IT+0x46>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b04      	cmp	r3, #4
 800903a:	d104      	bne.n	8009046 <HAL_TIM_IC_Start_IT+0x2e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009042:	b2db      	uxtb	r3, r3
 8009044:	e00b      	b.n	800905e <HAL_TIM_IC_Start_IT+0x46>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d104      	bne.n	8009056 <HAL_TIM_IC_Start_IT+0x3e>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009052:	b2db      	uxtb	r3, r3
 8009054:	e003      	b.n	800905e <HAL_TIM_IC_Start_IT+0x46>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905c:	b2db      	uxtb	r3, r3
 800905e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <HAL_TIM_IC_Start_IT+0x58>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e013      	b.n	8009098 <HAL_TIM_IC_Start_IT+0x80>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b04      	cmp	r3, #4
 8009074:	d104      	bne.n	8009080 <HAL_TIM_IC_Start_IT+0x68>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800907c:	b2db      	uxtb	r3, r3
 800907e:	e00b      	b.n	8009098 <HAL_TIM_IC_Start_IT+0x80>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d104      	bne.n	8009090 <HAL_TIM_IC_Start_IT+0x78>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800908c:	b2db      	uxtb	r3, r3
 800908e:	e003      	b.n	8009098 <HAL_TIM_IC_Start_IT+0x80>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009096:	b2db      	uxtb	r3, r3
 8009098:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d102      	bne.n	80090a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80090a0:	7b7b      	ldrb	r3, [r7, #13]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d001      	beq.n	80090aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e0b8      	b.n	800921c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_IC_Start_IT+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090b8:	e013      	b.n	80090e2 <HAL_TIM_IC_Start_IT+0xca>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d104      	bne.n	80090ca <HAL_TIM_IC_Start_IT+0xb2>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090c8:	e00b      	b.n	80090e2 <HAL_TIM_IC_Start_IT+0xca>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d104      	bne.n	80090da <HAL_TIM_IC_Start_IT+0xc2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090d8:	e003      	b.n	80090e2 <HAL_TIM_IC_Start_IT+0xca>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <HAL_TIM_IC_Start_IT+0xda>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090f0:	e013      	b.n	800911a <HAL_TIM_IC_Start_IT+0x102>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d104      	bne.n	8009102 <HAL_TIM_IC_Start_IT+0xea>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009100:	e00b      	b.n	800911a <HAL_TIM_IC_Start_IT+0x102>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b08      	cmp	r3, #8
 8009106:	d104      	bne.n	8009112 <HAL_TIM_IC_Start_IT+0xfa>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009110:	e003      	b.n	800911a <HAL_TIM_IC_Start_IT+0x102>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b0c      	cmp	r3, #12
 800911e:	d841      	bhi.n	80091a4 <HAL_TIM_IC_Start_IT+0x18c>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <HAL_TIM_IC_Start_IT+0x110>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800915d 	.word	0x0800915d
 800912c:	080091a5 	.word	0x080091a5
 8009130:	080091a5 	.word	0x080091a5
 8009134:	080091a5 	.word	0x080091a5
 8009138:	0800916f 	.word	0x0800916f
 800913c:	080091a5 	.word	0x080091a5
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091a5 	.word	0x080091a5
 8009148:	08009181 	.word	0x08009181
 800914c:	080091a5 	.word	0x080091a5
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080091a5 	.word	0x080091a5
 8009158:	08009193 	.word	0x08009193
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0202 	orr.w	r2, r2, #2
 800916a:	60da      	str	r2, [r3, #12]
      break;
 800916c:	e01d      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0204 	orr.w	r2, r2, #4
 800917c:	60da      	str	r2, [r3, #12]
      break;
 800917e:	e014      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0208 	orr.w	r2, r2, #8
 800918e:	60da      	str	r2, [r3, #12]
      break;
 8009190:	e00b      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0210 	orr.w	r2, r2, #16
 80091a0:	60da      	str	r2, [r3, #12]
      break;
 80091a2:	e002      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	73fb      	strb	r3, [r7, #15]
      break;
 80091a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d134      	bne.n	800921a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 ff50 	bl	800a05e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a18      	ldr	r2, [pc, #96]	@ (8009224 <HAL_TIM_IC_Start_IT+0x20c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00e      	beq.n	80091e6 <HAL_TIM_IC_Start_IT+0x1ce>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d0:	d009      	beq.n	80091e6 <HAL_TIM_IC_Start_IT+0x1ce>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a14      	ldr	r2, [pc, #80]	@ (8009228 <HAL_TIM_IC_Start_IT+0x210>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <HAL_TIM_IC_Start_IT+0x1ce>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a12      	ldr	r2, [pc, #72]	@ (800922c <HAL_TIM_IC_Start_IT+0x214>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d111      	bne.n	800920a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	d010      	beq.n	800921a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0201 	orr.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009208:	e007      	b.n	800921a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0201 	orr.w	r2, r2, #1
 8009218:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40000400 	.word	0x40000400
 800922c:	40000800 	.word	0x40000800

08009230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d020      	beq.n	8009294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01b      	beq.n	8009294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f06f 0202 	mvn.w	r2, #2
 8009264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 feb8 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8009280:	e005      	b.n	800928e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fb37 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fb3d 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d020      	beq.n	80092e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01b      	beq.n	80092e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0204 	mvn.w	r2, #4
 80092b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7f8 fe92 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 80092cc:	e005      	b.n	80092da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb11 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fb17 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d020      	beq.n	800932c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01b      	beq.n	800932c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f06f 0208 	mvn.w	r2, #8
 80092fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2204      	movs	r2, #4
 8009302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7f8 fe6c 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8009318:	e005      	b.n	8009326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 faeb 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 faf1 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	2b00      	cmp	r3, #0
 8009334:	d020      	beq.n	8009378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 0310 	and.w	r3, r3, #16
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01b      	beq.n	8009378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f06f 0210 	mvn.w	r2, #16
 8009348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2208      	movs	r2, #8
 800934e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7f8 fe46 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8009364:	e005      	b.n	8009372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fac5 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 facb 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0201 	mvn.w	r2, #1
 8009394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 faa4 	bl	80098e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00c      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80093b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fedb 	bl	800a176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00c      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d007      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa9b 	bl	800991a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00c      	beq.n	8009408 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0220 	mvn.w	r2, #32
 8009400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 feae 	bl	800a164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_TIM_IC_ConfigChannel+0x1e>
 800942a:	2302      	movs	r3, #2
 800942c:	e088      	b.n	8009540 <HAL_TIM_IC_ConfigChannel+0x130>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11b      	bne.n	8009474 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800944c:	f000 fc64 	bl	8009d18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699a      	ldr	r2, [r3, #24]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 020c 	bic.w	r2, r2, #12
 800945e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6999      	ldr	r1, [r3, #24]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	619a      	str	r2, [r3, #24]
 8009472:	e060      	b.n	8009536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d11c      	bne.n	80094b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800948a:	f000 fccd 	bl	8009e28 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800949c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	021a      	lsls	r2, r3, #8
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	619a      	str	r2, [r3, #24]
 80094b2:	e040      	b.n	8009536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d11b      	bne.n	80094f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80094ca:	f000 fd18 	bl	8009efe <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 020c 	bic.w	r2, r2, #12
 80094dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69d9      	ldr	r1, [r3, #28]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	61da      	str	r2, [r3, #28]
 80094f0:	e021      	b.n	8009536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b0c      	cmp	r3, #12
 80094f6:	d11c      	bne.n	8009532 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009508:	f000 fd34 	bl	8009f74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69da      	ldr	r2, [r3, #28]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800951a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69d9      	ldr	r1, [r3, #28]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	021a      	lsls	r2, r3, #8
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	61da      	str	r2, [r3, #28]
 8009530:	e001      	b.n	8009536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009562:	2302      	movs	r3, #2
 8009564:	e0ae      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b0c      	cmp	r3, #12
 8009572:	f200 809f 	bhi.w	80096b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	080095b1 	.word	0x080095b1
 8009580:	080096b5 	.word	0x080096b5
 8009584:	080096b5 	.word	0x080096b5
 8009588:	080096b5 	.word	0x080096b5
 800958c:	080095f1 	.word	0x080095f1
 8009590:	080096b5 	.word	0x080096b5
 8009594:	080096b5 	.word	0x080096b5
 8009598:	080096b5 	.word	0x080096b5
 800959c:	08009633 	.word	0x08009633
 80095a0:	080096b5 	.word	0x080096b5
 80095a4:	080096b5 	.word	0x080096b5
 80095a8:	080096b5 	.word	0x080096b5
 80095ac:	08009673 	.word	0x08009673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fa26 	bl	8009a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0208 	orr.w	r2, r2, #8
 80095ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0204 	bic.w	r2, r2, #4
 80095da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6999      	ldr	r1, [r3, #24]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	619a      	str	r2, [r3, #24]
      break;
 80095ee:	e064      	b.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fa6c 	bl	8009ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800960a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800961a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	021a      	lsls	r2, r3, #8
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	619a      	str	r2, [r3, #24]
      break;
 8009630:	e043      	b.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fab5 	bl	8009ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69da      	ldr	r2, [r3, #28]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f042 0208 	orr.w	r2, r2, #8
 800964c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69da      	ldr	r2, [r3, #28]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0204 	bic.w	r2, r2, #4
 800965c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69d9      	ldr	r1, [r3, #28]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	61da      	str	r2, [r3, #28]
      break;
 8009670:	e023      	b.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 faff 	bl	8009c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800968c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800969c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69d9      	ldr	r1, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	021a      	lsls	r2, r3, #8
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	61da      	str	r2, [r3, #28]
      break;
 80096b2:	e002      	b.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
      break;
 80096b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_TIM_ConfigClockSource+0x1c>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e0b4      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x186>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800970e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009720:	d03e      	beq.n	80097a0 <HAL_TIM_ConfigClockSource+0xd4>
 8009722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009726:	f200 8087 	bhi.w	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 800972a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800972e:	f000 8086 	beq.w	800983e <HAL_TIM_ConfigClockSource+0x172>
 8009732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009736:	d87f      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009738:	2b70      	cmp	r3, #112	@ 0x70
 800973a:	d01a      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0xa6>
 800973c:	2b70      	cmp	r3, #112	@ 0x70
 800973e:	d87b      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009740:	2b60      	cmp	r3, #96	@ 0x60
 8009742:	d050      	beq.n	80097e6 <HAL_TIM_ConfigClockSource+0x11a>
 8009744:	2b60      	cmp	r3, #96	@ 0x60
 8009746:	d877      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009748:	2b50      	cmp	r3, #80	@ 0x50
 800974a:	d03c      	beq.n	80097c6 <HAL_TIM_ConfigClockSource+0xfa>
 800974c:	2b50      	cmp	r3, #80	@ 0x50
 800974e:	d873      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009750:	2b40      	cmp	r3, #64	@ 0x40
 8009752:	d058      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x13a>
 8009754:	2b40      	cmp	r3, #64	@ 0x40
 8009756:	d86f      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009758:	2b30      	cmp	r3, #48	@ 0x30
 800975a:	d064      	beq.n	8009826 <HAL_TIM_ConfigClockSource+0x15a>
 800975c:	2b30      	cmp	r3, #48	@ 0x30
 800975e:	d86b      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009760:	2b20      	cmp	r3, #32
 8009762:	d060      	beq.n	8009826 <HAL_TIM_ConfigClockSource+0x15a>
 8009764:	2b20      	cmp	r3, #32
 8009766:	d867      	bhi.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d05c      	beq.n	8009826 <HAL_TIM_ConfigClockSource+0x15a>
 800976c:	2b10      	cmp	r3, #16
 800976e:	d05a      	beq.n	8009826 <HAL_TIM_ConfigClockSource+0x15a>
 8009770:	e062      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009782:	f000 fc4d 	bl	800a020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	609a      	str	r2, [r3, #8]
      break;
 800979e:	e04f      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097b0:	f000 fc36 	bl	800a020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097c2:	609a      	str	r2, [r3, #8]
      break;
 80097c4:	e03c      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d2:	461a      	mov	r2, r3
 80097d4:	f000 fafa 	bl	8009dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2150      	movs	r1, #80	@ 0x50
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fc04 	bl	8009fec <TIM_ITRx_SetConfig>
      break;
 80097e4:	e02c      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097f2:	461a      	mov	r2, r3
 80097f4:	f000 fb54 	bl	8009ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2160      	movs	r1, #96	@ 0x60
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fbf4 	bl	8009fec <TIM_ITRx_SetConfig>
      break;
 8009804:	e01c      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009812:	461a      	mov	r2, r3
 8009814:	f000 fada 	bl	8009dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2140      	movs	r1, #64	@ 0x40
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fbe4 	bl	8009fec <TIM_ITRx_SetConfig>
      break;
 8009824:	e00c      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f000 fbdb 	bl	8009fec <TIM_ITRx_SetConfig>
      break;
 8009836:	e003      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
      break;
 800983c:	e000      	b.n	8009840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800983e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b0c      	cmp	r3, #12
 800986e:	d831      	bhi.n	80098d4 <HAL_TIM_ReadCapturedValue+0x78>
 8009870:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098ad 	.word	0x080098ad
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098d5 	.word	0x080098d5
 8009884:	080098d5 	.word	0x080098d5
 8009888:	080098b7 	.word	0x080098b7
 800988c:	080098d5 	.word	0x080098d5
 8009890:	080098d5 	.word	0x080098d5
 8009894:	080098d5 	.word	0x080098d5
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098d5 	.word	0x080098d5
 80098a0:	080098d5 	.word	0x080098d5
 80098a4:	080098d5 	.word	0x080098d5
 80098a8:	080098cb 	.word	0x080098cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b2:	60fb      	str	r3, [r7, #12]

      break;
 80098b4:	e00f      	b.n	80098d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098bc:	60fb      	str	r3, [r7, #12]

      break;
 80098be:	e00a      	b.n	80098d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	60fb      	str	r3, [r7, #12]

      break;
 80098c8:	e005      	b.n	80098d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d0:	60fb      	str	r3, [r7, #12]

      break;
 80098d2:	e000      	b.n	80098d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80098d4:	bf00      	nop
  }

  return tmpreg;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop

080098e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bc80      	pop	{r7}
 80098f4:	4770      	bx	lr

080098f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr

08009908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr

0800991a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a2f      	ldr	r2, [pc, #188]	@ (80099fc <TIM_Base_SetConfig+0xd0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00b      	beq.n	800995c <TIM_Base_SetConfig+0x30>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994a:	d007      	beq.n	800995c <TIM_Base_SetConfig+0x30>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a2c      	ldr	r2, [pc, #176]	@ (8009a00 <TIM_Base_SetConfig+0xd4>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d003      	beq.n	800995c <TIM_Base_SetConfig+0x30>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a2b      	ldr	r2, [pc, #172]	@ (8009a04 <TIM_Base_SetConfig+0xd8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d108      	bne.n	800996e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4313      	orrs	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a22      	ldr	r2, [pc, #136]	@ (80099fc <TIM_Base_SetConfig+0xd0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d00b      	beq.n	800998e <TIM_Base_SetConfig+0x62>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800997c:	d007      	beq.n	800998e <TIM_Base_SetConfig+0x62>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a1f      	ldr	r2, [pc, #124]	@ (8009a00 <TIM_Base_SetConfig+0xd4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d003      	beq.n	800998e <TIM_Base_SetConfig+0x62>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a1e      	ldr	r2, [pc, #120]	@ (8009a04 <TIM_Base_SetConfig+0xd8>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d108      	bne.n	80099a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a0d      	ldr	r2, [pc, #52]	@ (80099fc <TIM_Base_SetConfig+0xd0>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d103      	bne.n	80099d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	691a      	ldr	r2, [r3, #16]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f023 0201 	bic.w	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	611a      	str	r2, [r3, #16]
  }
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr
 80099fc:	40012c00 	.word	0x40012c00
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800

08009a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	f023 0201 	bic.w	r2, r3, #1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0303 	bic.w	r3, r3, #3
 8009a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f023 0302 	bic.w	r3, r3, #2
 8009a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad0 <TIM_OC1_SetConfig+0xc8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d10c      	bne.n	8009a7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0308 	bic.w	r3, r3, #8
 8009a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f023 0304 	bic.w	r3, r3, #4
 8009a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a13      	ldr	r2, [pc, #76]	@ (8009ad0 <TIM_OC1_SetConfig+0xc8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d111      	bne.n	8009aaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bc80      	pop	{r7}
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40012c00 	.word	0x40012c00

08009ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	f023 0210 	bic.w	r2, r3, #16
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	021b      	lsls	r3, r3, #8
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f023 0320 	bic.w	r3, r3, #32
 8009b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba4 <TIM_OC2_SetConfig+0xd0>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d10d      	bne.n	8009b50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	011b      	lsls	r3, r3, #4
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a14      	ldr	r2, [pc, #80]	@ (8009ba4 <TIM_OC2_SetConfig+0xd0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d113      	bne.n	8009b80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr
 8009ba4:	40012c00 	.word	0x40012c00

08009ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1d      	ldr	r2, [pc, #116]	@ (8009c78 <TIM_OC3_SetConfig+0xd0>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d10d      	bne.n	8009c22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a14      	ldr	r2, [pc, #80]	@ (8009c78 <TIM_OC3_SetConfig+0xd0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d113      	bne.n	8009c52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	621a      	str	r2, [r3, #32]
}
 8009c6c:	bf00      	nop
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bc80      	pop	{r7}
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	40012c00 	.word	0x40012c00

08009c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	031b      	lsls	r3, r3, #12
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009d14 <TIM_OC4_SetConfig+0x98>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d109      	bne.n	8009cf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	019b      	lsls	r3, r3, #6
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	621a      	str	r2, [r3, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr
 8009d14:	40012c00 	.word	0x40012c00

08009d18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	f023 0201 	bic.w	r2, r3, #1
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4a1f      	ldr	r2, [pc, #124]	@ (8009dc0 <TIM_TI1_SetConfig+0xa8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00b      	beq.n	8009d5e <TIM_TI1_SetConfig+0x46>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4c:	d007      	beq.n	8009d5e <TIM_TI1_SetConfig+0x46>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4a1c      	ldr	r2, [pc, #112]	@ (8009dc4 <TIM_TI1_SetConfig+0xac>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d003      	beq.n	8009d5e <TIM_TI1_SetConfig+0x46>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc8 <TIM_TI1_SetConfig+0xb0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d101      	bne.n	8009d62 <TIM_TI1_SetConfig+0x4a>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e000      	b.n	8009d64 <TIM_TI1_SetConfig+0x4c>
 8009d62:	2300      	movs	r3, #0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e003      	b.n	8009d82 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f023 030a 	bic.w	r3, r3, #10
 8009d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f003 030a 	and.w	r3, r3, #10
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	621a      	str	r2, [r3, #32]
}
 8009db6:	bf00      	nop
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr
 8009dc0:	40012c00 	.word	0x40012c00
 8009dc4:	40000400 	.word	0x40000400
 8009dc8:	40000800 	.word	0x40000800

08009dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f023 0201 	bic.w	r2, r3, #1
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f023 030a 	bic.w	r3, r3, #10
 8009e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bc80      	pop	{r7}
 8009e26:	4770      	bx	lr

08009e28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	f023 0210 	bic.w	r2, r3, #16
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	031b      	lsls	r3, r3, #12
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	621a      	str	r2, [r3, #32]
}
 8009e96:	bf00      	nop
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0210 	bic.w	r2, r3, #16
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	031b      	lsls	r3, r3, #12
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009edc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	621a      	str	r2, [r3, #32]
}
 8009ef4:	bf00      	nop
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr

08009efe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b087      	sub	sp, #28
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
 8009f0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	021b      	lsls	r3, r3, #8
 8009f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	021b      	lsls	r3, r3, #8
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009fb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	031b      	lsls	r3, r3, #12
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	031b      	lsls	r3, r3, #12
 8009fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	621a      	str	r2, [r3, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	f043 0307 	orr.w	r3, r3, #7
 800a00e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	609a      	str	r2, [r3, #8]
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc80      	pop	{r7}
 800a01e:	4770      	bx	lr

0800a020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	021a      	lsls	r2, r3, #8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	431a      	orrs	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4313      	orrs	r3, r2
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	609a      	str	r2, [r3, #8]
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr

0800a05e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a05e:	b480      	push	{r7}
 800a060:	b087      	sub	sp, #28
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f003 031f 	and.w	r3, r3, #31
 800a070:	2201      	movs	r2, #1
 800a072:	fa02 f303 	lsl.w	r3, r2, r3
 800a076:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a1a      	ldr	r2, [r3, #32]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	43db      	mvns	r3, r3
 800a080:	401a      	ands	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1a      	ldr	r2, [r3, #32]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	431a      	orrs	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	621a      	str	r2, [r3, #32]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e046      	b.n	800a14e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a16      	ldr	r2, [pc, #88]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00e      	beq.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10c:	d009      	beq.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a12      	ldr	r2, [pc, #72]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d004      	beq.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a10      	ldr	r2, [pc, #64]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d10c      	bne.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	4313      	orrs	r3, r2
 800a132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	40000400 	.word	0x40000400
 800a160:	40000800 	.word	0x40000800

0800a164 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr

0800a176 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a17e:	bf00      	nop
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr

0800a188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e042      	b.n	800a220 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fa fb70 	bl	8004894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2224      	movs	r2, #36	@ 0x24
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fdb7 	bl	800ad40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695a      	ldr	r2, [r3, #20]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	@ 0x28
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	4613      	mov	r3, r2
 800a236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b20      	cmp	r3, #32
 800a246:	d175      	bne.n	800a334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <HAL_UART_Transmit+0x2c>
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e06e      	b.n	800a336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2221      	movs	r2, #33	@ 0x21
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a266:	f7fb f819 	bl	800529c <HAL_GetTick>
 800a26a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	88fa      	ldrh	r2, [r7, #6]
 800a270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	88fa      	ldrh	r2, [r7, #6]
 800a276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a280:	d108      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e003      	b.n	800a29c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a29c:	e02e      	b.n	800a2fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2180      	movs	r1, #128	@ 0x80
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fb1c 	bl	800a8e6 <UART_WaitOnFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e03a      	b.n	800a336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e007      	b.n	800a2ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1cb      	bne.n	800a29e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	2140      	movs	r1, #64	@ 0x40
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fae8 	bl	800a8e6 <UART_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e006      	b.n	800a336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	e000      	b.n	800a336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3720      	adds	r7, #32
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	4613      	mov	r3, r2
 800a34a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b20      	cmp	r3, #32
 800a356:	d112      	bne.n	800a37e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <HAL_UART_Receive_IT+0x26>
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e00b      	b.n	800a380 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a36e:	88fb      	ldrh	r3, [r7, #6]
 800a370:	461a      	mov	r2, r3
 800a372:	68b9      	ldr	r1, [r7, #8]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fb0f 	bl	800a998 <UART_Start_Receive_IT>
 800a37a:	4603      	mov	r3, r0
 800a37c:	e000      	b.n	800a380 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a37e:	2302      	movs	r3, #2
  }
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b0ba      	sub	sp, #232	@ 0xe8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a3c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10f      	bne.n	800a3ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d009      	beq.n	800a3ee <HAL_UART_IRQHandler+0x66>
 800a3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3de:	f003 0320 	and.w	r3, r3, #32
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fbec 	bl	800abc4 <UART_Receive_IT>
      return;
 800a3ec:	e25b      	b.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a3ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 80de 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x22c>
 800a3f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a408:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 80d1 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <HAL_UART_IRQHandler+0xae>
 800a41e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a426:	2b00      	cmp	r3, #0
 800a428:	d005      	beq.n	800a436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a42e:	f043 0201 	orr.w	r2, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00b      	beq.n	800a45a <HAL_UART_IRQHandler+0xd2>
 800a442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a452:	f043 0202 	orr.w	r2, r3, #2
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <HAL_UART_IRQHandler+0xf6>
 800a466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a476:	f043 0204 	orr.w	r2, r3, #4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d011      	beq.n	800a4ae <HAL_UART_IRQHandler+0x126>
 800a48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b00      	cmp	r3, #0
 800a494:	d105      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a6:	f043 0208 	orr.w	r2, r3, #8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 81f2 	beq.w	800a89c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d008      	beq.n	800a4d6 <HAL_UART_IRQHandler+0x14e>
 800a4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4c8:	f003 0320 	and.w	r3, r3, #32
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fb77 	bl	800abc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bf14      	ite	ne
 800a4e4:	2301      	movne	r3, #1
 800a4e6:	2300      	moveq	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d103      	bne.n	800a502 <HAL_UART_IRQHandler+0x17a>
 800a4fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d04f      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fa81 	bl	800aa0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d041      	beq.n	800a59a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3314      	adds	r3, #20
 800a51c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a52c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3314      	adds	r3, #20
 800a53e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a54e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a55a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1d9      	bne.n	800a516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d013      	beq.n	800a592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a56e:	4a7e      	ldr	r2, [pc, #504]	@ (800a768 <HAL_UART_IRQHandler+0x3e0>)
 800a570:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a576:	4618      	mov	r0, r3
 800a578:	f7fb fe90 	bl	800629c <HAL_DMA_Abort_IT>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a590:	e00e      	b.n	800a5b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f993 	bl	800a8be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a598:	e00a      	b.n	800a5b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f98f 	bl	800a8be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a0:	e006      	b.n	800a5b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f98b 	bl	800a8be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a5ae:	e175      	b.n	800a89c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b0:	bf00      	nop
    return;
 800a5b2:	e173      	b.n	800a89c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	f040 814f 	bne.w	800a85c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 8148 	beq.w	800a85c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8141 	beq.w	800a85c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60bb      	str	r3, [r7, #8]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60bb      	str	r3, [r7, #8]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	60bb      	str	r3, [r7, #8]
 800a5ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 80b6 	beq.w	800a76c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a60c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 8145 	beq.w	800a8a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a61a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a61e:	429a      	cmp	r2, r3
 800a620:	f080 813e 	bcs.w	800a8a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a62a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	2b20      	cmp	r3, #32
 800a634:	f000 8088 	beq.w	800a748 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	330c      	adds	r3, #12
 800a63e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a646:	e853 3f00 	ldrex	r3, [r3]
 800a64a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a656:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	330c      	adds	r3, #12
 800a660:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a664:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a668:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a670:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a67c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1d9      	bne.n	800a638 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3314      	adds	r3, #20
 800a68a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a696:	f023 0301 	bic.w	r3, r3, #1
 800a69a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e1      	bne.n	800a684 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3314      	adds	r3, #20
 800a6c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3314      	adds	r3, #20
 800a6e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a6e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a6ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a6f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e3      	bne.n	800a6c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	330c      	adds	r3, #12
 800a70c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a718:	f023 0310 	bic.w	r3, r3, #16
 800a71c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	330c      	adds	r3, #12
 800a726:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a72a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a72c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a732:	e841 2300 	strex	r3, r2, [r1]
 800a736:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1e3      	bne.n	800a706 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a742:	4618      	mov	r0, r3
 800a744:	f7fb fd6e 	bl	8006224 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a756:	b29b      	uxth	r3, r3
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f8b6 	bl	800a8d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a764:	e09c      	b.n	800a8a0 <HAL_UART_IRQHandler+0x518>
 800a766:	bf00      	nop
 800a768:	0800aacf 	.word	0x0800aacf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a774:	b29b      	uxth	r3, r3
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a780:	b29b      	uxth	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 808e 	beq.w	800a8a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 8089 	beq.w	800a8a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	330c      	adds	r3, #12
 800a798:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a7b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e3      	bne.n	800a792 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3314      	adds	r3, #20
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f023 0301 	bic.w	r3, r3, #1
 800a7e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a7ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800a7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e3      	bne.n	800a7ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	330c      	adds	r3, #12
 800a816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0310 	bic.w	r3, r3, #16
 800a826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	330c      	adds	r3, #12
 800a830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a834:	61fa      	str	r2, [r7, #28]
 800a836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	69b9      	ldr	r1, [r7, #24]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	617b      	str	r3, [r7, #20]
   return(result);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e3      	bne.n	800a810 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a84e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f83b 	bl	800a8d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a85a:	e023      	b.n	800a8a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a864:	2b00      	cmp	r3, #0
 800a866:	d009      	beq.n	800a87c <HAL_UART_IRQHandler+0x4f4>
 800a868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a86c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f93e 	bl	800aaf6 <UART_Transmit_IT>
    return;
 800a87a:	e014      	b.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00e      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
 800a888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f97d 	bl	800ab94 <UART_EndTransmit_IT>
    return;
 800a89a:	e004      	b.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a89c:	bf00      	nop
 800a89e:	e002      	b.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a8a0:	bf00      	nop
 800a8a2:	e000      	b.n	800a8a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a8a4:	bf00      	nop
  }
}
 800a8a6:	37e8      	adds	r7, #232	@ 0xe8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bc80      	pop	{r7}
 800a8bc:	4770      	bx	lr

0800a8be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr

0800a8e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	603b      	str	r3, [r7, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f6:	e03b      	b.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d037      	beq.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a900:	f7fa fccc 	bl	800529c <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	6a3a      	ldr	r2, [r7, #32]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d302      	bcc.n	800a916 <UART_WaitOnFlagUntilTimeout+0x30>
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e03a      	b.n	800a990 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d023      	beq.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b80      	cmp	r3, #128	@ 0x80
 800a92c:	d020      	beq.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b40      	cmp	r3, #64	@ 0x40
 800a932:	d01d      	beq.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b08      	cmp	r3, #8
 800a940:	d116      	bne.n	800a970 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f856 	bl	800aa0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2208      	movs	r2, #8
 800a962:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e00f      	b.n	800a990 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	4013      	ands	r3, r2
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	bf0c      	ite	eq
 800a980:	2301      	moveq	r3, #1
 800a982:	2300      	movne	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d0b4      	beq.n	800a8f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	88fa      	ldrh	r2, [r7, #6]
 800a9b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2222      	movs	r2, #34	@ 0x22
 800a9c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f042 0201 	orr.w	r2, r2, #1
 800a9ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0220 	orr.w	r2, r2, #32
 800a9fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr

0800aa0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b095      	sub	sp, #84	@ 0x54
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	330c      	adds	r3, #12
 800aa18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	330c      	adds	r3, #12
 800aa30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa32:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e5      	bne.n	800aa12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3314      	adds	r3, #20
 800aa64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e5      	bne.n	800aa46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d119      	bne.n	800aab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	330c      	adds	r3, #12
 800aa88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f023 0310 	bic.w	r3, r3, #16
 800aa98:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa2:	61ba      	str	r2, [r7, #24]
 800aaa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	6979      	ldr	r1, [r7, #20]
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	613b      	str	r3, [r7, #16]
   return(result);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e5      	bne.n	800aa82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2220      	movs	r2, #32
 800aaba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aac4:	bf00      	nop
 800aac6:	3754      	adds	r7, #84	@ 0x54
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr

0800aace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fee8 	bl	800a8be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b21      	cmp	r3, #33	@ 0x21
 800ab08:	d13e      	bne.n	800ab88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab12:	d114      	bne.n	800ab3e <UART_Transmit_IT+0x48>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d110      	bne.n	800ab3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	1c9a      	adds	r2, r3, #2
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	621a      	str	r2, [r3, #32]
 800ab3c:	e008      	b.n	800ab50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	1c59      	adds	r1, r3, #1
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6211      	str	r1, [r2, #32]
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10f      	bne.n	800ab84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e000      	b.n	800ab8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bc80      	pop	{r7}
 800ab92:	4770      	bx	lr

0800ab94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2220      	movs	r2, #32
 800abb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fe79 	bl	800a8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	@ 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b22      	cmp	r3, #34	@ 0x22
 800abd6:	f040 80ae 	bne.w	800ad36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abe2:	d117      	bne.n	800ac14 <UART_Receive_IT+0x50>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d113      	bne.n	800ac14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abec:	2300      	movs	r3, #0
 800abee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0c:	1c9a      	adds	r2, r3, #2
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac12:	e026      	b.n	800ac62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac26:	d007      	beq.n	800ac38 <UART_Receive_IT+0x74>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <UART_Receive_IT+0x82>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d106      	bne.n	800ac46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e008      	b.n	800ac58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d15d      	bne.n	800ad32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 0220 	bic.w	r2, r2, #32
 800ac84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695a      	ldr	r2, [r3, #20]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0201 	bic.w	r2, r2, #1
 800aca4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d135      	bne.n	800ad28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	330c      	adds	r3, #12
 800acc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	613b      	str	r3, [r7, #16]
   return(result);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f023 0310 	bic.w	r3, r3, #16
 800acd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	330c      	adds	r3, #12
 800ace0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace2:	623a      	str	r2, [r7, #32]
 800ace4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	69f9      	ldr	r1, [r7, #28]
 800ace8:	6a3a      	ldr	r2, [r7, #32]
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	61bb      	str	r3, [r7, #24]
   return(result);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b10      	cmp	r3, #16
 800ad02:	d10a      	bne.n	800ad1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fdd5 	bl	800a8d0 <HAL_UARTEx_RxEventCallback>
 800ad26:	e002      	b.n	800ad2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f7 fc1f 	bl	800256c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e002      	b.n	800ad38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	e000      	b.n	800ad38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ad36:	2302      	movs	r3, #2
  }
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3730      	adds	r7, #48	@ 0x30
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689a      	ldr	r2, [r3, #8]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	431a      	orrs	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ad7a:	f023 030c 	bic.w	r3, r3, #12
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	6812      	ldr	r2, [r2, #0]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	430b      	orrs	r3, r1
 800ad86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a2c      	ldr	r2, [pc, #176]	@ (800ae54 <UART_SetConfig+0x114>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d103      	bne.n	800adb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ada8:	f7fd fdb4 	bl	8008914 <HAL_RCC_GetPCLK2Freq>
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	e002      	b.n	800adb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800adb0:	f7fd fd9c 	bl	80088ec <HAL_RCC_GetPCLK1Freq>
 800adb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4613      	mov	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	009a      	lsls	r2, r3, #2
 800adc0:	441a      	add	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adcc:	4a22      	ldr	r2, [pc, #136]	@ (800ae58 <UART_SetConfig+0x118>)
 800adce:	fba2 2303 	umull	r2, r3, r2, r3
 800add2:	095b      	lsrs	r3, r3, #5
 800add4:	0119      	lsls	r1, r3, #4
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009a      	lsls	r2, r3, #2
 800ade0:	441a      	add	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	fbb2 f2f3 	udiv	r2, r2, r3
 800adec:	4b1a      	ldr	r3, [pc, #104]	@ (800ae58 <UART_SetConfig+0x118>)
 800adee:	fba3 0302 	umull	r0, r3, r3, r2
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	2064      	movs	r0, #100	@ 0x64
 800adf6:	fb00 f303 	mul.w	r3, r0, r3
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	3332      	adds	r3, #50	@ 0x32
 800ae00:	4a15      	ldr	r2, [pc, #84]	@ (800ae58 <UART_SetConfig+0x118>)
 800ae02:	fba2 2303 	umull	r2, r3, r2, r3
 800ae06:	095b      	lsrs	r3, r3, #5
 800ae08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae0c:	4419      	add	r1, r3
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	009a      	lsls	r2, r3, #2
 800ae18:	441a      	add	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae24:	4b0c      	ldr	r3, [pc, #48]	@ (800ae58 <UART_SetConfig+0x118>)
 800ae26:	fba3 0302 	umull	r0, r3, r3, r2
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	2064      	movs	r0, #100	@ 0x64
 800ae2e:	fb00 f303 	mul.w	r3, r0, r3
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	3332      	adds	r3, #50	@ 0x32
 800ae38:	4a07      	ldr	r2, [pc, #28]	@ (800ae58 <UART_SetConfig+0x118>)
 800ae3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3e:	095b      	lsrs	r3, r3, #5
 800ae40:	f003 020f 	and.w	r2, r3, #15
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	440a      	add	r2, r1
 800ae4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	40013800 	.word	0x40013800
 800ae58:	51eb851f 	.word	0x51eb851f

0800ae5c <atoi>:
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	2100      	movs	r1, #0
 800ae60:	f000 b87a 	b.w	800af58 <strtol>

0800ae64 <_strtol_l.isra.0>:
 800ae64:	2b24      	cmp	r3, #36	@ 0x24
 800ae66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae6a:	4686      	mov	lr, r0
 800ae6c:	4690      	mov	r8, r2
 800ae6e:	d801      	bhi.n	800ae74 <_strtol_l.isra.0+0x10>
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d106      	bne.n	800ae82 <_strtol_l.isra.0+0x1e>
 800ae74:	f001 f858 	bl	800bf28 <__errno>
 800ae78:	2316      	movs	r3, #22
 800ae7a:	6003      	str	r3, [r0, #0]
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	460d      	mov	r5, r1
 800ae84:	4833      	ldr	r0, [pc, #204]	@ (800af54 <_strtol_l.isra.0+0xf0>)
 800ae86:	462a      	mov	r2, r5
 800ae88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae8c:	5d06      	ldrb	r6, [r0, r4]
 800ae8e:	f016 0608 	ands.w	r6, r6, #8
 800ae92:	d1f8      	bne.n	800ae86 <_strtol_l.isra.0+0x22>
 800ae94:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae96:	d110      	bne.n	800aeba <_strtol_l.isra.0+0x56>
 800ae98:	2601      	movs	r6, #1
 800ae9a:	782c      	ldrb	r4, [r5, #0]
 800ae9c:	1c95      	adds	r5, r2, #2
 800ae9e:	f033 0210 	bics.w	r2, r3, #16
 800aea2:	d115      	bne.n	800aed0 <_strtol_l.isra.0+0x6c>
 800aea4:	2c30      	cmp	r4, #48	@ 0x30
 800aea6:	d10d      	bne.n	800aec4 <_strtol_l.isra.0+0x60>
 800aea8:	782a      	ldrb	r2, [r5, #0]
 800aeaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aeae:	2a58      	cmp	r2, #88	@ 0x58
 800aeb0:	d108      	bne.n	800aec4 <_strtol_l.isra.0+0x60>
 800aeb2:	786c      	ldrb	r4, [r5, #1]
 800aeb4:	3502      	adds	r5, #2
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	e00a      	b.n	800aed0 <_strtol_l.isra.0+0x6c>
 800aeba:	2c2b      	cmp	r4, #43	@ 0x2b
 800aebc:	bf04      	itt	eq
 800aebe:	782c      	ldrbeq	r4, [r5, #0]
 800aec0:	1c95      	addeq	r5, r2, #2
 800aec2:	e7ec      	b.n	800ae9e <_strtol_l.isra.0+0x3a>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1f6      	bne.n	800aeb6 <_strtol_l.isra.0+0x52>
 800aec8:	2c30      	cmp	r4, #48	@ 0x30
 800aeca:	bf14      	ite	ne
 800aecc:	230a      	movne	r3, #10
 800aece:	2308      	moveq	r3, #8
 800aed0:	2200      	movs	r2, #0
 800aed2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aed6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aeda:	fbbc f9f3 	udiv	r9, ip, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aee8:	2f09      	cmp	r7, #9
 800aeea:	d80f      	bhi.n	800af0c <_strtol_l.isra.0+0xa8>
 800aeec:	463c      	mov	r4, r7
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	dd1b      	ble.n	800af2a <_strtol_l.isra.0+0xc6>
 800aef2:	1c57      	adds	r7, r2, #1
 800aef4:	d007      	beq.n	800af06 <_strtol_l.isra.0+0xa2>
 800aef6:	4581      	cmp	r9, r0
 800aef8:	d314      	bcc.n	800af24 <_strtol_l.isra.0+0xc0>
 800aefa:	d101      	bne.n	800af00 <_strtol_l.isra.0+0x9c>
 800aefc:	45a2      	cmp	sl, r4
 800aefe:	db11      	blt.n	800af24 <_strtol_l.isra.0+0xc0>
 800af00:	2201      	movs	r2, #1
 800af02:	fb00 4003 	mla	r0, r0, r3, r4
 800af06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af0a:	e7eb      	b.n	800aee4 <_strtol_l.isra.0+0x80>
 800af0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af10:	2f19      	cmp	r7, #25
 800af12:	d801      	bhi.n	800af18 <_strtol_l.isra.0+0xb4>
 800af14:	3c37      	subs	r4, #55	@ 0x37
 800af16:	e7ea      	b.n	800aeee <_strtol_l.isra.0+0x8a>
 800af18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af1c:	2f19      	cmp	r7, #25
 800af1e:	d804      	bhi.n	800af2a <_strtol_l.isra.0+0xc6>
 800af20:	3c57      	subs	r4, #87	@ 0x57
 800af22:	e7e4      	b.n	800aeee <_strtol_l.isra.0+0x8a>
 800af24:	f04f 32ff 	mov.w	r2, #4294967295
 800af28:	e7ed      	b.n	800af06 <_strtol_l.isra.0+0xa2>
 800af2a:	1c53      	adds	r3, r2, #1
 800af2c:	d108      	bne.n	800af40 <_strtol_l.isra.0+0xdc>
 800af2e:	2322      	movs	r3, #34	@ 0x22
 800af30:	4660      	mov	r0, ip
 800af32:	f8ce 3000 	str.w	r3, [lr]
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	d0a0      	beq.n	800ae7e <_strtol_l.isra.0+0x1a>
 800af3c:	1e69      	subs	r1, r5, #1
 800af3e:	e006      	b.n	800af4e <_strtol_l.isra.0+0xea>
 800af40:	b106      	cbz	r6, 800af44 <_strtol_l.isra.0+0xe0>
 800af42:	4240      	negs	r0, r0
 800af44:	f1b8 0f00 	cmp.w	r8, #0
 800af48:	d099      	beq.n	800ae7e <_strtol_l.isra.0+0x1a>
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d1f6      	bne.n	800af3c <_strtol_l.isra.0+0xd8>
 800af4e:	f8c8 1000 	str.w	r1, [r8]
 800af52:	e794      	b.n	800ae7e <_strtol_l.isra.0+0x1a>
 800af54:	0800ff53 	.word	0x0800ff53

0800af58 <strtol>:
 800af58:	4613      	mov	r3, r2
 800af5a:	460a      	mov	r2, r1
 800af5c:	4601      	mov	r1, r0
 800af5e:	4802      	ldr	r0, [pc, #8]	@ (800af68 <strtol+0x10>)
 800af60:	6800      	ldr	r0, [r0, #0]
 800af62:	f7ff bf7f 	b.w	800ae64 <_strtol_l.isra.0>
 800af66:	bf00      	nop
 800af68:	20000274 	.word	0x20000274

0800af6c <_strtoul_l.isra.0>:
 800af6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af70:	4686      	mov	lr, r0
 800af72:	460d      	mov	r5, r1
 800af74:	4e33      	ldr	r6, [pc, #204]	@ (800b044 <_strtoul_l.isra.0+0xd8>)
 800af76:	4628      	mov	r0, r5
 800af78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af7c:	5d37      	ldrb	r7, [r6, r4]
 800af7e:	f017 0708 	ands.w	r7, r7, #8
 800af82:	d1f8      	bne.n	800af76 <_strtoul_l.isra.0+0xa>
 800af84:	2c2d      	cmp	r4, #45	@ 0x2d
 800af86:	d110      	bne.n	800afaa <_strtoul_l.isra.0+0x3e>
 800af88:	2701      	movs	r7, #1
 800af8a:	782c      	ldrb	r4, [r5, #0]
 800af8c:	1c85      	adds	r5, r0, #2
 800af8e:	f033 0010 	bics.w	r0, r3, #16
 800af92:	d115      	bne.n	800afc0 <_strtoul_l.isra.0+0x54>
 800af94:	2c30      	cmp	r4, #48	@ 0x30
 800af96:	d10d      	bne.n	800afb4 <_strtoul_l.isra.0+0x48>
 800af98:	7828      	ldrb	r0, [r5, #0]
 800af9a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800af9e:	2858      	cmp	r0, #88	@ 0x58
 800afa0:	d108      	bne.n	800afb4 <_strtoul_l.isra.0+0x48>
 800afa2:	786c      	ldrb	r4, [r5, #1]
 800afa4:	3502      	adds	r5, #2
 800afa6:	2310      	movs	r3, #16
 800afa8:	e00a      	b.n	800afc0 <_strtoul_l.isra.0+0x54>
 800afaa:	2c2b      	cmp	r4, #43	@ 0x2b
 800afac:	bf04      	itt	eq
 800afae:	782c      	ldrbeq	r4, [r5, #0]
 800afb0:	1c85      	addeq	r5, r0, #2
 800afb2:	e7ec      	b.n	800af8e <_strtoul_l.isra.0+0x22>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1f6      	bne.n	800afa6 <_strtoul_l.isra.0+0x3a>
 800afb8:	2c30      	cmp	r4, #48	@ 0x30
 800afba:	bf14      	ite	ne
 800afbc:	230a      	movne	r3, #10
 800afbe:	2308      	moveq	r3, #8
 800afc0:	f04f 38ff 	mov.w	r8, #4294967295
 800afc4:	fbb8 f8f3 	udiv	r8, r8, r3
 800afc8:	2600      	movs	r6, #0
 800afca:	fb03 f908 	mul.w	r9, r3, r8
 800afce:	4630      	mov	r0, r6
 800afd0:	ea6f 0909 	mvn.w	r9, r9
 800afd4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800afd8:	f1bc 0f09 	cmp.w	ip, #9
 800afdc:	d810      	bhi.n	800b000 <_strtoul_l.isra.0+0x94>
 800afde:	4664      	mov	r4, ip
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	dd1e      	ble.n	800b022 <_strtoul_l.isra.0+0xb6>
 800afe4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800afe8:	d007      	beq.n	800affa <_strtoul_l.isra.0+0x8e>
 800afea:	4580      	cmp	r8, r0
 800afec:	d316      	bcc.n	800b01c <_strtoul_l.isra.0+0xb0>
 800afee:	d101      	bne.n	800aff4 <_strtoul_l.isra.0+0x88>
 800aff0:	45a1      	cmp	r9, r4
 800aff2:	db13      	blt.n	800b01c <_strtoul_l.isra.0+0xb0>
 800aff4:	2601      	movs	r6, #1
 800aff6:	fb00 4003 	mla	r0, r0, r3, r4
 800affa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800affe:	e7e9      	b.n	800afd4 <_strtoul_l.isra.0+0x68>
 800b000:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b004:	f1bc 0f19 	cmp.w	ip, #25
 800b008:	d801      	bhi.n	800b00e <_strtoul_l.isra.0+0xa2>
 800b00a:	3c37      	subs	r4, #55	@ 0x37
 800b00c:	e7e8      	b.n	800afe0 <_strtoul_l.isra.0+0x74>
 800b00e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b012:	f1bc 0f19 	cmp.w	ip, #25
 800b016:	d804      	bhi.n	800b022 <_strtoul_l.isra.0+0xb6>
 800b018:	3c57      	subs	r4, #87	@ 0x57
 800b01a:	e7e1      	b.n	800afe0 <_strtoul_l.isra.0+0x74>
 800b01c:	f04f 36ff 	mov.w	r6, #4294967295
 800b020:	e7eb      	b.n	800affa <_strtoul_l.isra.0+0x8e>
 800b022:	1c73      	adds	r3, r6, #1
 800b024:	d106      	bne.n	800b034 <_strtoul_l.isra.0+0xc8>
 800b026:	2322      	movs	r3, #34	@ 0x22
 800b028:	4630      	mov	r0, r6
 800b02a:	f8ce 3000 	str.w	r3, [lr]
 800b02e:	b932      	cbnz	r2, 800b03e <_strtoul_l.isra.0+0xd2>
 800b030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b034:	b107      	cbz	r7, 800b038 <_strtoul_l.isra.0+0xcc>
 800b036:	4240      	negs	r0, r0
 800b038:	2a00      	cmp	r2, #0
 800b03a:	d0f9      	beq.n	800b030 <_strtoul_l.isra.0+0xc4>
 800b03c:	b106      	cbz	r6, 800b040 <_strtoul_l.isra.0+0xd4>
 800b03e:	1e69      	subs	r1, r5, #1
 800b040:	6011      	str	r1, [r2, #0]
 800b042:	e7f5      	b.n	800b030 <_strtoul_l.isra.0+0xc4>
 800b044:	0800ff53 	.word	0x0800ff53

0800b048 <strtoul>:
 800b048:	4613      	mov	r3, r2
 800b04a:	460a      	mov	r2, r1
 800b04c:	4601      	mov	r1, r0
 800b04e:	4802      	ldr	r0, [pc, #8]	@ (800b058 <strtoul+0x10>)
 800b050:	6800      	ldr	r0, [r0, #0]
 800b052:	f7ff bf8b 	b.w	800af6c <_strtoul_l.isra.0>
 800b056:	bf00      	nop
 800b058:	20000274 	.word	0x20000274

0800b05c <__cvt>:
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b062:	461d      	mov	r5, r3
 800b064:	bfbb      	ittet	lt
 800b066:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b06a:	461d      	movlt	r5, r3
 800b06c:	2300      	movge	r3, #0
 800b06e:	232d      	movlt	r3, #45	@ 0x2d
 800b070:	b088      	sub	sp, #32
 800b072:	4614      	mov	r4, r2
 800b074:	bfb8      	it	lt
 800b076:	4614      	movlt	r4, r2
 800b078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b07a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b07c:	7013      	strb	r3, [r2, #0]
 800b07e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b080:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b084:	f023 0820 	bic.w	r8, r3, #32
 800b088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b08c:	d005      	beq.n	800b09a <__cvt+0x3e>
 800b08e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b092:	d100      	bne.n	800b096 <__cvt+0x3a>
 800b094:	3601      	adds	r6, #1
 800b096:	2302      	movs	r3, #2
 800b098:	e000      	b.n	800b09c <__cvt+0x40>
 800b09a:	2303      	movs	r3, #3
 800b09c:	aa07      	add	r2, sp, #28
 800b09e:	9204      	str	r2, [sp, #16]
 800b0a0:	aa06      	add	r2, sp, #24
 800b0a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b0a6:	e9cd 3600 	strd	r3, r6, [sp]
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	f001 f82b 	bl	800c108 <_dtoa_r>
 800b0b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	d119      	bne.n	800b0ee <__cvt+0x92>
 800b0ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0bc:	07db      	lsls	r3, r3, #31
 800b0be:	d50e      	bpl.n	800b0de <__cvt+0x82>
 800b0c0:	eb00 0906 	add.w	r9, r0, r6
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	f7f5 fc76 	bl	80009bc <__aeabi_dcmpeq>
 800b0d0:	b108      	cbz	r0, 800b0d6 <__cvt+0x7a>
 800b0d2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b0d6:	2230      	movs	r2, #48	@ 0x30
 800b0d8:	9b07      	ldr	r3, [sp, #28]
 800b0da:	454b      	cmp	r3, r9
 800b0dc:	d31e      	bcc.n	800b11c <__cvt+0xc0>
 800b0de:	4638      	mov	r0, r7
 800b0e0:	9b07      	ldr	r3, [sp, #28]
 800b0e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b0e4:	1bdb      	subs	r3, r3, r7
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	b008      	add	sp, #32
 800b0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0f2:	eb00 0906 	add.w	r9, r0, r6
 800b0f6:	d1e5      	bne.n	800b0c4 <__cvt+0x68>
 800b0f8:	7803      	ldrb	r3, [r0, #0]
 800b0fa:	2b30      	cmp	r3, #48	@ 0x30
 800b0fc:	d10a      	bne.n	800b114 <__cvt+0xb8>
 800b0fe:	2200      	movs	r2, #0
 800b100:	2300      	movs	r3, #0
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 fc59 	bl	80009bc <__aeabi_dcmpeq>
 800b10a:	b918      	cbnz	r0, 800b114 <__cvt+0xb8>
 800b10c:	f1c6 0601 	rsb	r6, r6, #1
 800b110:	f8ca 6000 	str.w	r6, [sl]
 800b114:	f8da 3000 	ldr.w	r3, [sl]
 800b118:	4499      	add	r9, r3
 800b11a:	e7d3      	b.n	800b0c4 <__cvt+0x68>
 800b11c:	1c59      	adds	r1, r3, #1
 800b11e:	9107      	str	r1, [sp, #28]
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	e7d9      	b.n	800b0d8 <__cvt+0x7c>

0800b124 <__exponent>:
 800b124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b126:	2900      	cmp	r1, #0
 800b128:	bfb6      	itet	lt
 800b12a:	232d      	movlt	r3, #45	@ 0x2d
 800b12c:	232b      	movge	r3, #43	@ 0x2b
 800b12e:	4249      	neglt	r1, r1
 800b130:	2909      	cmp	r1, #9
 800b132:	7002      	strb	r2, [r0, #0]
 800b134:	7043      	strb	r3, [r0, #1]
 800b136:	dd29      	ble.n	800b18c <__exponent+0x68>
 800b138:	f10d 0307 	add.w	r3, sp, #7
 800b13c:	461d      	mov	r5, r3
 800b13e:	270a      	movs	r7, #10
 800b140:	fbb1 f6f7 	udiv	r6, r1, r7
 800b144:	461a      	mov	r2, r3
 800b146:	fb07 1416 	mls	r4, r7, r6, r1
 800b14a:	3430      	adds	r4, #48	@ 0x30
 800b14c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b150:	460c      	mov	r4, r1
 800b152:	2c63      	cmp	r4, #99	@ 0x63
 800b154:	4631      	mov	r1, r6
 800b156:	f103 33ff 	add.w	r3, r3, #4294967295
 800b15a:	dcf1      	bgt.n	800b140 <__exponent+0x1c>
 800b15c:	3130      	adds	r1, #48	@ 0x30
 800b15e:	1e94      	subs	r4, r2, #2
 800b160:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b164:	4623      	mov	r3, r4
 800b166:	1c41      	adds	r1, r0, #1
 800b168:	42ab      	cmp	r3, r5
 800b16a:	d30a      	bcc.n	800b182 <__exponent+0x5e>
 800b16c:	f10d 0309 	add.w	r3, sp, #9
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	42ac      	cmp	r4, r5
 800b174:	bf88      	it	hi
 800b176:	2300      	movhi	r3, #0
 800b178:	3302      	adds	r3, #2
 800b17a:	4403      	add	r3, r0
 800b17c:	1a18      	subs	r0, r3, r0
 800b17e:	b003      	add	sp, #12
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b182:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b186:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b18a:	e7ed      	b.n	800b168 <__exponent+0x44>
 800b18c:	2330      	movs	r3, #48	@ 0x30
 800b18e:	3130      	adds	r1, #48	@ 0x30
 800b190:	7083      	strb	r3, [r0, #2]
 800b192:	70c1      	strb	r1, [r0, #3]
 800b194:	1d03      	adds	r3, r0, #4
 800b196:	e7f1      	b.n	800b17c <__exponent+0x58>

0800b198 <_printf_float>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	b091      	sub	sp, #68	@ 0x44
 800b19e:	460c      	mov	r4, r1
 800b1a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	f000 fe73 	bl	800be94 <_localeconv_r>
 800b1ae:	6803      	ldr	r3, [r0, #0]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	9308      	str	r3, [sp, #32]
 800b1b4:	f7f4 ffd6 	bl	8000164 <strlen>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b1c2:	3307      	adds	r3, #7
 800b1c4:	f023 0307 	bic.w	r3, r3, #7
 800b1c8:	f103 0208 	add.w	r2, r3, #8
 800b1cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1d0:	f8d4 b000 	ldr.w	fp, [r4]
 800b1d4:	f8c8 2000 	str.w	r2, [r8]
 800b1d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b1e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800b464 <_printf_float+0x2cc>)
 800b1f4:	f7f5 fc14 	bl	8000a20 <__aeabi_dcmpun>
 800b1f8:	bb70      	cbnz	r0, 800b258 <_printf_float+0xc0>
 800b1fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	4b98      	ldr	r3, [pc, #608]	@ (800b464 <_printf_float+0x2cc>)
 800b204:	f7f5 fbee 	bl	80009e4 <__aeabi_dcmple>
 800b208:	bb30      	cbnz	r0, 800b258 <_printf_float+0xc0>
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 fbdd 	bl	80009d0 <__aeabi_dcmplt>
 800b216:	b110      	cbz	r0, 800b21e <_printf_float+0x86>
 800b218:	232d      	movs	r3, #45	@ 0x2d
 800b21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21e:	4a92      	ldr	r2, [pc, #584]	@ (800b468 <_printf_float+0x2d0>)
 800b220:	4b92      	ldr	r3, [pc, #584]	@ (800b46c <_printf_float+0x2d4>)
 800b222:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b226:	bf8c      	ite	hi
 800b228:	4690      	movhi	r8, r2
 800b22a:	4698      	movls	r8, r3
 800b22c:	2303      	movs	r3, #3
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	f02b 0304 	bic.w	r3, fp, #4
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	4633      	mov	r3, r6
 800b23c:	4621      	mov	r1, r4
 800b23e:	4628      	mov	r0, r5
 800b240:	9700      	str	r7, [sp, #0]
 800b242:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b244:	f000 f9d4 	bl	800b5f0 <_printf_common>
 800b248:	3001      	adds	r0, #1
 800b24a:	f040 8090 	bne.w	800b36e <_printf_float+0x1d6>
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295
 800b252:	b011      	add	sp, #68	@ 0x44
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	4642      	mov	r2, r8
 800b25a:	464b      	mov	r3, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 fbde 	bl	8000a20 <__aeabi_dcmpun>
 800b264:	b148      	cbz	r0, 800b27a <_printf_float+0xe2>
 800b266:	464b      	mov	r3, r9
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfb8      	it	lt
 800b26c:	232d      	movlt	r3, #45	@ 0x2d
 800b26e:	4a80      	ldr	r2, [pc, #512]	@ (800b470 <_printf_float+0x2d8>)
 800b270:	bfb8      	it	lt
 800b272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b276:	4b7f      	ldr	r3, [pc, #508]	@ (800b474 <_printf_float+0x2dc>)
 800b278:	e7d3      	b.n	800b222 <_printf_float+0x8a>
 800b27a:	6863      	ldr	r3, [r4, #4]
 800b27c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	d13f      	bne.n	800b304 <_printf_float+0x16c>
 800b284:	2306      	movs	r3, #6
 800b286:	6063      	str	r3, [r4, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	9206      	str	r2, [sp, #24]
 800b292:	aa0e      	add	r2, sp, #56	@ 0x38
 800b294:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b298:	aa0d      	add	r2, sp, #52	@ 0x34
 800b29a:	9203      	str	r2, [sp, #12]
 800b29c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b2a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2a4:	6863      	ldr	r3, [r4, #4]
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	910a      	str	r1, [sp, #40]	@ 0x28
 800b2b0:	f7ff fed4 	bl	800b05c <__cvt>
 800b2b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	2947      	cmp	r1, #71	@ 0x47
 800b2ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b2bc:	d128      	bne.n	800b310 <_printf_float+0x178>
 800b2be:	1cc8      	adds	r0, r1, #3
 800b2c0:	db02      	blt.n	800b2c8 <_printf_float+0x130>
 800b2c2:	6863      	ldr	r3, [r4, #4]
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	dd40      	ble.n	800b34a <_printf_float+0x1b2>
 800b2c8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2cc:	fa5f fa8a 	uxtb.w	sl, sl
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	3901      	subs	r1, #1
 800b2d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2d8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b2da:	f7ff ff23 	bl	800b124 <__exponent>
 800b2de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	1813      	adds	r3, r2, r0
 800b2e4:	2a01      	cmp	r2, #1
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	dc02      	bgt.n	800b2f0 <_printf_float+0x158>
 800b2ea:	6822      	ldr	r2, [r4, #0]
 800b2ec:	07d2      	lsls	r2, r2, #31
 800b2ee:	d501      	bpl.n	800b2f4 <_printf_float+0x15c>
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	6123      	str	r3, [r4, #16]
 800b2f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d09e      	beq.n	800b23a <_printf_float+0xa2>
 800b2fc:	232d      	movs	r3, #45	@ 0x2d
 800b2fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b302:	e79a      	b.n	800b23a <_printf_float+0xa2>
 800b304:	2947      	cmp	r1, #71	@ 0x47
 800b306:	d1bf      	bne.n	800b288 <_printf_float+0xf0>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1bd      	bne.n	800b288 <_printf_float+0xf0>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e7ba      	b.n	800b286 <_printf_float+0xee>
 800b310:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b314:	d9dc      	bls.n	800b2d0 <_printf_float+0x138>
 800b316:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b31a:	d118      	bne.n	800b34e <_printf_float+0x1b6>
 800b31c:	2900      	cmp	r1, #0
 800b31e:	6863      	ldr	r3, [r4, #4]
 800b320:	dd0b      	ble.n	800b33a <_printf_float+0x1a2>
 800b322:	6121      	str	r1, [r4, #16]
 800b324:	b913      	cbnz	r3, 800b32c <_printf_float+0x194>
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	07d0      	lsls	r0, r2, #31
 800b32a:	d502      	bpl.n	800b332 <_printf_float+0x19a>
 800b32c:	3301      	adds	r3, #1
 800b32e:	440b      	add	r3, r1
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b338:	e7dc      	b.n	800b2f4 <_printf_float+0x15c>
 800b33a:	b913      	cbnz	r3, 800b342 <_printf_float+0x1aa>
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	07d2      	lsls	r2, r2, #31
 800b340:	d501      	bpl.n	800b346 <_printf_float+0x1ae>
 800b342:	3302      	adds	r3, #2
 800b344:	e7f4      	b.n	800b330 <_printf_float+0x198>
 800b346:	2301      	movs	r3, #1
 800b348:	e7f2      	b.n	800b330 <_printf_float+0x198>
 800b34a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b350:	4299      	cmp	r1, r3
 800b352:	db05      	blt.n	800b360 <_printf_float+0x1c8>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	6121      	str	r1, [r4, #16]
 800b358:	07d8      	lsls	r0, r3, #31
 800b35a:	d5ea      	bpl.n	800b332 <_printf_float+0x19a>
 800b35c:	1c4b      	adds	r3, r1, #1
 800b35e:	e7e7      	b.n	800b330 <_printf_float+0x198>
 800b360:	2900      	cmp	r1, #0
 800b362:	bfcc      	ite	gt
 800b364:	2201      	movgt	r2, #1
 800b366:	f1c1 0202 	rsble	r2, r1, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	e7e0      	b.n	800b330 <_printf_float+0x198>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	055a      	lsls	r2, r3, #21
 800b372:	d407      	bmi.n	800b384 <_printf_float+0x1ec>
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	4642      	mov	r2, r8
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	d12b      	bne.n	800b3da <_printf_float+0x242>
 800b382:	e764      	b.n	800b24e <_printf_float+0xb6>
 800b384:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b388:	f240 80dc 	bls.w	800b544 <_printf_float+0x3ac>
 800b38c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b390:	2200      	movs	r2, #0
 800b392:	2300      	movs	r3, #0
 800b394:	f7f5 fb12 	bl	80009bc <__aeabi_dcmpeq>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d033      	beq.n	800b404 <_printf_float+0x26c>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	4a35      	ldr	r2, [pc, #212]	@ (800b478 <_printf_float+0x2e0>)
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f af51 	beq.w	800b24e <_printf_float+0xb6>
 800b3ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b3b0:	4543      	cmp	r3, r8
 800b3b2:	db02      	blt.n	800b3ba <_printf_float+0x222>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	07d8      	lsls	r0, r3, #31
 800b3b8:	d50f      	bpl.n	800b3da <_printf_float+0x242>
 800b3ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	f43f af42 	beq.w	800b24e <_printf_float+0xb6>
 800b3ca:	f04f 0900 	mov.w	r9, #0
 800b3ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3d2:	f104 0a1a 	add.w	sl, r4, #26
 800b3d6:	45c8      	cmp	r8, r9
 800b3d8:	dc09      	bgt.n	800b3ee <_printf_float+0x256>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	079b      	lsls	r3, r3, #30
 800b3de:	f100 8102 	bmi.w	800b5e6 <_printf_float+0x44e>
 800b3e2:	68e0      	ldr	r0, [r4, #12]
 800b3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	bfb8      	it	lt
 800b3ea:	4618      	movlt	r0, r3
 800b3ec:	e731      	b.n	800b252 <_printf_float+0xba>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b8      	blx	r7
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f43f af28 	beq.w	800b24e <_printf_float+0xb6>
 800b3fe:	f109 0901 	add.w	r9, r9, #1
 800b402:	e7e8      	b.n	800b3d6 <_printf_float+0x23e>
 800b404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc38      	bgt.n	800b47c <_printf_float+0x2e4>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4631      	mov	r1, r6
 800b40e:	4628      	mov	r0, r5
 800b410:	4a19      	ldr	r2, [pc, #100]	@ (800b478 <_printf_float+0x2e0>)
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	f43f af1a 	beq.w	800b24e <_printf_float+0xb6>
 800b41a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b41e:	ea59 0303 	orrs.w	r3, r9, r3
 800b422:	d102      	bne.n	800b42a <_printf_float+0x292>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	d5d7      	bpl.n	800b3da <_printf_float+0x242>
 800b42a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b42e:	4631      	mov	r1, r6
 800b430:	4628      	mov	r0, r5
 800b432:	47b8      	blx	r7
 800b434:	3001      	adds	r0, #1
 800b436:	f43f af0a 	beq.w	800b24e <_printf_float+0xb6>
 800b43a:	f04f 0a00 	mov.w	sl, #0
 800b43e:	f104 0b1a 	add.w	fp, r4, #26
 800b442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b444:	425b      	negs	r3, r3
 800b446:	4553      	cmp	r3, sl
 800b448:	dc01      	bgt.n	800b44e <_printf_float+0x2b6>
 800b44a:	464b      	mov	r3, r9
 800b44c:	e793      	b.n	800b376 <_printf_float+0x1de>
 800b44e:	2301      	movs	r3, #1
 800b450:	465a      	mov	r2, fp
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	f43f aef8 	beq.w	800b24e <_printf_float+0xb6>
 800b45e:	f10a 0a01 	add.w	sl, sl, #1
 800b462:	e7ee      	b.n	800b442 <_printf_float+0x2aa>
 800b464:	7fefffff 	.word	0x7fefffff
 800b468:	08010057 	.word	0x08010057
 800b46c:	08010053 	.word	0x08010053
 800b470:	0801005f 	.word	0x0801005f
 800b474:	0801005b 	.word	0x0801005b
 800b478:	08010063 	.word	0x08010063
 800b47c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b47e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b482:	4553      	cmp	r3, sl
 800b484:	bfa8      	it	ge
 800b486:	4653      	movge	r3, sl
 800b488:	2b00      	cmp	r3, #0
 800b48a:	4699      	mov	r9, r3
 800b48c:	dc36      	bgt.n	800b4fc <_printf_float+0x364>
 800b48e:	f04f 0b00 	mov.w	fp, #0
 800b492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b496:	f104 021a 	add.w	r2, r4, #26
 800b49a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b49c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b49e:	eba3 0309 	sub.w	r3, r3, r9
 800b4a2:	455b      	cmp	r3, fp
 800b4a4:	dc31      	bgt.n	800b50a <_printf_float+0x372>
 800b4a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4a8:	459a      	cmp	sl, r3
 800b4aa:	dc3a      	bgt.n	800b522 <_printf_float+0x38a>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	07da      	lsls	r2, r3, #31
 800b4b0:	d437      	bmi.n	800b522 <_printf_float+0x38a>
 800b4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4b4:	ebaa 0903 	sub.w	r9, sl, r3
 800b4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800b4be:	4599      	cmp	r9, r3
 800b4c0:	bfa8      	it	ge
 800b4c2:	4699      	movge	r9, r3
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	dc33      	bgt.n	800b532 <_printf_float+0x39a>
 800b4ca:	f04f 0800 	mov.w	r8, #0
 800b4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4d2:	f104 0b1a 	add.w	fp, r4, #26
 800b4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4d8:	ebaa 0303 	sub.w	r3, sl, r3
 800b4dc:	eba3 0309 	sub.w	r3, r3, r9
 800b4e0:	4543      	cmp	r3, r8
 800b4e2:	f77f af7a 	ble.w	800b3da <_printf_float+0x242>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	465a      	mov	r2, fp
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	47b8      	blx	r7
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	f43f aeac 	beq.w	800b24e <_printf_float+0xb6>
 800b4f6:	f108 0801 	add.w	r8, r8, #1
 800b4fa:	e7ec      	b.n	800b4d6 <_printf_float+0x33e>
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4631      	mov	r1, r6
 800b500:	4628      	mov	r0, r5
 800b502:	47b8      	blx	r7
 800b504:	3001      	adds	r0, #1
 800b506:	d1c2      	bne.n	800b48e <_printf_float+0x2f6>
 800b508:	e6a1      	b.n	800b24e <_printf_float+0xb6>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4631      	mov	r1, r6
 800b50e:	4628      	mov	r0, r5
 800b510:	920a      	str	r2, [sp, #40]	@ 0x28
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	f43f ae9a 	beq.w	800b24e <_printf_float+0xb6>
 800b51a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b51c:	f10b 0b01 	add.w	fp, fp, #1
 800b520:	e7bb      	b.n	800b49a <_printf_float+0x302>
 800b522:	4631      	mov	r1, r6
 800b524:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1c0      	bne.n	800b4b2 <_printf_float+0x31a>
 800b530:	e68d      	b.n	800b24e <_printf_float+0xb6>
 800b532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b534:	464b      	mov	r3, r9
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	4442      	add	r2, r8
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	d1c3      	bne.n	800b4ca <_printf_float+0x332>
 800b542:	e684      	b.n	800b24e <_printf_float+0xb6>
 800b544:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b548:	f1ba 0f01 	cmp.w	sl, #1
 800b54c:	dc01      	bgt.n	800b552 <_printf_float+0x3ba>
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d536      	bpl.n	800b5c0 <_printf_float+0x428>
 800b552:	2301      	movs	r3, #1
 800b554:	4642      	mov	r2, r8
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	47b8      	blx	r7
 800b55c:	3001      	adds	r0, #1
 800b55e:	f43f ae76 	beq.w	800b24e <_printf_float+0xb6>
 800b562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae6e 	beq.w	800b24e <_printf_float+0xb6>
 800b572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b576:	2200      	movs	r2, #0
 800b578:	2300      	movs	r3, #0
 800b57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b57e:	f7f5 fa1d 	bl	80009bc <__aeabi_dcmpeq>
 800b582:	b9c0      	cbnz	r0, 800b5b6 <_printf_float+0x41e>
 800b584:	4653      	mov	r3, sl
 800b586:	f108 0201 	add.w	r2, r8, #1
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	d10c      	bne.n	800b5ae <_printf_float+0x416>
 800b594:	e65b      	b.n	800b24e <_printf_float+0xb6>
 800b596:	2301      	movs	r3, #1
 800b598:	465a      	mov	r2, fp
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f ae54 	beq.w	800b24e <_printf_float+0xb6>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	45d0      	cmp	r8, sl
 800b5ac:	dbf3      	blt.n	800b596 <_printf_float+0x3fe>
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b5b4:	e6e0      	b.n	800b378 <_printf_float+0x1e0>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	f104 0b1a 	add.w	fp, r4, #26
 800b5be:	e7f4      	b.n	800b5aa <_printf_float+0x412>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	e7e1      	b.n	800b58a <_printf_float+0x3f2>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	464a      	mov	r2, r9
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae3c 	beq.w	800b24e <_printf_float+0xb6>
 800b5d6:	f108 0801 	add.w	r8, r8, #1
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b5de:	1a5b      	subs	r3, r3, r1
 800b5e0:	4543      	cmp	r3, r8
 800b5e2:	dcf0      	bgt.n	800b5c6 <_printf_float+0x42e>
 800b5e4:	e6fd      	b.n	800b3e2 <_printf_float+0x24a>
 800b5e6:	f04f 0800 	mov.w	r8, #0
 800b5ea:	f104 0919 	add.w	r9, r4, #25
 800b5ee:	e7f4      	b.n	800b5da <_printf_float+0x442>

0800b5f0 <_printf_common>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	4698      	mov	r8, r3
 800b5f8:	688a      	ldr	r2, [r1, #8]
 800b5fa:	690b      	ldr	r3, [r1, #16]
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bfb8      	it	lt
 800b602:	4613      	movlt	r3, r2
 800b604:	6033      	str	r3, [r6, #0]
 800b606:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b60a:	460c      	mov	r4, r1
 800b60c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b610:	b10a      	cbz	r2, 800b616 <_printf_common+0x26>
 800b612:	3301      	adds	r3, #1
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	0699      	lsls	r1, r3, #26
 800b61a:	bf42      	ittt	mi
 800b61c:	6833      	ldrmi	r3, [r6, #0]
 800b61e:	3302      	addmi	r3, #2
 800b620:	6033      	strmi	r3, [r6, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	f015 0506 	ands.w	r5, r5, #6
 800b628:	d106      	bne.n	800b638 <_printf_common+0x48>
 800b62a:	f104 0a19 	add.w	sl, r4, #25
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	6832      	ldr	r2, [r6, #0]
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc2b      	bgt.n	800b690 <_printf_common+0xa0>
 800b638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b63c:	6822      	ldr	r2, [r4, #0]
 800b63e:	3b00      	subs	r3, #0
 800b640:	bf18      	it	ne
 800b642:	2301      	movne	r3, #1
 800b644:	0692      	lsls	r2, r2, #26
 800b646:	d430      	bmi.n	800b6aa <_printf_common+0xba>
 800b648:	4641      	mov	r1, r8
 800b64a:	4638      	mov	r0, r7
 800b64c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b650:	47c8      	blx	r9
 800b652:	3001      	adds	r0, #1
 800b654:	d023      	beq.n	800b69e <_printf_common+0xae>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	f003 0306 	and.w	r3, r3, #6
 800b65e:	2b04      	cmp	r3, #4
 800b660:	bf14      	ite	ne
 800b662:	2500      	movne	r5, #0
 800b664:	6833      	ldreq	r3, [r6, #0]
 800b666:	f04f 0600 	mov.w	r6, #0
 800b66a:	bf08      	it	eq
 800b66c:	68e5      	ldreq	r5, [r4, #12]
 800b66e:	f104 041a 	add.w	r4, r4, #26
 800b672:	bf08      	it	eq
 800b674:	1aed      	subeq	r5, r5, r3
 800b676:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b67a:	bf08      	it	eq
 800b67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b680:	4293      	cmp	r3, r2
 800b682:	bfc4      	itt	gt
 800b684:	1a9b      	subgt	r3, r3, r2
 800b686:	18ed      	addgt	r5, r5, r3
 800b688:	42b5      	cmp	r5, r6
 800b68a:	d11a      	bne.n	800b6c2 <_printf_common+0xd2>
 800b68c:	2000      	movs	r0, #0
 800b68e:	e008      	b.n	800b6a2 <_printf_common+0xb2>
 800b690:	2301      	movs	r3, #1
 800b692:	4652      	mov	r2, sl
 800b694:	4641      	mov	r1, r8
 800b696:	4638      	mov	r0, r7
 800b698:	47c8      	blx	r9
 800b69a:	3001      	adds	r0, #1
 800b69c:	d103      	bne.n	800b6a6 <_printf_common+0xb6>
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	3501      	adds	r5, #1
 800b6a8:	e7c1      	b.n	800b62e <_printf_common+0x3e>
 800b6aa:	2030      	movs	r0, #48	@ 0x30
 800b6ac:	18e1      	adds	r1, r4, r3
 800b6ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6b8:	4422      	add	r2, r4
 800b6ba:	3302      	adds	r3, #2
 800b6bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6c0:	e7c2      	b.n	800b648 <_printf_common+0x58>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	47c8      	blx	r9
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d0e6      	beq.n	800b69e <_printf_common+0xae>
 800b6d0:	3601      	adds	r6, #1
 800b6d2:	e7d9      	b.n	800b688 <_printf_common+0x98>

0800b6d4 <_printf_i>:
 800b6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d8:	7e0f      	ldrb	r7, [r1, #24]
 800b6da:	4691      	mov	r9, r2
 800b6dc:	2f78      	cmp	r7, #120	@ 0x78
 800b6de:	4680      	mov	r8, r0
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	469a      	mov	sl, r3
 800b6e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6ea:	d807      	bhi.n	800b6fc <_printf_i+0x28>
 800b6ec:	2f62      	cmp	r7, #98	@ 0x62
 800b6ee:	d80a      	bhi.n	800b706 <_printf_i+0x32>
 800b6f0:	2f00      	cmp	r7, #0
 800b6f2:	f000 80d1 	beq.w	800b898 <_printf_i+0x1c4>
 800b6f6:	2f58      	cmp	r7, #88	@ 0x58
 800b6f8:	f000 80b8 	beq.w	800b86c <_printf_i+0x198>
 800b6fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b704:	e03a      	b.n	800b77c <_printf_i+0xa8>
 800b706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b70a:	2b15      	cmp	r3, #21
 800b70c:	d8f6      	bhi.n	800b6fc <_printf_i+0x28>
 800b70e:	a101      	add	r1, pc, #4	@ (adr r1, 800b714 <_printf_i+0x40>)
 800b710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b714:	0800b76d 	.word	0x0800b76d
 800b718:	0800b781 	.word	0x0800b781
 800b71c:	0800b6fd 	.word	0x0800b6fd
 800b720:	0800b6fd 	.word	0x0800b6fd
 800b724:	0800b6fd 	.word	0x0800b6fd
 800b728:	0800b6fd 	.word	0x0800b6fd
 800b72c:	0800b781 	.word	0x0800b781
 800b730:	0800b6fd 	.word	0x0800b6fd
 800b734:	0800b6fd 	.word	0x0800b6fd
 800b738:	0800b6fd 	.word	0x0800b6fd
 800b73c:	0800b6fd 	.word	0x0800b6fd
 800b740:	0800b87f 	.word	0x0800b87f
 800b744:	0800b7ab 	.word	0x0800b7ab
 800b748:	0800b839 	.word	0x0800b839
 800b74c:	0800b6fd 	.word	0x0800b6fd
 800b750:	0800b6fd 	.word	0x0800b6fd
 800b754:	0800b8a1 	.word	0x0800b8a1
 800b758:	0800b6fd 	.word	0x0800b6fd
 800b75c:	0800b7ab 	.word	0x0800b7ab
 800b760:	0800b6fd 	.word	0x0800b6fd
 800b764:	0800b6fd 	.word	0x0800b6fd
 800b768:	0800b841 	.word	0x0800b841
 800b76c:	6833      	ldr	r3, [r6, #0]
 800b76e:	1d1a      	adds	r2, r3, #4
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6032      	str	r2, [r6, #0]
 800b774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b77c:	2301      	movs	r3, #1
 800b77e:	e09c      	b.n	800b8ba <_printf_i+0x1e6>
 800b780:	6833      	ldr	r3, [r6, #0]
 800b782:	6820      	ldr	r0, [r4, #0]
 800b784:	1d19      	adds	r1, r3, #4
 800b786:	6031      	str	r1, [r6, #0]
 800b788:	0606      	lsls	r6, r0, #24
 800b78a:	d501      	bpl.n	800b790 <_printf_i+0xbc>
 800b78c:	681d      	ldr	r5, [r3, #0]
 800b78e:	e003      	b.n	800b798 <_printf_i+0xc4>
 800b790:	0645      	lsls	r5, r0, #25
 800b792:	d5fb      	bpl.n	800b78c <_printf_i+0xb8>
 800b794:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b798:	2d00      	cmp	r5, #0
 800b79a:	da03      	bge.n	800b7a4 <_printf_i+0xd0>
 800b79c:	232d      	movs	r3, #45	@ 0x2d
 800b79e:	426d      	negs	r5, r5
 800b7a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7a4:	230a      	movs	r3, #10
 800b7a6:	4858      	ldr	r0, [pc, #352]	@ (800b908 <_printf_i+0x234>)
 800b7a8:	e011      	b.n	800b7ce <_printf_i+0xfa>
 800b7aa:	6821      	ldr	r1, [r4, #0]
 800b7ac:	6833      	ldr	r3, [r6, #0]
 800b7ae:	0608      	lsls	r0, r1, #24
 800b7b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7b4:	d402      	bmi.n	800b7bc <_printf_i+0xe8>
 800b7b6:	0649      	lsls	r1, r1, #25
 800b7b8:	bf48      	it	mi
 800b7ba:	b2ad      	uxthmi	r5, r5
 800b7bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7be:	6033      	str	r3, [r6, #0]
 800b7c0:	bf14      	ite	ne
 800b7c2:	230a      	movne	r3, #10
 800b7c4:	2308      	moveq	r3, #8
 800b7c6:	4850      	ldr	r0, [pc, #320]	@ (800b908 <_printf_i+0x234>)
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ce:	6866      	ldr	r6, [r4, #4]
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	60a6      	str	r6, [r4, #8]
 800b7d4:	db05      	blt.n	800b7e2 <_printf_i+0x10e>
 800b7d6:	6821      	ldr	r1, [r4, #0]
 800b7d8:	432e      	orrs	r6, r5
 800b7da:	f021 0104 	bic.w	r1, r1, #4
 800b7de:	6021      	str	r1, [r4, #0]
 800b7e0:	d04b      	beq.n	800b87a <_printf_i+0x1a6>
 800b7e2:	4616      	mov	r6, r2
 800b7e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7e8:	fb03 5711 	mls	r7, r3, r1, r5
 800b7ec:	5dc7      	ldrb	r7, [r0, r7]
 800b7ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7f2:	462f      	mov	r7, r5
 800b7f4:	42bb      	cmp	r3, r7
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	d9f4      	bls.n	800b7e4 <_printf_i+0x110>
 800b7fa:	2b08      	cmp	r3, #8
 800b7fc:	d10b      	bne.n	800b816 <_printf_i+0x142>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	07df      	lsls	r7, r3, #31
 800b802:	d508      	bpl.n	800b816 <_printf_i+0x142>
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	6861      	ldr	r1, [r4, #4]
 800b808:	4299      	cmp	r1, r3
 800b80a:	bfde      	ittt	le
 800b80c:	2330      	movle	r3, #48	@ 0x30
 800b80e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b812:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b816:	1b92      	subs	r2, r2, r6
 800b818:	6122      	str	r2, [r4, #16]
 800b81a:	464b      	mov	r3, r9
 800b81c:	4621      	mov	r1, r4
 800b81e:	4640      	mov	r0, r8
 800b820:	f8cd a000 	str.w	sl, [sp]
 800b824:	aa03      	add	r2, sp, #12
 800b826:	f7ff fee3 	bl	800b5f0 <_printf_common>
 800b82a:	3001      	adds	r0, #1
 800b82c:	d14a      	bne.n	800b8c4 <_printf_i+0x1f0>
 800b82e:	f04f 30ff 	mov.w	r0, #4294967295
 800b832:	b004      	add	sp, #16
 800b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	f043 0320 	orr.w	r3, r3, #32
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	2778      	movs	r7, #120	@ 0x78
 800b842:	4832      	ldr	r0, [pc, #200]	@ (800b90c <_printf_i+0x238>)
 800b844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	6831      	ldr	r1, [r6, #0]
 800b84c:	061f      	lsls	r7, r3, #24
 800b84e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b852:	d402      	bmi.n	800b85a <_printf_i+0x186>
 800b854:	065f      	lsls	r7, r3, #25
 800b856:	bf48      	it	mi
 800b858:	b2ad      	uxthmi	r5, r5
 800b85a:	6031      	str	r1, [r6, #0]
 800b85c:	07d9      	lsls	r1, r3, #31
 800b85e:	bf44      	itt	mi
 800b860:	f043 0320 	orrmi.w	r3, r3, #32
 800b864:	6023      	strmi	r3, [r4, #0]
 800b866:	b11d      	cbz	r5, 800b870 <_printf_i+0x19c>
 800b868:	2310      	movs	r3, #16
 800b86a:	e7ad      	b.n	800b7c8 <_printf_i+0xf4>
 800b86c:	4826      	ldr	r0, [pc, #152]	@ (800b908 <_printf_i+0x234>)
 800b86e:	e7e9      	b.n	800b844 <_printf_i+0x170>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	f023 0320 	bic.w	r3, r3, #32
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	e7f6      	b.n	800b868 <_printf_i+0x194>
 800b87a:	4616      	mov	r6, r2
 800b87c:	e7bd      	b.n	800b7fa <_printf_i+0x126>
 800b87e:	6833      	ldr	r3, [r6, #0]
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	6961      	ldr	r1, [r4, #20]
 800b886:	6030      	str	r0, [r6, #0]
 800b888:	062e      	lsls	r6, r5, #24
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	d501      	bpl.n	800b892 <_printf_i+0x1be>
 800b88e:	6019      	str	r1, [r3, #0]
 800b890:	e002      	b.n	800b898 <_printf_i+0x1c4>
 800b892:	0668      	lsls	r0, r5, #25
 800b894:	d5fb      	bpl.n	800b88e <_printf_i+0x1ba>
 800b896:	8019      	strh	r1, [r3, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	4616      	mov	r6, r2
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	e7bc      	b.n	800b81a <_printf_i+0x146>
 800b8a0:	6833      	ldr	r3, [r6, #0]
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	6032      	str	r2, [r6, #0]
 800b8a8:	681e      	ldr	r6, [r3, #0]
 800b8aa:	6862      	ldr	r2, [r4, #4]
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f000 fb68 	bl	800bf82 <memchr>
 800b8b2:	b108      	cbz	r0, 800b8b8 <_printf_i+0x1e4>
 800b8b4:	1b80      	subs	r0, r0, r6
 800b8b6:	6060      	str	r0, [r4, #4]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8c2:	e7aa      	b.n	800b81a <_printf_i+0x146>
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	47d0      	blx	sl
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d0ad      	beq.n	800b82e <_printf_i+0x15a>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	079b      	lsls	r3, r3, #30
 800b8d6:	d413      	bmi.n	800b900 <_printf_i+0x22c>
 800b8d8:	68e0      	ldr	r0, [r4, #12]
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	4298      	cmp	r0, r3
 800b8de:	bfb8      	it	lt
 800b8e0:	4618      	movlt	r0, r3
 800b8e2:	e7a6      	b.n	800b832 <_printf_i+0x15e>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	47d0      	blx	sl
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d09d      	beq.n	800b82e <_printf_i+0x15a>
 800b8f2:	3501      	adds	r5, #1
 800b8f4:	68e3      	ldr	r3, [r4, #12]
 800b8f6:	9903      	ldr	r1, [sp, #12]
 800b8f8:	1a5b      	subs	r3, r3, r1
 800b8fa:	42ab      	cmp	r3, r5
 800b8fc:	dcf2      	bgt.n	800b8e4 <_printf_i+0x210>
 800b8fe:	e7eb      	b.n	800b8d8 <_printf_i+0x204>
 800b900:	2500      	movs	r5, #0
 800b902:	f104 0619 	add.w	r6, r4, #25
 800b906:	e7f5      	b.n	800b8f4 <_printf_i+0x220>
 800b908:	08010065 	.word	0x08010065
 800b90c:	08010076 	.word	0x08010076

0800b910 <std>:
 800b910:	2300      	movs	r3, #0
 800b912:	b510      	push	{r4, lr}
 800b914:	4604      	mov	r4, r0
 800b916:	e9c0 3300 	strd	r3, r3, [r0]
 800b91a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b91e:	6083      	str	r3, [r0, #8]
 800b920:	8181      	strh	r1, [r0, #12]
 800b922:	6643      	str	r3, [r0, #100]	@ 0x64
 800b924:	81c2      	strh	r2, [r0, #14]
 800b926:	6183      	str	r3, [r0, #24]
 800b928:	4619      	mov	r1, r3
 800b92a:	2208      	movs	r2, #8
 800b92c:	305c      	adds	r0, #92	@ 0x5c
 800b92e:	f000 fa3f 	bl	800bdb0 <memset>
 800b932:	4b0d      	ldr	r3, [pc, #52]	@ (800b968 <std+0x58>)
 800b934:	6224      	str	r4, [r4, #32]
 800b936:	6263      	str	r3, [r4, #36]	@ 0x24
 800b938:	4b0c      	ldr	r3, [pc, #48]	@ (800b96c <std+0x5c>)
 800b93a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b93c:	4b0c      	ldr	r3, [pc, #48]	@ (800b970 <std+0x60>)
 800b93e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b940:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <std+0x64>)
 800b942:	6323      	str	r3, [r4, #48]	@ 0x30
 800b944:	4b0c      	ldr	r3, [pc, #48]	@ (800b978 <std+0x68>)
 800b946:	429c      	cmp	r4, r3
 800b948:	d006      	beq.n	800b958 <std+0x48>
 800b94a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b94e:	4294      	cmp	r4, r2
 800b950:	d002      	beq.n	800b958 <std+0x48>
 800b952:	33d0      	adds	r3, #208	@ 0xd0
 800b954:	429c      	cmp	r4, r3
 800b956:	d105      	bne.n	800b964 <std+0x54>
 800b958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f000 bb0c 	b.w	800bf7c <__retarget_lock_init_recursive>
 800b964:	bd10      	pop	{r4, pc}
 800b966:	bf00      	nop
 800b968:	0800bc01 	.word	0x0800bc01
 800b96c:	0800bc23 	.word	0x0800bc23
 800b970:	0800bc5b 	.word	0x0800bc5b
 800b974:	0800bc7f 	.word	0x0800bc7f
 800b978:	20000b50 	.word	0x20000b50

0800b97c <stdio_exit_handler>:
 800b97c:	4a02      	ldr	r2, [pc, #8]	@ (800b988 <stdio_exit_handler+0xc>)
 800b97e:	4903      	ldr	r1, [pc, #12]	@ (800b98c <stdio_exit_handler+0x10>)
 800b980:	4803      	ldr	r0, [pc, #12]	@ (800b990 <stdio_exit_handler+0x14>)
 800b982:	f000 b869 	b.w	800ba58 <_fwalk_sglue>
 800b986:	bf00      	nop
 800b988:	20000268 	.word	0x20000268
 800b98c:	0800d951 	.word	0x0800d951
 800b990:	20000278 	.word	0x20000278

0800b994 <cleanup_stdio>:
 800b994:	6841      	ldr	r1, [r0, #4]
 800b996:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c8 <cleanup_stdio+0x34>)
 800b998:	b510      	push	{r4, lr}
 800b99a:	4299      	cmp	r1, r3
 800b99c:	4604      	mov	r4, r0
 800b99e:	d001      	beq.n	800b9a4 <cleanup_stdio+0x10>
 800b9a0:	f001 ffd6 	bl	800d950 <_fflush_r>
 800b9a4:	68a1      	ldr	r1, [r4, #8]
 800b9a6:	4b09      	ldr	r3, [pc, #36]	@ (800b9cc <cleanup_stdio+0x38>)
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	d002      	beq.n	800b9b2 <cleanup_stdio+0x1e>
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f001 ffcf 	bl	800d950 <_fflush_r>
 800b9b2:	68e1      	ldr	r1, [r4, #12]
 800b9b4:	4b06      	ldr	r3, [pc, #24]	@ (800b9d0 <cleanup_stdio+0x3c>)
 800b9b6:	4299      	cmp	r1, r3
 800b9b8:	d004      	beq.n	800b9c4 <cleanup_stdio+0x30>
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c0:	f001 bfc6 	b.w	800d950 <_fflush_r>
 800b9c4:	bd10      	pop	{r4, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000b50 	.word	0x20000b50
 800b9cc:	20000bb8 	.word	0x20000bb8
 800b9d0:	20000c20 	.word	0x20000c20

0800b9d4 <global_stdio_init.part.0>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <global_stdio_init.part.0+0x30>)
 800b9d8:	4c0b      	ldr	r4, [pc, #44]	@ (800ba08 <global_stdio_init.part.0+0x34>)
 800b9da:	4a0c      	ldr	r2, [pc, #48]	@ (800ba0c <global_stdio_init.part.0+0x38>)
 800b9dc:	4620      	mov	r0, r4
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	2104      	movs	r1, #4
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f7ff ff94 	bl	800b910 <std>
 800b9e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	2109      	movs	r1, #9
 800b9f0:	f7ff ff8e 	bl	800b910 <std>
 800b9f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9fe:	2112      	movs	r1, #18
 800ba00:	f7ff bf86 	b.w	800b910 <std>
 800ba04:	20000c88 	.word	0x20000c88
 800ba08:	20000b50 	.word	0x20000b50
 800ba0c:	0800b97d 	.word	0x0800b97d

0800ba10 <__sfp_lock_acquire>:
 800ba10:	4801      	ldr	r0, [pc, #4]	@ (800ba18 <__sfp_lock_acquire+0x8>)
 800ba12:	f000 bab4 	b.w	800bf7e <__retarget_lock_acquire_recursive>
 800ba16:	bf00      	nop
 800ba18:	20000c91 	.word	0x20000c91

0800ba1c <__sfp_lock_release>:
 800ba1c:	4801      	ldr	r0, [pc, #4]	@ (800ba24 <__sfp_lock_release+0x8>)
 800ba1e:	f000 baaf 	b.w	800bf80 <__retarget_lock_release_recursive>
 800ba22:	bf00      	nop
 800ba24:	20000c91 	.word	0x20000c91

0800ba28 <__sinit>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	f7ff fff0 	bl	800ba10 <__sfp_lock_acquire>
 800ba30:	6a23      	ldr	r3, [r4, #32]
 800ba32:	b11b      	cbz	r3, 800ba3c <__sinit+0x14>
 800ba34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba38:	f7ff bff0 	b.w	800ba1c <__sfp_lock_release>
 800ba3c:	4b04      	ldr	r3, [pc, #16]	@ (800ba50 <__sinit+0x28>)
 800ba3e:	6223      	str	r3, [r4, #32]
 800ba40:	4b04      	ldr	r3, [pc, #16]	@ (800ba54 <__sinit+0x2c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f5      	bne.n	800ba34 <__sinit+0xc>
 800ba48:	f7ff ffc4 	bl	800b9d4 <global_stdio_init.part.0>
 800ba4c:	e7f2      	b.n	800ba34 <__sinit+0xc>
 800ba4e:	bf00      	nop
 800ba50:	0800b995 	.word	0x0800b995
 800ba54:	20000c88 	.word	0x20000c88

0800ba58 <_fwalk_sglue>:
 800ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	4688      	mov	r8, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	2600      	movs	r6, #0
 800ba64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba68:	f1b9 0901 	subs.w	r9, r9, #1
 800ba6c:	d505      	bpl.n	800ba7a <_fwalk_sglue+0x22>
 800ba6e:	6824      	ldr	r4, [r4, #0]
 800ba70:	2c00      	cmp	r4, #0
 800ba72:	d1f7      	bne.n	800ba64 <_fwalk_sglue+0xc>
 800ba74:	4630      	mov	r0, r6
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d907      	bls.n	800ba90 <_fwalk_sglue+0x38>
 800ba80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba84:	3301      	adds	r3, #1
 800ba86:	d003      	beq.n	800ba90 <_fwalk_sglue+0x38>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	47c0      	blx	r8
 800ba8e:	4306      	orrs	r6, r0
 800ba90:	3568      	adds	r5, #104	@ 0x68
 800ba92:	e7e9      	b.n	800ba68 <_fwalk_sglue+0x10>

0800ba94 <_puts_r>:
 800ba94:	6a03      	ldr	r3, [r0, #32]
 800ba96:	b570      	push	{r4, r5, r6, lr}
 800ba98:	4605      	mov	r5, r0
 800ba9a:	460e      	mov	r6, r1
 800ba9c:	6884      	ldr	r4, [r0, #8]
 800ba9e:	b90b      	cbnz	r3, 800baa4 <_puts_r+0x10>
 800baa0:	f7ff ffc2 	bl	800ba28 <__sinit>
 800baa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800baa6:	07db      	lsls	r3, r3, #31
 800baa8:	d405      	bmi.n	800bab6 <_puts_r+0x22>
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	0598      	lsls	r0, r3, #22
 800baae:	d402      	bmi.n	800bab6 <_puts_r+0x22>
 800bab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bab2:	f000 fa64 	bl	800bf7e <__retarget_lock_acquire_recursive>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	0719      	lsls	r1, r3, #28
 800baba:	d502      	bpl.n	800bac2 <_puts_r+0x2e>
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d135      	bne.n	800bb2e <_puts_r+0x9a>
 800bac2:	4621      	mov	r1, r4
 800bac4:	4628      	mov	r0, r5
 800bac6:	f000 f91d 	bl	800bd04 <__swsetup_r>
 800baca:	b380      	cbz	r0, 800bb2e <_puts_r+0x9a>
 800bacc:	f04f 35ff 	mov.w	r5, #4294967295
 800bad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bad2:	07da      	lsls	r2, r3, #31
 800bad4:	d405      	bmi.n	800bae2 <_puts_r+0x4e>
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	059b      	lsls	r3, r3, #22
 800bada:	d402      	bmi.n	800bae2 <_puts_r+0x4e>
 800badc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bade:	f000 fa4f 	bl	800bf80 <__retarget_lock_release_recursive>
 800bae2:	4628      	mov	r0, r5
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	da04      	bge.n	800baf4 <_puts_r+0x60>
 800baea:	69a2      	ldr	r2, [r4, #24]
 800baec:	429a      	cmp	r2, r3
 800baee:	dc17      	bgt.n	800bb20 <_puts_r+0x8c>
 800baf0:	290a      	cmp	r1, #10
 800baf2:	d015      	beq.n	800bb20 <_puts_r+0x8c>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	6022      	str	r2, [r4, #0]
 800bafa:	7019      	strb	r1, [r3, #0]
 800bafc:	68a3      	ldr	r3, [r4, #8]
 800bafe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb02:	3b01      	subs	r3, #1
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	2900      	cmp	r1, #0
 800bb08:	d1ed      	bne.n	800bae6 <_puts_r+0x52>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	da11      	bge.n	800bb32 <_puts_r+0x9e>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	210a      	movs	r1, #10
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 f8b7 	bl	800bc86 <__swbuf_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d0d7      	beq.n	800bacc <_puts_r+0x38>
 800bb1c:	250a      	movs	r5, #10
 800bb1e:	e7d7      	b.n	800bad0 <_puts_r+0x3c>
 800bb20:	4622      	mov	r2, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 f8af 	bl	800bc86 <__swbuf_r>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d1e7      	bne.n	800bafc <_puts_r+0x68>
 800bb2c:	e7ce      	b.n	800bacc <_puts_r+0x38>
 800bb2e:	3e01      	subs	r6, #1
 800bb30:	e7e4      	b.n	800bafc <_puts_r+0x68>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	6022      	str	r2, [r4, #0]
 800bb38:	220a      	movs	r2, #10
 800bb3a:	701a      	strb	r2, [r3, #0]
 800bb3c:	e7ee      	b.n	800bb1c <_puts_r+0x88>
	...

0800bb40 <puts>:
 800bb40:	4b02      	ldr	r3, [pc, #8]	@ (800bb4c <puts+0xc>)
 800bb42:	4601      	mov	r1, r0
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	f7ff bfa5 	b.w	800ba94 <_puts_r>
 800bb4a:	bf00      	nop
 800bb4c:	20000274 	.word	0x20000274

0800bb50 <sniprintf>:
 800bb50:	b40c      	push	{r2, r3}
 800bb52:	b530      	push	{r4, r5, lr}
 800bb54:	4b18      	ldr	r3, [pc, #96]	@ (800bbb8 <sniprintf+0x68>)
 800bb56:	1e0c      	subs	r4, r1, #0
 800bb58:	681d      	ldr	r5, [r3, #0]
 800bb5a:	b09d      	sub	sp, #116	@ 0x74
 800bb5c:	da08      	bge.n	800bb70 <sniprintf+0x20>
 800bb5e:	238b      	movs	r3, #139	@ 0x8b
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	b01d      	add	sp, #116	@ 0x74
 800bb68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb6c:	b002      	add	sp, #8
 800bb6e:	4770      	bx	lr
 800bb70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb78:	f04f 0300 	mov.w	r3, #0
 800bb7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb7e:	bf0c      	ite	eq
 800bb80:	4623      	moveq	r3, r4
 800bb82:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	9307      	str	r3, [sp, #28]
 800bb8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb8e:	9002      	str	r0, [sp, #8]
 800bb90:	9006      	str	r0, [sp, #24]
 800bb92:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb96:	4628      	mov	r0, r5
 800bb98:	ab21      	add	r3, sp, #132	@ 0x84
 800bb9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb9c:	a902      	add	r1, sp, #8
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	f001 fd5a 	bl	800d658 <_svfiprintf_r>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	bfbc      	itt	lt
 800bba8:	238b      	movlt	r3, #139	@ 0x8b
 800bbaa:	602b      	strlt	r3, [r5, #0]
 800bbac:	2c00      	cmp	r4, #0
 800bbae:	d0da      	beq.n	800bb66 <sniprintf+0x16>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	9b02      	ldr	r3, [sp, #8]
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e7d6      	b.n	800bb66 <sniprintf+0x16>
 800bbb8:	20000274 	.word	0x20000274

0800bbbc <siprintf>:
 800bbbc:	b40e      	push	{r1, r2, r3}
 800bbbe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	b09d      	sub	sp, #116	@ 0x74
 800bbc8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bbca:	9002      	str	r0, [sp, #8]
 800bbcc:	9006      	str	r0, [sp, #24]
 800bbce:	9107      	str	r1, [sp, #28]
 800bbd0:	9104      	str	r1, [sp, #16]
 800bbd2:	4809      	ldr	r0, [pc, #36]	@ (800bbf8 <siprintf+0x3c>)
 800bbd4:	4909      	ldr	r1, [pc, #36]	@ (800bbfc <siprintf+0x40>)
 800bbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbda:	9105      	str	r1, [sp, #20]
 800bbdc:	6800      	ldr	r0, [r0, #0]
 800bbde:	a902      	add	r1, sp, #8
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bbe4:	f001 fd38 	bl	800d658 <_svfiprintf_r>
 800bbe8:	9b02      	ldr	r3, [sp, #8]
 800bbea:	701c      	strb	r4, [r3, #0]
 800bbec:	b01d      	add	sp, #116	@ 0x74
 800bbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf2:	b003      	add	sp, #12
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	20000274 	.word	0x20000274
 800bbfc:	ffff0208 	.word	0xffff0208

0800bc00 <__sread>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	460c      	mov	r4, r1
 800bc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc08:	f000 f96a 	bl	800bee0 <_read_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	bfab      	itete	ge
 800bc10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc12:	89a3      	ldrhlt	r3, [r4, #12]
 800bc14:	181b      	addge	r3, r3, r0
 800bc16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc1a:	bfac      	ite	ge
 800bc1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc1e:	81a3      	strhlt	r3, [r4, #12]
 800bc20:	bd10      	pop	{r4, pc}

0800bc22 <__swrite>:
 800bc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc26:	461f      	mov	r7, r3
 800bc28:	898b      	ldrh	r3, [r1, #12]
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	05db      	lsls	r3, r3, #23
 800bc2e:	460c      	mov	r4, r1
 800bc30:	4616      	mov	r6, r2
 800bc32:	d505      	bpl.n	800bc40 <__swrite+0x1e>
 800bc34:	2302      	movs	r3, #2
 800bc36:	2200      	movs	r2, #0
 800bc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3c:	f000 f93e 	bl	800bebc <_lseek_r>
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	4632      	mov	r2, r6
 800bc44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc48:	81a3      	strh	r3, [r4, #12]
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc56:	f000 b955 	b.w	800bf04 <_write_r>

0800bc5a <__sseek>:
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc62:	f000 f92b 	bl	800bebc <_lseek_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	bf15      	itete	ne
 800bc6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc76:	81a3      	strheq	r3, [r4, #12]
 800bc78:	bf18      	it	ne
 800bc7a:	81a3      	strhne	r3, [r4, #12]
 800bc7c:	bd10      	pop	{r4, pc}

0800bc7e <__sclose>:
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f000 b90b 	b.w	800be9c <_close_r>

0800bc86 <__swbuf_r>:
 800bc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc88:	460e      	mov	r6, r1
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	b118      	cbz	r0, 800bc98 <__swbuf_r+0x12>
 800bc90:	6a03      	ldr	r3, [r0, #32]
 800bc92:	b90b      	cbnz	r3, 800bc98 <__swbuf_r+0x12>
 800bc94:	f7ff fec8 	bl	800ba28 <__sinit>
 800bc98:	69a3      	ldr	r3, [r4, #24]
 800bc9a:	60a3      	str	r3, [r4, #8]
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	071a      	lsls	r2, r3, #28
 800bca0:	d501      	bpl.n	800bca6 <__swbuf_r+0x20>
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	b943      	cbnz	r3, 800bcb8 <__swbuf_r+0x32>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f82b 	bl	800bd04 <__swsetup_r>
 800bcae:	b118      	cbz	r0, 800bcb8 <__swbuf_r+0x32>
 800bcb0:	f04f 37ff 	mov.w	r7, #4294967295
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	b2f6      	uxtb	r6, r6
 800bcbe:	1a98      	subs	r0, r3, r2
 800bcc0:	6963      	ldr	r3, [r4, #20]
 800bcc2:	4637      	mov	r7, r6
 800bcc4:	4283      	cmp	r3, r0
 800bcc6:	dc05      	bgt.n	800bcd4 <__swbuf_r+0x4e>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f001 fe40 	bl	800d950 <_fflush_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d1ed      	bne.n	800bcb0 <__swbuf_r+0x2a>
 800bcd4:	68a3      	ldr	r3, [r4, #8]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	60a3      	str	r3, [r4, #8]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	701e      	strb	r6, [r3, #0]
 800bce2:	6962      	ldr	r2, [r4, #20]
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d004      	beq.n	800bcf4 <__swbuf_r+0x6e>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	07db      	lsls	r3, r3, #31
 800bcee:	d5e1      	bpl.n	800bcb4 <__swbuf_r+0x2e>
 800bcf0:	2e0a      	cmp	r6, #10
 800bcf2:	d1df      	bne.n	800bcb4 <__swbuf_r+0x2e>
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f001 fe2a 	bl	800d950 <_fflush_r>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d0d9      	beq.n	800bcb4 <__swbuf_r+0x2e>
 800bd00:	e7d6      	b.n	800bcb0 <__swbuf_r+0x2a>
	...

0800bd04 <__swsetup_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4b29      	ldr	r3, [pc, #164]	@ (800bdac <__swsetup_r+0xa8>)
 800bd08:	4605      	mov	r5, r0
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	b118      	cbz	r0, 800bd18 <__swsetup_r+0x14>
 800bd10:	6a03      	ldr	r3, [r0, #32]
 800bd12:	b90b      	cbnz	r3, 800bd18 <__swsetup_r+0x14>
 800bd14:	f7ff fe88 	bl	800ba28 <__sinit>
 800bd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd1c:	0719      	lsls	r1, r3, #28
 800bd1e:	d422      	bmi.n	800bd66 <__swsetup_r+0x62>
 800bd20:	06da      	lsls	r2, r3, #27
 800bd22:	d407      	bmi.n	800bd34 <__swsetup_r+0x30>
 800bd24:	2209      	movs	r2, #9
 800bd26:	602a      	str	r2, [r5, #0]
 800bd28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	e033      	b.n	800bd9c <__swsetup_r+0x98>
 800bd34:	0758      	lsls	r0, r3, #29
 800bd36:	d512      	bpl.n	800bd5e <__swsetup_r+0x5a>
 800bd38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd3a:	b141      	cbz	r1, 800bd4e <__swsetup_r+0x4a>
 800bd3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd40:	4299      	cmp	r1, r3
 800bd42:	d002      	beq.n	800bd4a <__swsetup_r+0x46>
 800bd44:	4628      	mov	r0, r5
 800bd46:	f000 ffb3 	bl	800ccb0 <_free_r>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	2300      	movs	r3, #0
 800bd58:	6063      	str	r3, [r4, #4]
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	f043 0308 	orr.w	r3, r3, #8
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	b94b      	cbnz	r3, 800bd7e <__swsetup_r+0x7a>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd74:	d003      	beq.n	800bd7e <__swsetup_r+0x7a>
 800bd76:	4621      	mov	r1, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f001 fe48 	bl	800da0e <__smakebuf_r>
 800bd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd82:	f013 0201 	ands.w	r2, r3, #1
 800bd86:	d00a      	beq.n	800bd9e <__swsetup_r+0x9a>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	60a2      	str	r2, [r4, #8]
 800bd8c:	6962      	ldr	r2, [r4, #20]
 800bd8e:	4252      	negs	r2, r2
 800bd90:	61a2      	str	r2, [r4, #24]
 800bd92:	6922      	ldr	r2, [r4, #16]
 800bd94:	b942      	cbnz	r2, 800bda8 <__swsetup_r+0xa4>
 800bd96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd9a:	d1c5      	bne.n	800bd28 <__swsetup_r+0x24>
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}
 800bd9e:	0799      	lsls	r1, r3, #30
 800bda0:	bf58      	it	pl
 800bda2:	6962      	ldrpl	r2, [r4, #20]
 800bda4:	60a2      	str	r2, [r4, #8]
 800bda6:	e7f4      	b.n	800bd92 <__swsetup_r+0x8e>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e7f7      	b.n	800bd9c <__swsetup_r+0x98>
 800bdac:	20000274 	.word	0x20000274

0800bdb0 <memset>:
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	4402      	add	r2, r0
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d100      	bne.n	800bdba <memset+0xa>
 800bdb8:	4770      	bx	lr
 800bdba:	f803 1b01 	strb.w	r1, [r3], #1
 800bdbe:	e7f9      	b.n	800bdb4 <memset+0x4>

0800bdc0 <strchr>:
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	b2c9      	uxtb	r1, r1
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdca:	b112      	cbz	r2, 800bdd2 <strchr+0x12>
 800bdcc:	428a      	cmp	r2, r1
 800bdce:	d1f9      	bne.n	800bdc4 <strchr+0x4>
 800bdd0:	4770      	bx	lr
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	bf18      	it	ne
 800bdd6:	2000      	movne	r0, #0
 800bdd8:	4770      	bx	lr
	...

0800bddc <strtok>:
 800bddc:	4b16      	ldr	r3, [pc, #88]	@ (800be38 <strtok+0x5c>)
 800bdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde2:	681f      	ldr	r7, [r3, #0]
 800bde4:	4605      	mov	r5, r0
 800bde6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bde8:	460e      	mov	r6, r1
 800bdea:	b9ec      	cbnz	r4, 800be28 <strtok+0x4c>
 800bdec:	2050      	movs	r0, #80	@ 0x50
 800bdee:	f000 ffa7 	bl	800cd40 <malloc>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	6478      	str	r0, [r7, #68]	@ 0x44
 800bdf6:	b920      	cbnz	r0, 800be02 <strtok+0x26>
 800bdf8:	215b      	movs	r1, #91	@ 0x5b
 800bdfa:	4b10      	ldr	r3, [pc, #64]	@ (800be3c <strtok+0x60>)
 800bdfc:	4810      	ldr	r0, [pc, #64]	@ (800be40 <strtok+0x64>)
 800bdfe:	f000 f8dd 	bl	800bfbc <__assert_func>
 800be02:	e9c0 4400 	strd	r4, r4, [r0]
 800be06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800be12:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800be16:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800be1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800be1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800be22:	6184      	str	r4, [r0, #24]
 800be24:	7704      	strb	r4, [r0, #28]
 800be26:	6244      	str	r4, [r0, #36]	@ 0x24
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be2e:	2301      	movs	r3, #1
 800be30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be34:	f000 b806 	b.w	800be44 <__strtok_r>
 800be38:	20000274 	.word	0x20000274
 800be3c:	08010087 	.word	0x08010087
 800be40:	0801009e 	.word	0x0801009e

0800be44 <__strtok_r>:
 800be44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be46:	4604      	mov	r4, r0
 800be48:	b908      	cbnz	r0, 800be4e <__strtok_r+0xa>
 800be4a:	6814      	ldr	r4, [r2, #0]
 800be4c:	b144      	cbz	r4, 800be60 <__strtok_r+0x1c>
 800be4e:	460f      	mov	r7, r1
 800be50:	4620      	mov	r0, r4
 800be52:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be56:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be5a:	b91e      	cbnz	r6, 800be64 <__strtok_r+0x20>
 800be5c:	b965      	cbnz	r5, 800be78 <__strtok_r+0x34>
 800be5e:	6015      	str	r5, [r2, #0]
 800be60:	2000      	movs	r0, #0
 800be62:	e005      	b.n	800be70 <__strtok_r+0x2c>
 800be64:	42b5      	cmp	r5, r6
 800be66:	d1f6      	bne.n	800be56 <__strtok_r+0x12>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1f0      	bne.n	800be4e <__strtok_r+0xa>
 800be6c:	6014      	str	r4, [r2, #0]
 800be6e:	7003      	strb	r3, [r0, #0]
 800be70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be72:	461c      	mov	r4, r3
 800be74:	e00c      	b.n	800be90 <__strtok_r+0x4c>
 800be76:	b91d      	cbnz	r5, 800be80 <__strtok_r+0x3c>
 800be78:	460e      	mov	r6, r1
 800be7a:	4627      	mov	r7, r4
 800be7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be80:	f816 5b01 	ldrb.w	r5, [r6], #1
 800be84:	42ab      	cmp	r3, r5
 800be86:	d1f6      	bne.n	800be76 <__strtok_r+0x32>
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d0f2      	beq.n	800be72 <__strtok_r+0x2e>
 800be8c:	2300      	movs	r3, #0
 800be8e:	703b      	strb	r3, [r7, #0]
 800be90:	6014      	str	r4, [r2, #0]
 800be92:	e7ed      	b.n	800be70 <__strtok_r+0x2c>

0800be94 <_localeconv_r>:
 800be94:	4800      	ldr	r0, [pc, #0]	@ (800be98 <_localeconv_r+0x4>)
 800be96:	4770      	bx	lr
 800be98:	200003b4 	.word	0x200003b4

0800be9c <_close_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	2300      	movs	r3, #0
 800bea0:	4d05      	ldr	r5, [pc, #20]	@ (800beb8 <_close_r+0x1c>)
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f8 fdf5 	bl	8004a96 <_close>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_close_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_close_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	20000c8c 	.word	0x20000c8c

0800bebc <_lseek_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4604      	mov	r4, r0
 800bec0:	4608      	mov	r0, r1
 800bec2:	4611      	mov	r1, r2
 800bec4:	2200      	movs	r2, #0
 800bec6:	4d05      	ldr	r5, [pc, #20]	@ (800bedc <_lseek_r+0x20>)
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f8 fe07 	bl	8004ade <_lseek>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_lseek_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_lseek_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20000c8c 	.word	0x20000c8c

0800bee0 <_read_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	2200      	movs	r2, #0
 800beea:	4d05      	ldr	r5, [pc, #20]	@ (800bf00 <_read_r+0x20>)
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f8 fd98 	bl	8004a24 <_read>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_read_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_read_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20000c8c 	.word	0x20000c8c

0800bf04 <_write_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4d05      	ldr	r5, [pc, #20]	@ (800bf24 <_write_r+0x20>)
 800bf10:	602a      	str	r2, [r5, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	f7f8 fda3 	bl	8004a5e <_write>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_write_r+0x1e>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_write_r+0x1e>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20000c8c 	.word	0x20000c8c

0800bf28 <__errno>:
 800bf28:	4b01      	ldr	r3, [pc, #4]	@ (800bf30 <__errno+0x8>)
 800bf2a:	6818      	ldr	r0, [r3, #0]
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	20000274 	.word	0x20000274

0800bf34 <__libc_init_array>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	2600      	movs	r6, #0
 800bf38:	4d0c      	ldr	r5, [pc, #48]	@ (800bf6c <__libc_init_array+0x38>)
 800bf3a:	4c0d      	ldr	r4, [pc, #52]	@ (800bf70 <__libc_init_array+0x3c>)
 800bf3c:	1b64      	subs	r4, r4, r5
 800bf3e:	10a4      	asrs	r4, r4, #2
 800bf40:	42a6      	cmp	r6, r4
 800bf42:	d109      	bne.n	800bf58 <__libc_init_array+0x24>
 800bf44:	f002 fdde 	bl	800eb04 <_init>
 800bf48:	2600      	movs	r6, #0
 800bf4a:	4d0a      	ldr	r5, [pc, #40]	@ (800bf74 <__libc_init_array+0x40>)
 800bf4c:	4c0a      	ldr	r4, [pc, #40]	@ (800bf78 <__libc_init_array+0x44>)
 800bf4e:	1b64      	subs	r4, r4, r5
 800bf50:	10a4      	asrs	r4, r4, #2
 800bf52:	42a6      	cmp	r6, r4
 800bf54:	d105      	bne.n	800bf62 <__libc_init_array+0x2e>
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf5c:	4798      	blx	r3
 800bf5e:	3601      	adds	r6, #1
 800bf60:	e7ee      	b.n	800bf40 <__libc_init_array+0xc>
 800bf62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf66:	4798      	blx	r3
 800bf68:	3601      	adds	r6, #1
 800bf6a:	e7f2      	b.n	800bf52 <__libc_init_array+0x1e>
 800bf6c:	080106f8 	.word	0x080106f8
 800bf70:	080106f8 	.word	0x080106f8
 800bf74:	080106f8 	.word	0x080106f8
 800bf78:	080106fc 	.word	0x080106fc

0800bf7c <__retarget_lock_init_recursive>:
 800bf7c:	4770      	bx	lr

0800bf7e <__retarget_lock_acquire_recursive>:
 800bf7e:	4770      	bx	lr

0800bf80 <__retarget_lock_release_recursive>:
 800bf80:	4770      	bx	lr

0800bf82 <memchr>:
 800bf82:	4603      	mov	r3, r0
 800bf84:	b510      	push	{r4, lr}
 800bf86:	b2c9      	uxtb	r1, r1
 800bf88:	4402      	add	r2, r0
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	d101      	bne.n	800bf94 <memchr+0x12>
 800bf90:	2000      	movs	r0, #0
 800bf92:	e003      	b.n	800bf9c <memchr+0x1a>
 800bf94:	7804      	ldrb	r4, [r0, #0]
 800bf96:	3301      	adds	r3, #1
 800bf98:	428c      	cmp	r4, r1
 800bf9a:	d1f6      	bne.n	800bf8a <memchr+0x8>
 800bf9c:	bd10      	pop	{r4, pc}

0800bf9e <memcpy>:
 800bf9e:	440a      	add	r2, r1
 800bfa0:	4291      	cmp	r1, r2
 800bfa2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa6:	d100      	bne.n	800bfaa <memcpy+0xc>
 800bfa8:	4770      	bx	lr
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfb0:	4291      	cmp	r1, r2
 800bfb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfb6:	d1f9      	bne.n	800bfac <memcpy+0xe>
 800bfb8:	bd10      	pop	{r4, pc}
	...

0800bfbc <__assert_func>:
 800bfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfbe:	4614      	mov	r4, r2
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <__assert_func+0x2c>)
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68d8      	ldr	r0, [r3, #12]
 800bfca:	b14c      	cbz	r4, 800bfe0 <__assert_func+0x24>
 800bfcc:	4b07      	ldr	r3, [pc, #28]	@ (800bfec <__assert_func+0x30>)
 800bfce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfd2:	9100      	str	r1, [sp, #0]
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	4906      	ldr	r1, [pc, #24]	@ (800bff0 <__assert_func+0x34>)
 800bfd8:	f001 fce2 	bl	800d9a0 <fiprintf>
 800bfdc:	f001 fda0 	bl	800db20 <abort>
 800bfe0:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <__assert_func+0x38>)
 800bfe2:	461c      	mov	r4, r3
 800bfe4:	e7f3      	b.n	800bfce <__assert_func+0x12>
 800bfe6:	bf00      	nop
 800bfe8:	20000274 	.word	0x20000274
 800bfec:	080100f8 	.word	0x080100f8
 800bff0:	08010105 	.word	0x08010105
 800bff4:	08010133 	.word	0x08010133

0800bff8 <quorem>:
 800bff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	6903      	ldr	r3, [r0, #16]
 800bffe:	690c      	ldr	r4, [r1, #16]
 800c000:	4607      	mov	r7, r0
 800c002:	42a3      	cmp	r3, r4
 800c004:	db7e      	blt.n	800c104 <quorem+0x10c>
 800c006:	3c01      	subs	r4, #1
 800c008:	00a3      	lsls	r3, r4, #2
 800c00a:	f100 0514 	add.w	r5, r0, #20
 800c00e:	f101 0814 	add.w	r8, r1, #20
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c01e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c022:	3301      	adds	r3, #1
 800c024:	429a      	cmp	r2, r3
 800c026:	fbb2 f6f3 	udiv	r6, r2, r3
 800c02a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c02e:	d32e      	bcc.n	800c08e <quorem+0x96>
 800c030:	f04f 0a00 	mov.w	sl, #0
 800c034:	46c4      	mov	ip, r8
 800c036:	46ae      	mov	lr, r5
 800c038:	46d3      	mov	fp, sl
 800c03a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c03e:	b298      	uxth	r0, r3
 800c040:	fb06 a000 	mla	r0, r6, r0, sl
 800c044:	0c1b      	lsrs	r3, r3, #16
 800c046:	0c02      	lsrs	r2, r0, #16
 800c048:	fb06 2303 	mla	r3, r6, r3, r2
 800c04c:	f8de 2000 	ldr.w	r2, [lr]
 800c050:	b280      	uxth	r0, r0
 800c052:	b292      	uxth	r2, r2
 800c054:	1a12      	subs	r2, r2, r0
 800c056:	445a      	add	r2, fp
 800c058:	f8de 0000 	ldr.w	r0, [lr]
 800c05c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c060:	b29b      	uxth	r3, r3
 800c062:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c066:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c06a:	b292      	uxth	r2, r2
 800c06c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c070:	45e1      	cmp	r9, ip
 800c072:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c076:	f84e 2b04 	str.w	r2, [lr], #4
 800c07a:	d2de      	bcs.n	800c03a <quorem+0x42>
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	58eb      	ldr	r3, [r5, r3]
 800c080:	b92b      	cbnz	r3, 800c08e <quorem+0x96>
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	3b04      	subs	r3, #4
 800c086:	429d      	cmp	r5, r3
 800c088:	461a      	mov	r2, r3
 800c08a:	d32f      	bcc.n	800c0ec <quorem+0xf4>
 800c08c:	613c      	str	r4, [r7, #16]
 800c08e:	4638      	mov	r0, r7
 800c090:	f001 f97e 	bl	800d390 <__mcmp>
 800c094:	2800      	cmp	r0, #0
 800c096:	db25      	blt.n	800c0e4 <quorem+0xec>
 800c098:	4629      	mov	r1, r5
 800c09a:	2000      	movs	r0, #0
 800c09c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0a0:	f8d1 c000 	ldr.w	ip, [r1]
 800c0a4:	fa1f fe82 	uxth.w	lr, r2
 800c0a8:	fa1f f38c 	uxth.w	r3, ip
 800c0ac:	eba3 030e 	sub.w	r3, r3, lr
 800c0b0:	4403      	add	r3, r0
 800c0b2:	0c12      	lsrs	r2, r2, #16
 800c0b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0c2:	45c1      	cmp	r9, r8
 800c0c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0c8:	f841 3b04 	str.w	r3, [r1], #4
 800c0cc:	d2e6      	bcs.n	800c09c <quorem+0xa4>
 800c0ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0d6:	b922      	cbnz	r2, 800c0e2 <quorem+0xea>
 800c0d8:	3b04      	subs	r3, #4
 800c0da:	429d      	cmp	r5, r3
 800c0dc:	461a      	mov	r2, r3
 800c0de:	d30b      	bcc.n	800c0f8 <quorem+0x100>
 800c0e0:	613c      	str	r4, [r7, #16]
 800c0e2:	3601      	adds	r6, #1
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	b003      	add	sp, #12
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	3b04      	subs	r3, #4
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	d1cb      	bne.n	800c08c <quorem+0x94>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	e7c6      	b.n	800c086 <quorem+0x8e>
 800c0f8:	6812      	ldr	r2, [r2, #0]
 800c0fa:	3b04      	subs	r3, #4
 800c0fc:	2a00      	cmp	r2, #0
 800c0fe:	d1ef      	bne.n	800c0e0 <quorem+0xe8>
 800c100:	3c01      	subs	r4, #1
 800c102:	e7ea      	b.n	800c0da <quorem+0xe2>
 800c104:	2000      	movs	r0, #0
 800c106:	e7ee      	b.n	800c0e6 <quorem+0xee>

0800c108 <_dtoa_r>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	4614      	mov	r4, r2
 800c10e:	461d      	mov	r5, r3
 800c110:	69c7      	ldr	r7, [r0, #28]
 800c112:	b097      	sub	sp, #92	@ 0x5c
 800c114:	4681      	mov	r9, r0
 800c116:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c11a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c11c:	b97f      	cbnz	r7, 800c13e <_dtoa_r+0x36>
 800c11e:	2010      	movs	r0, #16
 800c120:	f000 fe0e 	bl	800cd40 <malloc>
 800c124:	4602      	mov	r2, r0
 800c126:	f8c9 001c 	str.w	r0, [r9, #28]
 800c12a:	b920      	cbnz	r0, 800c136 <_dtoa_r+0x2e>
 800c12c:	21ef      	movs	r1, #239	@ 0xef
 800c12e:	4bac      	ldr	r3, [pc, #688]	@ (800c3e0 <_dtoa_r+0x2d8>)
 800c130:	48ac      	ldr	r0, [pc, #688]	@ (800c3e4 <_dtoa_r+0x2dc>)
 800c132:	f7ff ff43 	bl	800bfbc <__assert_func>
 800c136:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c13a:	6007      	str	r7, [r0, #0]
 800c13c:	60c7      	str	r7, [r0, #12]
 800c13e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c142:	6819      	ldr	r1, [r3, #0]
 800c144:	b159      	cbz	r1, 800c15e <_dtoa_r+0x56>
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	2301      	movs	r3, #1
 800c14a:	4093      	lsls	r3, r2
 800c14c:	604a      	str	r2, [r1, #4]
 800c14e:	608b      	str	r3, [r1, #8]
 800c150:	4648      	mov	r0, r9
 800c152:	f000 feeb 	bl	800cf2c <_Bfree>
 800c156:	2200      	movs	r2, #0
 800c158:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	1e2b      	subs	r3, r5, #0
 800c160:	bfaf      	iteee	ge
 800c162:	2300      	movge	r3, #0
 800c164:	2201      	movlt	r2, #1
 800c166:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c16a:	9307      	strlt	r3, [sp, #28]
 800c16c:	bfa8      	it	ge
 800c16e:	6033      	strge	r3, [r6, #0]
 800c170:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c174:	4b9c      	ldr	r3, [pc, #624]	@ (800c3e8 <_dtoa_r+0x2e0>)
 800c176:	bfb8      	it	lt
 800c178:	6032      	strlt	r2, [r6, #0]
 800c17a:	ea33 0308 	bics.w	r3, r3, r8
 800c17e:	d112      	bne.n	800c1a6 <_dtoa_r+0x9e>
 800c180:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c184:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c18c:	4323      	orrs	r3, r4
 800c18e:	f000 855e 	beq.w	800cc4e <_dtoa_r+0xb46>
 800c192:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c194:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c3ec <_dtoa_r+0x2e4>
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8560 	beq.w	800cc5e <_dtoa_r+0xb56>
 800c19e:	f10a 0303 	add.w	r3, sl, #3
 800c1a2:	f000 bd5a 	b.w	800cc5a <_dtoa_r+0xb52>
 800c1a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c1ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f7f4 fc01 	bl	80009bc <__aeabi_dcmpeq>
 800c1ba:	4607      	mov	r7, r0
 800c1bc:	b158      	cbz	r0, 800c1d6 <_dtoa_r+0xce>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1c6:	b113      	cbz	r3, 800c1ce <_dtoa_r+0xc6>
 800c1c8:	4b89      	ldr	r3, [pc, #548]	@ (800c3f0 <_dtoa_r+0x2e8>)
 800c1ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c3f4 <_dtoa_r+0x2ec>
 800c1d2:	f000 bd44 	b.w	800cc5e <_dtoa_r+0xb56>
 800c1d6:	ab14      	add	r3, sp, #80	@ 0x50
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	ab15      	add	r3, sp, #84	@ 0x54
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	4648      	mov	r0, r9
 800c1e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c1e4:	f001 f984 	bl	800d4f0 <__d2b>
 800c1e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c1ec:	9003      	str	r0, [sp, #12]
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d078      	beq.n	800c2e4 <_dtoa_r+0x1dc>
 800c1f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c200:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c204:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c208:	9712      	str	r7, [sp, #72]	@ 0x48
 800c20a:	4619      	mov	r1, r3
 800c20c:	2200      	movs	r2, #0
 800c20e:	4b7a      	ldr	r3, [pc, #488]	@ (800c3f8 <_dtoa_r+0x2f0>)
 800c210:	f7f3 ffb4 	bl	800017c <__aeabi_dsub>
 800c214:	a36c      	add	r3, pc, #432	@ (adr r3, 800c3c8 <_dtoa_r+0x2c0>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f7f4 f967 	bl	80004ec <__aeabi_dmul>
 800c21e:	a36c      	add	r3, pc, #432	@ (adr r3, 800c3d0 <_dtoa_r+0x2c8>)
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f7f3 ffac 	bl	8000180 <__adddf3>
 800c228:	4604      	mov	r4, r0
 800c22a:	4630      	mov	r0, r6
 800c22c:	460d      	mov	r5, r1
 800c22e:	f7f4 f8f3 	bl	8000418 <__aeabi_i2d>
 800c232:	a369      	add	r3, pc, #420	@ (adr r3, 800c3d8 <_dtoa_r+0x2d0>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 f958 	bl	80004ec <__aeabi_dmul>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4620      	mov	r0, r4
 800c242:	4629      	mov	r1, r5
 800c244:	f7f3 ff9c 	bl	8000180 <__adddf3>
 800c248:	4604      	mov	r4, r0
 800c24a:	460d      	mov	r5, r1
 800c24c:	f7f4 fbfe 	bl	8000a4c <__aeabi_d2iz>
 800c250:	2200      	movs	r2, #0
 800c252:	4607      	mov	r7, r0
 800c254:	2300      	movs	r3, #0
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 fbb9 	bl	80009d0 <__aeabi_dcmplt>
 800c25e:	b140      	cbz	r0, 800c272 <_dtoa_r+0x16a>
 800c260:	4638      	mov	r0, r7
 800c262:	f7f4 f8d9 	bl	8000418 <__aeabi_i2d>
 800c266:	4622      	mov	r2, r4
 800c268:	462b      	mov	r3, r5
 800c26a:	f7f4 fba7 	bl	80009bc <__aeabi_dcmpeq>
 800c26e:	b900      	cbnz	r0, 800c272 <_dtoa_r+0x16a>
 800c270:	3f01      	subs	r7, #1
 800c272:	2f16      	cmp	r7, #22
 800c274:	d854      	bhi.n	800c320 <_dtoa_r+0x218>
 800c276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c27a:	4b60      	ldr	r3, [pc, #384]	@ (800c3fc <_dtoa_r+0x2f4>)
 800c27c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	f7f4 fba4 	bl	80009d0 <__aeabi_dcmplt>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d04b      	beq.n	800c324 <_dtoa_r+0x21c>
 800c28c:	2300      	movs	r3, #0
 800c28e:	3f01      	subs	r7, #1
 800c290:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c292:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c294:	1b9b      	subs	r3, r3, r6
 800c296:	1e5a      	subs	r2, r3, #1
 800c298:	bf49      	itett	mi
 800c29a:	f1c3 0301 	rsbmi	r3, r3, #1
 800c29e:	2300      	movpl	r3, #0
 800c2a0:	9304      	strmi	r3, [sp, #16]
 800c2a2:	2300      	movmi	r3, #0
 800c2a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2a6:	bf54      	ite	pl
 800c2a8:	9304      	strpl	r3, [sp, #16]
 800c2aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c2ac:	2f00      	cmp	r7, #0
 800c2ae:	db3b      	blt.n	800c328 <_dtoa_r+0x220>
 800c2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b2:	970e      	str	r7, [sp, #56]	@ 0x38
 800c2b4:	443b      	add	r3, r7
 800c2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2be:	2b09      	cmp	r3, #9
 800c2c0:	d865      	bhi.n	800c38e <_dtoa_r+0x286>
 800c2c2:	2b05      	cmp	r3, #5
 800c2c4:	bfc4      	itt	gt
 800c2c6:	3b04      	subgt	r3, #4
 800c2c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c2ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2cc:	bfc8      	it	gt
 800c2ce:	2400      	movgt	r4, #0
 800c2d0:	f1a3 0302 	sub.w	r3, r3, #2
 800c2d4:	bfd8      	it	le
 800c2d6:	2401      	movle	r4, #1
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d864      	bhi.n	800c3a6 <_dtoa_r+0x29e>
 800c2dc:	e8df f003 	tbb	[pc, r3]
 800c2e0:	2c385553 	.word	0x2c385553
 800c2e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c2e8:	441e      	add	r6, r3
 800c2ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2ee:	2b20      	cmp	r3, #32
 800c2f0:	bfc1      	itttt	gt
 800c2f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2f6:	fa08 f803 	lslgt.w	r8, r8, r3
 800c2fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c302:	bfd6      	itet	le
 800c304:	f1c3 0320 	rsble	r3, r3, #32
 800c308:	ea48 0003 	orrgt.w	r0, r8, r3
 800c30c:	fa04 f003 	lslle.w	r0, r4, r3
 800c310:	f7f4 f872 	bl	80003f8 <__aeabi_ui2d>
 800c314:	2201      	movs	r2, #1
 800c316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c31a:	3e01      	subs	r6, #1
 800c31c:	9212      	str	r2, [sp, #72]	@ 0x48
 800c31e:	e774      	b.n	800c20a <_dtoa_r+0x102>
 800c320:	2301      	movs	r3, #1
 800c322:	e7b5      	b.n	800c290 <_dtoa_r+0x188>
 800c324:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c326:	e7b4      	b.n	800c292 <_dtoa_r+0x18a>
 800c328:	9b04      	ldr	r3, [sp, #16]
 800c32a:	1bdb      	subs	r3, r3, r7
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	427b      	negs	r3, r7
 800c330:	930a      	str	r3, [sp, #40]	@ 0x28
 800c332:	2300      	movs	r3, #0
 800c334:	930e      	str	r3, [sp, #56]	@ 0x38
 800c336:	e7c1      	b.n	800c2bc <_dtoa_r+0x1b4>
 800c338:	2301      	movs	r3, #1
 800c33a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c33c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c33e:	eb07 0b03 	add.w	fp, r7, r3
 800c342:	f10b 0301 	add.w	r3, fp, #1
 800c346:	2b01      	cmp	r3, #1
 800c348:	9308      	str	r3, [sp, #32]
 800c34a:	bfb8      	it	lt
 800c34c:	2301      	movlt	r3, #1
 800c34e:	e006      	b.n	800c35e <_dtoa_r+0x256>
 800c350:	2301      	movs	r3, #1
 800c352:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c354:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c356:	2b00      	cmp	r3, #0
 800c358:	dd28      	ble.n	800c3ac <_dtoa_r+0x2a4>
 800c35a:	469b      	mov	fp, r3
 800c35c:	9308      	str	r3, [sp, #32]
 800c35e:	2100      	movs	r1, #0
 800c360:	2204      	movs	r2, #4
 800c362:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c366:	f102 0514 	add.w	r5, r2, #20
 800c36a:	429d      	cmp	r5, r3
 800c36c:	d926      	bls.n	800c3bc <_dtoa_r+0x2b4>
 800c36e:	6041      	str	r1, [r0, #4]
 800c370:	4648      	mov	r0, r9
 800c372:	f000 fd9b 	bl	800ceac <_Balloc>
 800c376:	4682      	mov	sl, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	d143      	bne.n	800c404 <_dtoa_r+0x2fc>
 800c37c:	4602      	mov	r2, r0
 800c37e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c382:	4b1f      	ldr	r3, [pc, #124]	@ (800c400 <_dtoa_r+0x2f8>)
 800c384:	e6d4      	b.n	800c130 <_dtoa_r+0x28>
 800c386:	2300      	movs	r3, #0
 800c388:	e7e3      	b.n	800c352 <_dtoa_r+0x24a>
 800c38a:	2300      	movs	r3, #0
 800c38c:	e7d5      	b.n	800c33a <_dtoa_r+0x232>
 800c38e:	2401      	movs	r4, #1
 800c390:	2300      	movs	r3, #0
 800c392:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c394:	9320      	str	r3, [sp, #128]	@ 0x80
 800c396:	f04f 3bff 	mov.w	fp, #4294967295
 800c39a:	2200      	movs	r2, #0
 800c39c:	2312      	movs	r3, #18
 800c39e:	f8cd b020 	str.w	fp, [sp, #32]
 800c3a2:	9221      	str	r2, [sp, #132]	@ 0x84
 800c3a4:	e7db      	b.n	800c35e <_dtoa_r+0x256>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3aa:	e7f4      	b.n	800c396 <_dtoa_r+0x28e>
 800c3ac:	f04f 0b01 	mov.w	fp, #1
 800c3b0:	465b      	mov	r3, fp
 800c3b2:	f8cd b020 	str.w	fp, [sp, #32]
 800c3b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c3ba:	e7d0      	b.n	800c35e <_dtoa_r+0x256>
 800c3bc:	3101      	adds	r1, #1
 800c3be:	0052      	lsls	r2, r2, #1
 800c3c0:	e7d1      	b.n	800c366 <_dtoa_r+0x25e>
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	636f4361 	.word	0x636f4361
 800c3cc:	3fd287a7 	.word	0x3fd287a7
 800c3d0:	8b60c8b3 	.word	0x8b60c8b3
 800c3d4:	3fc68a28 	.word	0x3fc68a28
 800c3d8:	509f79fb 	.word	0x509f79fb
 800c3dc:	3fd34413 	.word	0x3fd34413
 800c3e0:	08010087 	.word	0x08010087
 800c3e4:	08010141 	.word	0x08010141
 800c3e8:	7ff00000 	.word	0x7ff00000
 800c3ec:	0801013d 	.word	0x0801013d
 800c3f0:	08010064 	.word	0x08010064
 800c3f4:	08010063 	.word	0x08010063
 800c3f8:	3ff80000 	.word	0x3ff80000
 800c3fc:	08010258 	.word	0x08010258
 800c400:	08010199 	.word	0x08010199
 800c404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c408:	6018      	str	r0, [r3, #0]
 800c40a:	9b08      	ldr	r3, [sp, #32]
 800c40c:	2b0e      	cmp	r3, #14
 800c40e:	f200 80a1 	bhi.w	800c554 <_dtoa_r+0x44c>
 800c412:	2c00      	cmp	r4, #0
 800c414:	f000 809e 	beq.w	800c554 <_dtoa_r+0x44c>
 800c418:	2f00      	cmp	r7, #0
 800c41a:	dd33      	ble.n	800c484 <_dtoa_r+0x37c>
 800c41c:	4b9c      	ldr	r3, [pc, #624]	@ (800c690 <_dtoa_r+0x588>)
 800c41e:	f007 020f 	and.w	r2, r7, #15
 800c422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c426:	05f8      	lsls	r0, r7, #23
 800c428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c42c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c430:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c434:	d516      	bpl.n	800c464 <_dtoa_r+0x35c>
 800c436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c43a:	4b96      	ldr	r3, [pc, #600]	@ (800c694 <_dtoa_r+0x58c>)
 800c43c:	2603      	movs	r6, #3
 800c43e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c442:	f7f4 f97d 	bl	8000740 <__aeabi_ddiv>
 800c446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c44a:	f004 040f 	and.w	r4, r4, #15
 800c44e:	4d91      	ldr	r5, [pc, #580]	@ (800c694 <_dtoa_r+0x58c>)
 800c450:	b954      	cbnz	r4, 800c468 <_dtoa_r+0x360>
 800c452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c45a:	f7f4 f971 	bl	8000740 <__aeabi_ddiv>
 800c45e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c462:	e028      	b.n	800c4b6 <_dtoa_r+0x3ae>
 800c464:	2602      	movs	r6, #2
 800c466:	e7f2      	b.n	800c44e <_dtoa_r+0x346>
 800c468:	07e1      	lsls	r1, r4, #31
 800c46a:	d508      	bpl.n	800c47e <_dtoa_r+0x376>
 800c46c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c470:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c474:	f7f4 f83a 	bl	80004ec <__aeabi_dmul>
 800c478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c47c:	3601      	adds	r6, #1
 800c47e:	1064      	asrs	r4, r4, #1
 800c480:	3508      	adds	r5, #8
 800c482:	e7e5      	b.n	800c450 <_dtoa_r+0x348>
 800c484:	f000 80af 	beq.w	800c5e6 <_dtoa_r+0x4de>
 800c488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c48c:	427c      	negs	r4, r7
 800c48e:	4b80      	ldr	r3, [pc, #512]	@ (800c690 <_dtoa_r+0x588>)
 800c490:	f004 020f 	and.w	r2, r4, #15
 800c494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f4 f826 	bl	80004ec <__aeabi_dmul>
 800c4a0:	2602      	movs	r6, #2
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4a8:	4d7a      	ldr	r5, [pc, #488]	@ (800c694 <_dtoa_r+0x58c>)
 800c4aa:	1124      	asrs	r4, r4, #4
 800c4ac:	2c00      	cmp	r4, #0
 800c4ae:	f040 808f 	bne.w	800c5d0 <_dtoa_r+0x4c8>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1d3      	bne.n	800c45e <_dtoa_r+0x356>
 800c4b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c4ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 8094 	beq.w	800c5ea <_dtoa_r+0x4e2>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	4b73      	ldr	r3, [pc, #460]	@ (800c698 <_dtoa_r+0x590>)
 800c4ca:	f7f4 fa81 	bl	80009d0 <__aeabi_dcmplt>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f000 808b 	beq.w	800c5ea <_dtoa_r+0x4e2>
 800c4d4:	9b08      	ldr	r3, [sp, #32]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 8087 	beq.w	800c5ea <_dtoa_r+0x4e2>
 800c4dc:	f1bb 0f00 	cmp.w	fp, #0
 800c4e0:	dd34      	ble.n	800c54c <_dtoa_r+0x444>
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4b6c      	ldr	r3, [pc, #432]	@ (800c69c <_dtoa_r+0x594>)
 800c4ea:	f7f3 ffff 	bl	80004ec <__aeabi_dmul>
 800c4ee:	465c      	mov	r4, fp
 800c4f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4f4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c4f8:	3601      	adds	r6, #1
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7f3 ff8c 	bl	8000418 <__aeabi_i2d>
 800c500:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c504:	f7f3 fff2 	bl	80004ec <__aeabi_dmul>
 800c508:	2200      	movs	r2, #0
 800c50a:	4b65      	ldr	r3, [pc, #404]	@ (800c6a0 <_dtoa_r+0x598>)
 800c50c:	f7f3 fe38 	bl	8000180 <__adddf3>
 800c510:	4605      	mov	r5, r0
 800c512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c516:	2c00      	cmp	r4, #0
 800c518:	d16a      	bne.n	800c5f0 <_dtoa_r+0x4e8>
 800c51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c51e:	2200      	movs	r2, #0
 800c520:	4b60      	ldr	r3, [pc, #384]	@ (800c6a4 <_dtoa_r+0x59c>)
 800c522:	f7f3 fe2b 	bl	800017c <__aeabi_dsub>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c52e:	462a      	mov	r2, r5
 800c530:	4633      	mov	r3, r6
 800c532:	f7f4 fa6b 	bl	8000a0c <__aeabi_dcmpgt>
 800c536:	2800      	cmp	r0, #0
 800c538:	f040 8298 	bne.w	800ca6c <_dtoa_r+0x964>
 800c53c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c540:	462a      	mov	r2, r5
 800c542:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c546:	f7f4 fa43 	bl	80009d0 <__aeabi_dcmplt>
 800c54a:	bb38      	cbnz	r0, 800c59c <_dtoa_r+0x494>
 800c54c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c550:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c556:	2b00      	cmp	r3, #0
 800c558:	f2c0 8157 	blt.w	800c80a <_dtoa_r+0x702>
 800c55c:	2f0e      	cmp	r7, #14
 800c55e:	f300 8154 	bgt.w	800c80a <_dtoa_r+0x702>
 800c562:	4b4b      	ldr	r3, [pc, #300]	@ (800c690 <_dtoa_r+0x588>)
 800c564:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c568:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c56c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c570:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c572:	2b00      	cmp	r3, #0
 800c574:	f280 80e5 	bge.w	800c742 <_dtoa_r+0x63a>
 800c578:	9b08      	ldr	r3, [sp, #32]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f300 80e1 	bgt.w	800c742 <_dtoa_r+0x63a>
 800c580:	d10c      	bne.n	800c59c <_dtoa_r+0x494>
 800c582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c586:	2200      	movs	r2, #0
 800c588:	4b46      	ldr	r3, [pc, #280]	@ (800c6a4 <_dtoa_r+0x59c>)
 800c58a:	f7f3 ffaf 	bl	80004ec <__aeabi_dmul>
 800c58e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c592:	f7f4 fa31 	bl	80009f8 <__aeabi_dcmpge>
 800c596:	2800      	cmp	r0, #0
 800c598:	f000 8266 	beq.w	800ca68 <_dtoa_r+0x960>
 800c59c:	2400      	movs	r4, #0
 800c59e:	4625      	mov	r5, r4
 800c5a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5a2:	4656      	mov	r6, sl
 800c5a4:	ea6f 0803 	mvn.w	r8, r3
 800c5a8:	2700      	movs	r7, #0
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	f000 fcbd 	bl	800cf2c <_Bfree>
 800c5b2:	2d00      	cmp	r5, #0
 800c5b4:	f000 80bd 	beq.w	800c732 <_dtoa_r+0x62a>
 800c5b8:	b12f      	cbz	r7, 800c5c6 <_dtoa_r+0x4be>
 800c5ba:	42af      	cmp	r7, r5
 800c5bc:	d003      	beq.n	800c5c6 <_dtoa_r+0x4be>
 800c5be:	4639      	mov	r1, r7
 800c5c0:	4648      	mov	r0, r9
 800c5c2:	f000 fcb3 	bl	800cf2c <_Bfree>
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	4648      	mov	r0, r9
 800c5ca:	f000 fcaf 	bl	800cf2c <_Bfree>
 800c5ce:	e0b0      	b.n	800c732 <_dtoa_r+0x62a>
 800c5d0:	07e2      	lsls	r2, r4, #31
 800c5d2:	d505      	bpl.n	800c5e0 <_dtoa_r+0x4d8>
 800c5d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5d8:	f7f3 ff88 	bl	80004ec <__aeabi_dmul>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	3601      	adds	r6, #1
 800c5e0:	1064      	asrs	r4, r4, #1
 800c5e2:	3508      	adds	r5, #8
 800c5e4:	e762      	b.n	800c4ac <_dtoa_r+0x3a4>
 800c5e6:	2602      	movs	r6, #2
 800c5e8:	e765      	b.n	800c4b6 <_dtoa_r+0x3ae>
 800c5ea:	46b8      	mov	r8, r7
 800c5ec:	9c08      	ldr	r4, [sp, #32]
 800c5ee:	e784      	b.n	800c4fa <_dtoa_r+0x3f2>
 800c5f0:	4b27      	ldr	r3, [pc, #156]	@ (800c690 <_dtoa_r+0x588>)
 800c5f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5fc:	4454      	add	r4, sl
 800c5fe:	2900      	cmp	r1, #0
 800c600:	d054      	beq.n	800c6ac <_dtoa_r+0x5a4>
 800c602:	2000      	movs	r0, #0
 800c604:	4928      	ldr	r1, [pc, #160]	@ (800c6a8 <_dtoa_r+0x5a0>)
 800c606:	f7f4 f89b 	bl	8000740 <__aeabi_ddiv>
 800c60a:	4633      	mov	r3, r6
 800c60c:	462a      	mov	r2, r5
 800c60e:	f7f3 fdb5 	bl	800017c <__aeabi_dsub>
 800c612:	4656      	mov	r6, sl
 800c614:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61c:	f7f4 fa16 	bl	8000a4c <__aeabi_d2iz>
 800c620:	4605      	mov	r5, r0
 800c622:	f7f3 fef9 	bl	8000418 <__aeabi_i2d>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c62e:	f7f3 fda5 	bl	800017c <__aeabi_dsub>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	3530      	adds	r5, #48	@ 0x30
 800c638:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c63c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c640:	f806 5b01 	strb.w	r5, [r6], #1
 800c644:	f7f4 f9c4 	bl	80009d0 <__aeabi_dcmplt>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d172      	bne.n	800c732 <_dtoa_r+0x62a>
 800c64c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c650:	2000      	movs	r0, #0
 800c652:	4911      	ldr	r1, [pc, #68]	@ (800c698 <_dtoa_r+0x590>)
 800c654:	f7f3 fd92 	bl	800017c <__aeabi_dsub>
 800c658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c65c:	f7f4 f9b8 	bl	80009d0 <__aeabi_dcmplt>
 800c660:	2800      	cmp	r0, #0
 800c662:	f040 80b4 	bne.w	800c7ce <_dtoa_r+0x6c6>
 800c666:	42a6      	cmp	r6, r4
 800c668:	f43f af70 	beq.w	800c54c <_dtoa_r+0x444>
 800c66c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c670:	2200      	movs	r2, #0
 800c672:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <_dtoa_r+0x594>)
 800c674:	f7f3 ff3a 	bl	80004ec <__aeabi_dmul>
 800c678:	2200      	movs	r2, #0
 800c67a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c67e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c682:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <_dtoa_r+0x594>)
 800c684:	f7f3 ff32 	bl	80004ec <__aeabi_dmul>
 800c688:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c68c:	e7c4      	b.n	800c618 <_dtoa_r+0x510>
 800c68e:	bf00      	nop
 800c690:	08010258 	.word	0x08010258
 800c694:	08010230 	.word	0x08010230
 800c698:	3ff00000 	.word	0x3ff00000
 800c69c:	40240000 	.word	0x40240000
 800c6a0:	401c0000 	.word	0x401c0000
 800c6a4:	40140000 	.word	0x40140000
 800c6a8:	3fe00000 	.word	0x3fe00000
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f7f3 ff1c 	bl	80004ec <__aeabi_dmul>
 800c6b4:	4656      	mov	r6, sl
 800c6b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c6bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6c0:	f7f4 f9c4 	bl	8000a4c <__aeabi_d2iz>
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	f7f3 fea7 	bl	8000418 <__aeabi_i2d>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6d2:	f7f3 fd53 	bl	800017c <__aeabi_dsub>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	3530      	adds	r5, #48	@ 0x30
 800c6dc:	f806 5b01 	strb.w	r5, [r6], #1
 800c6e0:	42a6      	cmp	r6, r4
 800c6e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6e6:	f04f 0200 	mov.w	r2, #0
 800c6ea:	d124      	bne.n	800c736 <_dtoa_r+0x62e>
 800c6ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6f0:	4bae      	ldr	r3, [pc, #696]	@ (800c9ac <_dtoa_r+0x8a4>)
 800c6f2:	f7f3 fd45 	bl	8000180 <__adddf3>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6fe:	f7f4 f985 	bl	8000a0c <__aeabi_dcmpgt>
 800c702:	2800      	cmp	r0, #0
 800c704:	d163      	bne.n	800c7ce <_dtoa_r+0x6c6>
 800c706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c70a:	2000      	movs	r0, #0
 800c70c:	49a7      	ldr	r1, [pc, #668]	@ (800c9ac <_dtoa_r+0x8a4>)
 800c70e:	f7f3 fd35 	bl	800017c <__aeabi_dsub>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c71a:	f7f4 f959 	bl	80009d0 <__aeabi_dcmplt>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f43f af14 	beq.w	800c54c <_dtoa_r+0x444>
 800c724:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c726:	1e73      	subs	r3, r6, #1
 800c728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c72a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c72e:	2b30      	cmp	r3, #48	@ 0x30
 800c730:	d0f8      	beq.n	800c724 <_dtoa_r+0x61c>
 800c732:	4647      	mov	r7, r8
 800c734:	e03b      	b.n	800c7ae <_dtoa_r+0x6a6>
 800c736:	4b9e      	ldr	r3, [pc, #632]	@ (800c9b0 <_dtoa_r+0x8a8>)
 800c738:	f7f3 fed8 	bl	80004ec <__aeabi_dmul>
 800c73c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c740:	e7bc      	b.n	800c6bc <_dtoa_r+0x5b4>
 800c742:	4656      	mov	r6, sl
 800c744:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c74c:	4620      	mov	r0, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	f7f3 fff6 	bl	8000740 <__aeabi_ddiv>
 800c754:	f7f4 f97a 	bl	8000a4c <__aeabi_d2iz>
 800c758:	4680      	mov	r8, r0
 800c75a:	f7f3 fe5d 	bl	8000418 <__aeabi_i2d>
 800c75e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c762:	f7f3 fec3 	bl	80004ec <__aeabi_dmul>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4620      	mov	r0, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7f3 fd05 	bl	800017c <__aeabi_dsub>
 800c772:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c776:	9d08      	ldr	r5, [sp, #32]
 800c778:	f806 4b01 	strb.w	r4, [r6], #1
 800c77c:	eba6 040a 	sub.w	r4, r6, sl
 800c780:	42a5      	cmp	r5, r4
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	d133      	bne.n	800c7f0 <_dtoa_r+0x6e8>
 800c788:	f7f3 fcfa 	bl	8000180 <__adddf3>
 800c78c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c790:	4604      	mov	r4, r0
 800c792:	460d      	mov	r5, r1
 800c794:	f7f4 f93a 	bl	8000a0c <__aeabi_dcmpgt>
 800c798:	b9c0      	cbnz	r0, 800c7cc <_dtoa_r+0x6c4>
 800c79a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f4 f90b 	bl	80009bc <__aeabi_dcmpeq>
 800c7a6:	b110      	cbz	r0, 800c7ae <_dtoa_r+0x6a6>
 800c7a8:	f018 0f01 	tst.w	r8, #1
 800c7ac:	d10e      	bne.n	800c7cc <_dtoa_r+0x6c4>
 800c7ae:	4648      	mov	r0, r9
 800c7b0:	9903      	ldr	r1, [sp, #12]
 800c7b2:	f000 fbbb 	bl	800cf2c <_Bfree>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	7033      	strb	r3, [r6, #0]
 800c7ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c7bc:	3701      	adds	r7, #1
 800c7be:	601f      	str	r7, [r3, #0]
 800c7c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 824b 	beq.w	800cc5e <_dtoa_r+0xb56>
 800c7c8:	601e      	str	r6, [r3, #0]
 800c7ca:	e248      	b.n	800cc5e <_dtoa_r+0xb56>
 800c7cc:	46b8      	mov	r8, r7
 800c7ce:	4633      	mov	r3, r6
 800c7d0:	461e      	mov	r6, r3
 800c7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7d6:	2a39      	cmp	r2, #57	@ 0x39
 800c7d8:	d106      	bne.n	800c7e8 <_dtoa_r+0x6e0>
 800c7da:	459a      	cmp	sl, r3
 800c7dc:	d1f8      	bne.n	800c7d0 <_dtoa_r+0x6c8>
 800c7de:	2230      	movs	r2, #48	@ 0x30
 800c7e0:	f108 0801 	add.w	r8, r8, #1
 800c7e4:	f88a 2000 	strb.w	r2, [sl]
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	701a      	strb	r2, [r3, #0]
 800c7ee:	e7a0      	b.n	800c732 <_dtoa_r+0x62a>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4b6f      	ldr	r3, [pc, #444]	@ (800c9b0 <_dtoa_r+0x8a8>)
 800c7f4:	f7f3 fe7a 	bl	80004ec <__aeabi_dmul>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	f7f4 f8dc 	bl	80009bc <__aeabi_dcmpeq>
 800c804:	2800      	cmp	r0, #0
 800c806:	d09f      	beq.n	800c748 <_dtoa_r+0x640>
 800c808:	e7d1      	b.n	800c7ae <_dtoa_r+0x6a6>
 800c80a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	f000 80ea 	beq.w	800c9e6 <_dtoa_r+0x8de>
 800c812:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c814:	2a01      	cmp	r2, #1
 800c816:	f300 80cd 	bgt.w	800c9b4 <_dtoa_r+0x8ac>
 800c81a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	f000 80c1 	beq.w	800c9a4 <_dtoa_r+0x89c>
 800c822:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c826:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c828:	9e04      	ldr	r6, [sp, #16]
 800c82a:	9a04      	ldr	r2, [sp, #16]
 800c82c:	2101      	movs	r1, #1
 800c82e:	441a      	add	r2, r3
 800c830:	9204      	str	r2, [sp, #16]
 800c832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c834:	4648      	mov	r0, r9
 800c836:	441a      	add	r2, r3
 800c838:	9209      	str	r2, [sp, #36]	@ 0x24
 800c83a:	f000 fc2b 	bl	800d094 <__i2b>
 800c83e:	4605      	mov	r5, r0
 800c840:	b166      	cbz	r6, 800c85c <_dtoa_r+0x754>
 800c842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd09      	ble.n	800c85c <_dtoa_r+0x754>
 800c848:	42b3      	cmp	r3, r6
 800c84a:	bfa8      	it	ge
 800c84c:	4633      	movge	r3, r6
 800c84e:	9a04      	ldr	r2, [sp, #16]
 800c850:	1af6      	subs	r6, r6, r3
 800c852:	1ad2      	subs	r2, r2, r3
 800c854:	9204      	str	r2, [sp, #16]
 800c856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c85e:	b30b      	cbz	r3, 800c8a4 <_dtoa_r+0x79c>
 800c860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80c6 	beq.w	800c9f4 <_dtoa_r+0x8ec>
 800c868:	2c00      	cmp	r4, #0
 800c86a:	f000 80c0 	beq.w	800c9ee <_dtoa_r+0x8e6>
 800c86e:	4629      	mov	r1, r5
 800c870:	4622      	mov	r2, r4
 800c872:	4648      	mov	r0, r9
 800c874:	f000 fcc6 	bl	800d204 <__pow5mult>
 800c878:	9a03      	ldr	r2, [sp, #12]
 800c87a:	4601      	mov	r1, r0
 800c87c:	4605      	mov	r5, r0
 800c87e:	4648      	mov	r0, r9
 800c880:	f000 fc1e 	bl	800d0c0 <__multiply>
 800c884:	9903      	ldr	r1, [sp, #12]
 800c886:	4680      	mov	r8, r0
 800c888:	4648      	mov	r0, r9
 800c88a:	f000 fb4f 	bl	800cf2c <_Bfree>
 800c88e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c890:	1b1b      	subs	r3, r3, r4
 800c892:	930a      	str	r3, [sp, #40]	@ 0x28
 800c894:	f000 80b1 	beq.w	800c9fa <_dtoa_r+0x8f2>
 800c898:	4641      	mov	r1, r8
 800c89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c89c:	4648      	mov	r0, r9
 800c89e:	f000 fcb1 	bl	800d204 <__pow5mult>
 800c8a2:	9003      	str	r0, [sp, #12]
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	4648      	mov	r0, r9
 800c8a8:	f000 fbf4 	bl	800d094 <__i2b>
 800c8ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 81d8 	beq.w	800cc66 <_dtoa_r+0xb5e>
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	4648      	mov	r0, r9
 800c8bc:	f000 fca2 	bl	800d204 <__pow5mult>
 800c8c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	f300 809f 	bgt.w	800ca08 <_dtoa_r+0x900>
 800c8ca:	9b06      	ldr	r3, [sp, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f040 8097 	bne.w	800ca00 <_dtoa_r+0x8f8>
 800c8d2:	9b07      	ldr	r3, [sp, #28]
 800c8d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f040 8093 	bne.w	800ca04 <_dtoa_r+0x8fc>
 800c8de:	9b07      	ldr	r3, [sp, #28]
 800c8e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8e4:	0d1b      	lsrs	r3, r3, #20
 800c8e6:	051b      	lsls	r3, r3, #20
 800c8e8:	b133      	cbz	r3, 800c8f8 <_dtoa_r+0x7f0>
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 81b8 	beq.w	800cc72 <_dtoa_r+0xb6a>
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c908:	6918      	ldr	r0, [r3, #16]
 800c90a:	f000 fb77 	bl	800cffc <__hi0bits>
 800c90e:	f1c0 0020 	rsb	r0, r0, #32
 800c912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c914:	4418      	add	r0, r3
 800c916:	f010 001f 	ands.w	r0, r0, #31
 800c91a:	f000 8082 	beq.w	800ca22 <_dtoa_r+0x91a>
 800c91e:	f1c0 0320 	rsb	r3, r0, #32
 800c922:	2b04      	cmp	r3, #4
 800c924:	dd73      	ble.n	800ca0e <_dtoa_r+0x906>
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	f1c0 001c 	rsb	r0, r0, #28
 800c92c:	4403      	add	r3, r0
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c932:	4406      	add	r6, r0
 800c934:	4403      	add	r3, r0
 800c936:	9309      	str	r3, [sp, #36]	@ 0x24
 800c938:	9b04      	ldr	r3, [sp, #16]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dd05      	ble.n	800c94a <_dtoa_r+0x842>
 800c93e:	461a      	mov	r2, r3
 800c940:	4648      	mov	r0, r9
 800c942:	9903      	ldr	r1, [sp, #12]
 800c944:	f000 fcb8 	bl	800d2b8 <__lshift>
 800c948:	9003      	str	r0, [sp, #12]
 800c94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dd05      	ble.n	800c95c <_dtoa_r+0x854>
 800c950:	4621      	mov	r1, r4
 800c952:	461a      	mov	r2, r3
 800c954:	4648      	mov	r0, r9
 800c956:	f000 fcaf 	bl	800d2b8 <__lshift>
 800c95a:	4604      	mov	r4, r0
 800c95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d061      	beq.n	800ca26 <_dtoa_r+0x91e>
 800c962:	4621      	mov	r1, r4
 800c964:	9803      	ldr	r0, [sp, #12]
 800c966:	f000 fd13 	bl	800d390 <__mcmp>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	da5b      	bge.n	800ca26 <_dtoa_r+0x91e>
 800c96e:	2300      	movs	r3, #0
 800c970:	220a      	movs	r2, #10
 800c972:	4648      	mov	r0, r9
 800c974:	9903      	ldr	r1, [sp, #12]
 800c976:	f000 fafb 	bl	800cf70 <__multadd>
 800c97a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c97c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c980:	9003      	str	r0, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 8177 	beq.w	800cc76 <_dtoa_r+0xb6e>
 800c988:	4629      	mov	r1, r5
 800c98a:	2300      	movs	r3, #0
 800c98c:	220a      	movs	r2, #10
 800c98e:	4648      	mov	r0, r9
 800c990:	f000 faee 	bl	800cf70 <__multadd>
 800c994:	f1bb 0f00 	cmp.w	fp, #0
 800c998:	4605      	mov	r5, r0
 800c99a:	dc6f      	bgt.n	800ca7c <_dtoa_r+0x974>
 800c99c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	dc49      	bgt.n	800ca36 <_dtoa_r+0x92e>
 800c9a2:	e06b      	b.n	800ca7c <_dtoa_r+0x974>
 800c9a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9aa:	e73c      	b.n	800c826 <_dtoa_r+0x71e>
 800c9ac:	3fe00000 	.word	0x3fe00000
 800c9b0:	40240000 	.word	0x40240000
 800c9b4:	9b08      	ldr	r3, [sp, #32]
 800c9b6:	1e5c      	subs	r4, r3, #1
 800c9b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	db09      	blt.n	800c9d2 <_dtoa_r+0x8ca>
 800c9be:	1b1c      	subs	r4, r3, r4
 800c9c0:	9b08      	ldr	r3, [sp, #32]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f6bf af30 	bge.w	800c828 <_dtoa_r+0x720>
 800c9c8:	9b04      	ldr	r3, [sp, #16]
 800c9ca:	9a08      	ldr	r2, [sp, #32]
 800c9cc:	1a9e      	subs	r6, r3, r2
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e72b      	b.n	800c82a <_dtoa_r+0x722>
 800c9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9d6:	1ae3      	subs	r3, r4, r3
 800c9d8:	441a      	add	r2, r3
 800c9da:	940a      	str	r4, [sp, #40]	@ 0x28
 800c9dc:	9e04      	ldr	r6, [sp, #16]
 800c9de:	2400      	movs	r4, #0
 800c9e0:	9b08      	ldr	r3, [sp, #32]
 800c9e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9e4:	e721      	b.n	800c82a <_dtoa_r+0x722>
 800c9e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9e8:	9e04      	ldr	r6, [sp, #16]
 800c9ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c9ec:	e728      	b.n	800c840 <_dtoa_r+0x738>
 800c9ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c9f2:	e751      	b.n	800c898 <_dtoa_r+0x790>
 800c9f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9f6:	9903      	ldr	r1, [sp, #12]
 800c9f8:	e750      	b.n	800c89c <_dtoa_r+0x794>
 800c9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9fe:	e751      	b.n	800c8a4 <_dtoa_r+0x79c>
 800ca00:	2300      	movs	r3, #0
 800ca02:	e779      	b.n	800c8f8 <_dtoa_r+0x7f0>
 800ca04:	9b06      	ldr	r3, [sp, #24]
 800ca06:	e777      	b.n	800c8f8 <_dtoa_r+0x7f0>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca0c:	e779      	b.n	800c902 <_dtoa_r+0x7fa>
 800ca0e:	d093      	beq.n	800c938 <_dtoa_r+0x830>
 800ca10:	9a04      	ldr	r2, [sp, #16]
 800ca12:	331c      	adds	r3, #28
 800ca14:	441a      	add	r2, r3
 800ca16:	9204      	str	r2, [sp, #16]
 800ca18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1a:	441e      	add	r6, r3
 800ca1c:	441a      	add	r2, r3
 800ca1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca20:	e78a      	b.n	800c938 <_dtoa_r+0x830>
 800ca22:	4603      	mov	r3, r0
 800ca24:	e7f4      	b.n	800ca10 <_dtoa_r+0x908>
 800ca26:	9b08      	ldr	r3, [sp, #32]
 800ca28:	46b8      	mov	r8, r7
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dc20      	bgt.n	800ca70 <_dtoa_r+0x968>
 800ca2e:	469b      	mov	fp, r3
 800ca30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	dd1e      	ble.n	800ca74 <_dtoa_r+0x96c>
 800ca36:	f1bb 0f00 	cmp.w	fp, #0
 800ca3a:	f47f adb1 	bne.w	800c5a0 <_dtoa_r+0x498>
 800ca3e:	4621      	mov	r1, r4
 800ca40:	465b      	mov	r3, fp
 800ca42:	2205      	movs	r2, #5
 800ca44:	4648      	mov	r0, r9
 800ca46:	f000 fa93 	bl	800cf70 <__multadd>
 800ca4a:	4601      	mov	r1, r0
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	9803      	ldr	r0, [sp, #12]
 800ca50:	f000 fc9e 	bl	800d390 <__mcmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	f77f ada3 	ble.w	800c5a0 <_dtoa_r+0x498>
 800ca5a:	4656      	mov	r6, sl
 800ca5c:	2331      	movs	r3, #49	@ 0x31
 800ca5e:	f108 0801 	add.w	r8, r8, #1
 800ca62:	f806 3b01 	strb.w	r3, [r6], #1
 800ca66:	e59f      	b.n	800c5a8 <_dtoa_r+0x4a0>
 800ca68:	46b8      	mov	r8, r7
 800ca6a:	9c08      	ldr	r4, [sp, #32]
 800ca6c:	4625      	mov	r5, r4
 800ca6e:	e7f4      	b.n	800ca5a <_dtoa_r+0x952>
 800ca70:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ca74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 8101 	beq.w	800cc7e <_dtoa_r+0xb76>
 800ca7c:	2e00      	cmp	r6, #0
 800ca7e:	dd05      	ble.n	800ca8c <_dtoa_r+0x984>
 800ca80:	4629      	mov	r1, r5
 800ca82:	4632      	mov	r2, r6
 800ca84:	4648      	mov	r0, r9
 800ca86:	f000 fc17 	bl	800d2b8 <__lshift>
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d05c      	beq.n	800cb4c <_dtoa_r+0xa44>
 800ca92:	4648      	mov	r0, r9
 800ca94:	6869      	ldr	r1, [r5, #4]
 800ca96:	f000 fa09 	bl	800ceac <_Balloc>
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	b928      	cbnz	r0, 800caaa <_dtoa_r+0x9a2>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800caa4:	4b80      	ldr	r3, [pc, #512]	@ (800cca8 <_dtoa_r+0xba0>)
 800caa6:	f7ff bb43 	b.w	800c130 <_dtoa_r+0x28>
 800caaa:	692a      	ldr	r2, [r5, #16]
 800caac:	f105 010c 	add.w	r1, r5, #12
 800cab0:	3202      	adds	r2, #2
 800cab2:	0092      	lsls	r2, r2, #2
 800cab4:	300c      	adds	r0, #12
 800cab6:	f7ff fa72 	bl	800bf9e <memcpy>
 800caba:	2201      	movs	r2, #1
 800cabc:	4631      	mov	r1, r6
 800cabe:	4648      	mov	r0, r9
 800cac0:	f000 fbfa 	bl	800d2b8 <__lshift>
 800cac4:	462f      	mov	r7, r5
 800cac6:	4605      	mov	r5, r0
 800cac8:	f10a 0301 	add.w	r3, sl, #1
 800cacc:	9304      	str	r3, [sp, #16]
 800cace:	eb0a 030b 	add.w	r3, sl, fp
 800cad2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cad4:	9b06      	ldr	r3, [sp, #24]
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	9309      	str	r3, [sp, #36]	@ 0x24
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	4621      	mov	r1, r4
 800cae0:	9803      	ldr	r0, [sp, #12]
 800cae2:	f103 3bff 	add.w	fp, r3, #4294967295
 800cae6:	f7ff fa87 	bl	800bff8 <quorem>
 800caea:	4603      	mov	r3, r0
 800caec:	4639      	mov	r1, r7
 800caee:	3330      	adds	r3, #48	@ 0x30
 800caf0:	9006      	str	r0, [sp, #24]
 800caf2:	9803      	ldr	r0, [sp, #12]
 800caf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf6:	f000 fc4b 	bl	800d390 <__mcmp>
 800cafa:	462a      	mov	r2, r5
 800cafc:	9008      	str	r0, [sp, #32]
 800cafe:	4621      	mov	r1, r4
 800cb00:	4648      	mov	r0, r9
 800cb02:	f000 fc61 	bl	800d3c8 <__mdiff>
 800cb06:	68c2      	ldr	r2, [r0, #12]
 800cb08:	4606      	mov	r6, r0
 800cb0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb0c:	bb02      	cbnz	r2, 800cb50 <_dtoa_r+0xa48>
 800cb0e:	4601      	mov	r1, r0
 800cb10:	9803      	ldr	r0, [sp, #12]
 800cb12:	f000 fc3d 	bl	800d390 <__mcmp>
 800cb16:	4602      	mov	r2, r0
 800cb18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4648      	mov	r0, r9
 800cb1e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800cb22:	f000 fa03 	bl	800cf2c <_Bfree>
 800cb26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb2a:	9e04      	ldr	r6, [sp, #16]
 800cb2c:	ea42 0103 	orr.w	r1, r2, r3
 800cb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb32:	4319      	orrs	r1, r3
 800cb34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb36:	d10d      	bne.n	800cb54 <_dtoa_r+0xa4c>
 800cb38:	2b39      	cmp	r3, #57	@ 0x39
 800cb3a:	d027      	beq.n	800cb8c <_dtoa_r+0xa84>
 800cb3c:	9a08      	ldr	r2, [sp, #32]
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	dd01      	ble.n	800cb46 <_dtoa_r+0xa3e>
 800cb42:	9b06      	ldr	r3, [sp, #24]
 800cb44:	3331      	adds	r3, #49	@ 0x31
 800cb46:	f88b 3000 	strb.w	r3, [fp]
 800cb4a:	e52e      	b.n	800c5aa <_dtoa_r+0x4a2>
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	e7b9      	b.n	800cac4 <_dtoa_r+0x9bc>
 800cb50:	2201      	movs	r2, #1
 800cb52:	e7e2      	b.n	800cb1a <_dtoa_r+0xa12>
 800cb54:	9908      	ldr	r1, [sp, #32]
 800cb56:	2900      	cmp	r1, #0
 800cb58:	db04      	blt.n	800cb64 <_dtoa_r+0xa5c>
 800cb5a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800cb5c:	4301      	orrs	r1, r0
 800cb5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb60:	4301      	orrs	r1, r0
 800cb62:	d120      	bne.n	800cba6 <_dtoa_r+0xa9e>
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	ddee      	ble.n	800cb46 <_dtoa_r+0xa3e>
 800cb68:	2201      	movs	r2, #1
 800cb6a:	9903      	ldr	r1, [sp, #12]
 800cb6c:	4648      	mov	r0, r9
 800cb6e:	9304      	str	r3, [sp, #16]
 800cb70:	f000 fba2 	bl	800d2b8 <__lshift>
 800cb74:	4621      	mov	r1, r4
 800cb76:	9003      	str	r0, [sp, #12]
 800cb78:	f000 fc0a 	bl	800d390 <__mcmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	9b04      	ldr	r3, [sp, #16]
 800cb80:	dc02      	bgt.n	800cb88 <_dtoa_r+0xa80>
 800cb82:	d1e0      	bne.n	800cb46 <_dtoa_r+0xa3e>
 800cb84:	07da      	lsls	r2, r3, #31
 800cb86:	d5de      	bpl.n	800cb46 <_dtoa_r+0xa3e>
 800cb88:	2b39      	cmp	r3, #57	@ 0x39
 800cb8a:	d1da      	bne.n	800cb42 <_dtoa_r+0xa3a>
 800cb8c:	2339      	movs	r3, #57	@ 0x39
 800cb8e:	f88b 3000 	strb.w	r3, [fp]
 800cb92:	4633      	mov	r3, r6
 800cb94:	461e      	mov	r6, r3
 800cb96:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	2a39      	cmp	r2, #57	@ 0x39
 800cb9e:	d04e      	beq.n	800cc3e <_dtoa_r+0xb36>
 800cba0:	3201      	adds	r2, #1
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e501      	b.n	800c5aa <_dtoa_r+0x4a2>
 800cba6:	2a00      	cmp	r2, #0
 800cba8:	dd03      	ble.n	800cbb2 <_dtoa_r+0xaaa>
 800cbaa:	2b39      	cmp	r3, #57	@ 0x39
 800cbac:	d0ee      	beq.n	800cb8c <_dtoa_r+0xa84>
 800cbae:	3301      	adds	r3, #1
 800cbb0:	e7c9      	b.n	800cb46 <_dtoa_r+0xa3e>
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cbb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbba:	428a      	cmp	r2, r1
 800cbbc:	d028      	beq.n	800cc10 <_dtoa_r+0xb08>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	9903      	ldr	r1, [sp, #12]
 800cbc4:	4648      	mov	r0, r9
 800cbc6:	f000 f9d3 	bl	800cf70 <__multadd>
 800cbca:	42af      	cmp	r7, r5
 800cbcc:	9003      	str	r0, [sp, #12]
 800cbce:	f04f 0300 	mov.w	r3, #0
 800cbd2:	f04f 020a 	mov.w	r2, #10
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4648      	mov	r0, r9
 800cbda:	d107      	bne.n	800cbec <_dtoa_r+0xae4>
 800cbdc:	f000 f9c8 	bl	800cf70 <__multadd>
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	9b04      	ldr	r3, [sp, #16]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	e777      	b.n	800cadc <_dtoa_r+0x9d4>
 800cbec:	f000 f9c0 	bl	800cf70 <__multadd>
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	4607      	mov	r7, r0
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	4648      	mov	r0, r9
 800cbfa:	f000 f9b9 	bl	800cf70 <__multadd>
 800cbfe:	4605      	mov	r5, r0
 800cc00:	e7f0      	b.n	800cbe4 <_dtoa_r+0xadc>
 800cc02:	f1bb 0f00 	cmp.w	fp, #0
 800cc06:	bfcc      	ite	gt
 800cc08:	465e      	movgt	r6, fp
 800cc0a:	2601      	movle	r6, #1
 800cc0c:	2700      	movs	r7, #0
 800cc0e:	4456      	add	r6, sl
 800cc10:	2201      	movs	r2, #1
 800cc12:	9903      	ldr	r1, [sp, #12]
 800cc14:	4648      	mov	r0, r9
 800cc16:	9304      	str	r3, [sp, #16]
 800cc18:	f000 fb4e 	bl	800d2b8 <__lshift>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	9003      	str	r0, [sp, #12]
 800cc20:	f000 fbb6 	bl	800d390 <__mcmp>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	dcb4      	bgt.n	800cb92 <_dtoa_r+0xa8a>
 800cc28:	d102      	bne.n	800cc30 <_dtoa_r+0xb28>
 800cc2a:	9b04      	ldr	r3, [sp, #16]
 800cc2c:	07db      	lsls	r3, r3, #31
 800cc2e:	d4b0      	bmi.n	800cb92 <_dtoa_r+0xa8a>
 800cc30:	4633      	mov	r3, r6
 800cc32:	461e      	mov	r6, r3
 800cc34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc38:	2a30      	cmp	r2, #48	@ 0x30
 800cc3a:	d0fa      	beq.n	800cc32 <_dtoa_r+0xb2a>
 800cc3c:	e4b5      	b.n	800c5aa <_dtoa_r+0x4a2>
 800cc3e:	459a      	cmp	sl, r3
 800cc40:	d1a8      	bne.n	800cb94 <_dtoa_r+0xa8c>
 800cc42:	2331      	movs	r3, #49	@ 0x31
 800cc44:	f108 0801 	add.w	r8, r8, #1
 800cc48:	f88a 3000 	strb.w	r3, [sl]
 800cc4c:	e4ad      	b.n	800c5aa <_dtoa_r+0x4a2>
 800cc4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cc50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ccac <_dtoa_r+0xba4>
 800cc54:	b11b      	cbz	r3, 800cc5e <_dtoa_r+0xb56>
 800cc56:	f10a 0308 	add.w	r3, sl, #8
 800cc5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	4650      	mov	r0, sl
 800cc60:	b017      	add	sp, #92	@ 0x5c
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	f77f ae2e 	ble.w	800c8ca <_dtoa_r+0x7c2>
 800cc6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc70:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc72:	2001      	movs	r0, #1
 800cc74:	e64d      	b.n	800c912 <_dtoa_r+0x80a>
 800cc76:	f1bb 0f00 	cmp.w	fp, #0
 800cc7a:	f77f aed9 	ble.w	800ca30 <_dtoa_r+0x928>
 800cc7e:	4656      	mov	r6, sl
 800cc80:	4621      	mov	r1, r4
 800cc82:	9803      	ldr	r0, [sp, #12]
 800cc84:	f7ff f9b8 	bl	800bff8 <quorem>
 800cc88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cc8c:	f806 3b01 	strb.w	r3, [r6], #1
 800cc90:	eba6 020a 	sub.w	r2, r6, sl
 800cc94:	4593      	cmp	fp, r2
 800cc96:	ddb4      	ble.n	800cc02 <_dtoa_r+0xafa>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	220a      	movs	r2, #10
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	9903      	ldr	r1, [sp, #12]
 800cca0:	f000 f966 	bl	800cf70 <__multadd>
 800cca4:	9003      	str	r0, [sp, #12]
 800cca6:	e7eb      	b.n	800cc80 <_dtoa_r+0xb78>
 800cca8:	08010199 	.word	0x08010199
 800ccac:	08010134 	.word	0x08010134

0800ccb0 <_free_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	d040      	beq.n	800cd3a <_free_r+0x8a>
 800ccb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccbc:	1f0c      	subs	r4, r1, #4
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfb8      	it	lt
 800ccc2:	18e4      	addlt	r4, r4, r3
 800ccc4:	f000 f8e6 	bl	800ce94 <__malloc_lock>
 800ccc8:	4a1c      	ldr	r2, [pc, #112]	@ (800cd3c <_free_r+0x8c>)
 800ccca:	6813      	ldr	r3, [r2, #0]
 800cccc:	b933      	cbnz	r3, 800ccdc <_free_r+0x2c>
 800ccce:	6063      	str	r3, [r4, #4]
 800ccd0:	6014      	str	r4, [r2, #0]
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd8:	f000 b8e2 	b.w	800cea0 <__malloc_unlock>
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d908      	bls.n	800ccf2 <_free_r+0x42>
 800cce0:	6820      	ldr	r0, [r4, #0]
 800cce2:	1821      	adds	r1, r4, r0
 800cce4:	428b      	cmp	r3, r1
 800cce6:	bf01      	itttt	eq
 800cce8:	6819      	ldreq	r1, [r3, #0]
 800ccea:	685b      	ldreq	r3, [r3, #4]
 800ccec:	1809      	addeq	r1, r1, r0
 800ccee:	6021      	streq	r1, [r4, #0]
 800ccf0:	e7ed      	b.n	800ccce <_free_r+0x1e>
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	b10b      	cbz	r3, 800ccfc <_free_r+0x4c>
 800ccf8:	42a3      	cmp	r3, r4
 800ccfa:	d9fa      	bls.n	800ccf2 <_free_r+0x42>
 800ccfc:	6811      	ldr	r1, [r2, #0]
 800ccfe:	1850      	adds	r0, r2, r1
 800cd00:	42a0      	cmp	r0, r4
 800cd02:	d10b      	bne.n	800cd1c <_free_r+0x6c>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	4401      	add	r1, r0
 800cd08:	1850      	adds	r0, r2, r1
 800cd0a:	4283      	cmp	r3, r0
 800cd0c:	6011      	str	r1, [r2, #0]
 800cd0e:	d1e0      	bne.n	800ccd2 <_free_r+0x22>
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	4408      	add	r0, r1
 800cd16:	6010      	str	r0, [r2, #0]
 800cd18:	6053      	str	r3, [r2, #4]
 800cd1a:	e7da      	b.n	800ccd2 <_free_r+0x22>
 800cd1c:	d902      	bls.n	800cd24 <_free_r+0x74>
 800cd1e:	230c      	movs	r3, #12
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	e7d6      	b.n	800ccd2 <_free_r+0x22>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	1821      	adds	r1, r4, r0
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	bf01      	itttt	eq
 800cd2c:	6819      	ldreq	r1, [r3, #0]
 800cd2e:	685b      	ldreq	r3, [r3, #4]
 800cd30:	1809      	addeq	r1, r1, r0
 800cd32:	6021      	streq	r1, [r4, #0]
 800cd34:	6063      	str	r3, [r4, #4]
 800cd36:	6054      	str	r4, [r2, #4]
 800cd38:	e7cb      	b.n	800ccd2 <_free_r+0x22>
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	20000c98 	.word	0x20000c98

0800cd40 <malloc>:
 800cd40:	4b02      	ldr	r3, [pc, #8]	@ (800cd4c <malloc+0xc>)
 800cd42:	4601      	mov	r1, r0
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f000 b825 	b.w	800cd94 <_malloc_r>
 800cd4a:	bf00      	nop
 800cd4c:	20000274 	.word	0x20000274

0800cd50 <sbrk_aligned>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	4e0f      	ldr	r6, [pc, #60]	@ (800cd90 <sbrk_aligned+0x40>)
 800cd54:	460c      	mov	r4, r1
 800cd56:	6831      	ldr	r1, [r6, #0]
 800cd58:	4605      	mov	r5, r0
 800cd5a:	b911      	cbnz	r1, 800cd62 <sbrk_aligned+0x12>
 800cd5c:	f000 fed0 	bl	800db00 <_sbrk_r>
 800cd60:	6030      	str	r0, [r6, #0]
 800cd62:	4621      	mov	r1, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	f000 fecb 	bl	800db00 <_sbrk_r>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d103      	bne.n	800cd76 <sbrk_aligned+0x26>
 800cd6e:	f04f 34ff 	mov.w	r4, #4294967295
 800cd72:	4620      	mov	r0, r4
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	1cc4      	adds	r4, r0, #3
 800cd78:	f024 0403 	bic.w	r4, r4, #3
 800cd7c:	42a0      	cmp	r0, r4
 800cd7e:	d0f8      	beq.n	800cd72 <sbrk_aligned+0x22>
 800cd80:	1a21      	subs	r1, r4, r0
 800cd82:	4628      	mov	r0, r5
 800cd84:	f000 febc 	bl	800db00 <_sbrk_r>
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d1f2      	bne.n	800cd72 <sbrk_aligned+0x22>
 800cd8c:	e7ef      	b.n	800cd6e <sbrk_aligned+0x1e>
 800cd8e:	bf00      	nop
 800cd90:	20000c94 	.word	0x20000c94

0800cd94 <_malloc_r>:
 800cd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd98:	1ccd      	adds	r5, r1, #3
 800cd9a:	f025 0503 	bic.w	r5, r5, #3
 800cd9e:	3508      	adds	r5, #8
 800cda0:	2d0c      	cmp	r5, #12
 800cda2:	bf38      	it	cc
 800cda4:	250c      	movcc	r5, #12
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	4606      	mov	r6, r0
 800cdaa:	db01      	blt.n	800cdb0 <_malloc_r+0x1c>
 800cdac:	42a9      	cmp	r1, r5
 800cdae:	d904      	bls.n	800cdba <_malloc_r+0x26>
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	6033      	str	r3, [r6, #0]
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce90 <_malloc_r+0xfc>
 800cdbe:	f000 f869 	bl	800ce94 <__malloc_lock>
 800cdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc6:	461c      	mov	r4, r3
 800cdc8:	bb44      	cbnz	r4, 800ce1c <_malloc_r+0x88>
 800cdca:	4629      	mov	r1, r5
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff ffbf 	bl	800cd50 <sbrk_aligned>
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	d158      	bne.n	800ce8a <_malloc_r+0xf6>
 800cdd8:	f8d8 4000 	ldr.w	r4, [r8]
 800cddc:	4627      	mov	r7, r4
 800cdde:	2f00      	cmp	r7, #0
 800cde0:	d143      	bne.n	800ce6a <_malloc_r+0xd6>
 800cde2:	2c00      	cmp	r4, #0
 800cde4:	d04b      	beq.n	800ce7e <_malloc_r+0xea>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	4639      	mov	r1, r7
 800cdea:	4630      	mov	r0, r6
 800cdec:	eb04 0903 	add.w	r9, r4, r3
 800cdf0:	f000 fe86 	bl	800db00 <_sbrk_r>
 800cdf4:	4581      	cmp	r9, r0
 800cdf6:	d142      	bne.n	800ce7e <_malloc_r+0xea>
 800cdf8:	6821      	ldr	r1, [r4, #0]
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	1a6d      	subs	r5, r5, r1
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7ff ffa6 	bl	800cd50 <sbrk_aligned>
 800ce04:	3001      	adds	r0, #1
 800ce06:	d03a      	beq.n	800ce7e <_malloc_r+0xea>
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	442b      	add	r3, r5
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	bb62      	cbnz	r2, 800ce70 <_malloc_r+0xdc>
 800ce16:	f8c8 7000 	str.w	r7, [r8]
 800ce1a:	e00f      	b.n	800ce3c <_malloc_r+0xa8>
 800ce1c:	6822      	ldr	r2, [r4, #0]
 800ce1e:	1b52      	subs	r2, r2, r5
 800ce20:	d420      	bmi.n	800ce64 <_malloc_r+0xd0>
 800ce22:	2a0b      	cmp	r2, #11
 800ce24:	d917      	bls.n	800ce56 <_malloc_r+0xc2>
 800ce26:	1961      	adds	r1, r4, r5
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	6025      	str	r5, [r4, #0]
 800ce2c:	bf18      	it	ne
 800ce2e:	6059      	strne	r1, [r3, #4]
 800ce30:	6863      	ldr	r3, [r4, #4]
 800ce32:	bf08      	it	eq
 800ce34:	f8c8 1000 	streq.w	r1, [r8]
 800ce38:	5162      	str	r2, [r4, r5]
 800ce3a:	604b      	str	r3, [r1, #4]
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f000 f82f 	bl	800cea0 <__malloc_unlock>
 800ce42:	f104 000b 	add.w	r0, r4, #11
 800ce46:	1d23      	adds	r3, r4, #4
 800ce48:	f020 0007 	bic.w	r0, r0, #7
 800ce4c:	1ac2      	subs	r2, r0, r3
 800ce4e:	bf1c      	itt	ne
 800ce50:	1a1b      	subne	r3, r3, r0
 800ce52:	50a3      	strne	r3, [r4, r2]
 800ce54:	e7af      	b.n	800cdb6 <_malloc_r+0x22>
 800ce56:	6862      	ldr	r2, [r4, #4]
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	bf0c      	ite	eq
 800ce5c:	f8c8 2000 	streq.w	r2, [r8]
 800ce60:	605a      	strne	r2, [r3, #4]
 800ce62:	e7eb      	b.n	800ce3c <_malloc_r+0xa8>
 800ce64:	4623      	mov	r3, r4
 800ce66:	6864      	ldr	r4, [r4, #4]
 800ce68:	e7ae      	b.n	800cdc8 <_malloc_r+0x34>
 800ce6a:	463c      	mov	r4, r7
 800ce6c:	687f      	ldr	r7, [r7, #4]
 800ce6e:	e7b6      	b.n	800cdde <_malloc_r+0x4a>
 800ce70:	461a      	mov	r2, r3
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	d1fb      	bne.n	800ce70 <_malloc_r+0xdc>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	6053      	str	r3, [r2, #4]
 800ce7c:	e7de      	b.n	800ce3c <_malloc_r+0xa8>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	4630      	mov	r0, r6
 800ce82:	6033      	str	r3, [r6, #0]
 800ce84:	f000 f80c 	bl	800cea0 <__malloc_unlock>
 800ce88:	e794      	b.n	800cdb4 <_malloc_r+0x20>
 800ce8a:	6005      	str	r5, [r0, #0]
 800ce8c:	e7d6      	b.n	800ce3c <_malloc_r+0xa8>
 800ce8e:	bf00      	nop
 800ce90:	20000c98 	.word	0x20000c98

0800ce94 <__malloc_lock>:
 800ce94:	4801      	ldr	r0, [pc, #4]	@ (800ce9c <__malloc_lock+0x8>)
 800ce96:	f7ff b872 	b.w	800bf7e <__retarget_lock_acquire_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	20000c90 	.word	0x20000c90

0800cea0 <__malloc_unlock>:
 800cea0:	4801      	ldr	r0, [pc, #4]	@ (800cea8 <__malloc_unlock+0x8>)
 800cea2:	f7ff b86d 	b.w	800bf80 <__retarget_lock_release_recursive>
 800cea6:	bf00      	nop
 800cea8:	20000c90 	.word	0x20000c90

0800ceac <_Balloc>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	69c6      	ldr	r6, [r0, #28]
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	b976      	cbnz	r6, 800ced4 <_Balloc+0x28>
 800ceb6:	2010      	movs	r0, #16
 800ceb8:	f7ff ff42 	bl	800cd40 <malloc>
 800cebc:	4602      	mov	r2, r0
 800cebe:	61e0      	str	r0, [r4, #28]
 800cec0:	b920      	cbnz	r0, 800cecc <_Balloc+0x20>
 800cec2:	216b      	movs	r1, #107	@ 0x6b
 800cec4:	4b17      	ldr	r3, [pc, #92]	@ (800cf24 <_Balloc+0x78>)
 800cec6:	4818      	ldr	r0, [pc, #96]	@ (800cf28 <_Balloc+0x7c>)
 800cec8:	f7ff f878 	bl	800bfbc <__assert_func>
 800cecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ced0:	6006      	str	r6, [r0, #0]
 800ced2:	60c6      	str	r6, [r0, #12]
 800ced4:	69e6      	ldr	r6, [r4, #28]
 800ced6:	68f3      	ldr	r3, [r6, #12]
 800ced8:	b183      	cbz	r3, 800cefc <_Balloc+0x50>
 800ceda:	69e3      	ldr	r3, [r4, #28]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cee2:	b9b8      	cbnz	r0, 800cf14 <_Balloc+0x68>
 800cee4:	2101      	movs	r1, #1
 800cee6:	fa01 f605 	lsl.w	r6, r1, r5
 800ceea:	1d72      	adds	r2, r6, #5
 800ceec:	4620      	mov	r0, r4
 800ceee:	0092      	lsls	r2, r2, #2
 800cef0:	f000 fe1d 	bl	800db2e <_calloc_r>
 800cef4:	b160      	cbz	r0, 800cf10 <_Balloc+0x64>
 800cef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cefa:	e00e      	b.n	800cf1a <_Balloc+0x6e>
 800cefc:	2221      	movs	r2, #33	@ 0x21
 800cefe:	2104      	movs	r1, #4
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fe14 	bl	800db2e <_calloc_r>
 800cf06:	69e3      	ldr	r3, [r4, #28]
 800cf08:	60f0      	str	r0, [r6, #12]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e4      	bne.n	800ceda <_Balloc+0x2e>
 800cf10:	2000      	movs	r0, #0
 800cf12:	bd70      	pop	{r4, r5, r6, pc}
 800cf14:	6802      	ldr	r2, [r0, #0]
 800cf16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf20:	e7f7      	b.n	800cf12 <_Balloc+0x66>
 800cf22:	bf00      	nop
 800cf24:	08010087 	.word	0x08010087
 800cf28:	080101aa 	.word	0x080101aa

0800cf2c <_Bfree>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	69c6      	ldr	r6, [r0, #28]
 800cf30:	4605      	mov	r5, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	b976      	cbnz	r6, 800cf54 <_Bfree+0x28>
 800cf36:	2010      	movs	r0, #16
 800cf38:	f7ff ff02 	bl	800cd40 <malloc>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	61e8      	str	r0, [r5, #28]
 800cf40:	b920      	cbnz	r0, 800cf4c <_Bfree+0x20>
 800cf42:	218f      	movs	r1, #143	@ 0x8f
 800cf44:	4b08      	ldr	r3, [pc, #32]	@ (800cf68 <_Bfree+0x3c>)
 800cf46:	4809      	ldr	r0, [pc, #36]	@ (800cf6c <_Bfree+0x40>)
 800cf48:	f7ff f838 	bl	800bfbc <__assert_func>
 800cf4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf50:	6006      	str	r6, [r0, #0]
 800cf52:	60c6      	str	r6, [r0, #12]
 800cf54:	b13c      	cbz	r4, 800cf66 <_Bfree+0x3a>
 800cf56:	69eb      	ldr	r3, [r5, #28]
 800cf58:	6862      	ldr	r2, [r4, #4]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf60:	6021      	str	r1, [r4, #0]
 800cf62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	08010087 	.word	0x08010087
 800cf6c:	080101aa 	.word	0x080101aa

0800cf70 <__multadd>:
 800cf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf74:	4607      	mov	r7, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	461e      	mov	r6, r3
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	690d      	ldr	r5, [r1, #16]
 800cf7e:	f101 0c14 	add.w	ip, r1, #20
 800cf82:	f8dc 3000 	ldr.w	r3, [ip]
 800cf86:	3001      	adds	r0, #1
 800cf88:	b299      	uxth	r1, r3
 800cf8a:	fb02 6101 	mla	r1, r2, r1, r6
 800cf8e:	0c1e      	lsrs	r6, r3, #16
 800cf90:	0c0b      	lsrs	r3, r1, #16
 800cf92:	fb02 3306 	mla	r3, r2, r6, r3
 800cf96:	b289      	uxth	r1, r1
 800cf98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf9c:	4285      	cmp	r5, r0
 800cf9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfa2:	f84c 1b04 	str.w	r1, [ip], #4
 800cfa6:	dcec      	bgt.n	800cf82 <__multadd+0x12>
 800cfa8:	b30e      	cbz	r6, 800cfee <__multadd+0x7e>
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	42ab      	cmp	r3, r5
 800cfae:	dc19      	bgt.n	800cfe4 <__multadd+0x74>
 800cfb0:	6861      	ldr	r1, [r4, #4]
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	3101      	adds	r1, #1
 800cfb6:	f7ff ff79 	bl	800ceac <_Balloc>
 800cfba:	4680      	mov	r8, r0
 800cfbc:	b928      	cbnz	r0, 800cfca <__multadd+0x5a>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	21ba      	movs	r1, #186	@ 0xba
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800cff4 <__multadd+0x84>)
 800cfc4:	480c      	ldr	r0, [pc, #48]	@ (800cff8 <__multadd+0x88>)
 800cfc6:	f7fe fff9 	bl	800bfbc <__assert_func>
 800cfca:	6922      	ldr	r2, [r4, #16]
 800cfcc:	f104 010c 	add.w	r1, r4, #12
 800cfd0:	3202      	adds	r2, #2
 800cfd2:	0092      	lsls	r2, r2, #2
 800cfd4:	300c      	adds	r0, #12
 800cfd6:	f7fe ffe2 	bl	800bf9e <memcpy>
 800cfda:	4621      	mov	r1, r4
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f7ff ffa5 	bl	800cf2c <_Bfree>
 800cfe2:	4644      	mov	r4, r8
 800cfe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfe8:	3501      	adds	r5, #1
 800cfea:	615e      	str	r6, [r3, #20]
 800cfec:	6125      	str	r5, [r4, #16]
 800cfee:	4620      	mov	r0, r4
 800cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff4:	08010199 	.word	0x08010199
 800cff8:	080101aa 	.word	0x080101aa

0800cffc <__hi0bits>:
 800cffc:	4603      	mov	r3, r0
 800cffe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d002:	bf3a      	itte	cc
 800d004:	0403      	lslcc	r3, r0, #16
 800d006:	2010      	movcc	r0, #16
 800d008:	2000      	movcs	r0, #0
 800d00a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d00e:	bf3c      	itt	cc
 800d010:	021b      	lslcc	r3, r3, #8
 800d012:	3008      	addcc	r0, #8
 800d014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d018:	bf3c      	itt	cc
 800d01a:	011b      	lslcc	r3, r3, #4
 800d01c:	3004      	addcc	r0, #4
 800d01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d022:	bf3c      	itt	cc
 800d024:	009b      	lslcc	r3, r3, #2
 800d026:	3002      	addcc	r0, #2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db05      	blt.n	800d038 <__hi0bits+0x3c>
 800d02c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d030:	f100 0001 	add.w	r0, r0, #1
 800d034:	bf08      	it	eq
 800d036:	2020      	moveq	r0, #32
 800d038:	4770      	bx	lr

0800d03a <__lo0bits>:
 800d03a:	6803      	ldr	r3, [r0, #0]
 800d03c:	4602      	mov	r2, r0
 800d03e:	f013 0007 	ands.w	r0, r3, #7
 800d042:	d00b      	beq.n	800d05c <__lo0bits+0x22>
 800d044:	07d9      	lsls	r1, r3, #31
 800d046:	d421      	bmi.n	800d08c <__lo0bits+0x52>
 800d048:	0798      	lsls	r0, r3, #30
 800d04a:	bf49      	itett	mi
 800d04c:	085b      	lsrmi	r3, r3, #1
 800d04e:	089b      	lsrpl	r3, r3, #2
 800d050:	2001      	movmi	r0, #1
 800d052:	6013      	strmi	r3, [r2, #0]
 800d054:	bf5c      	itt	pl
 800d056:	2002      	movpl	r0, #2
 800d058:	6013      	strpl	r3, [r2, #0]
 800d05a:	4770      	bx	lr
 800d05c:	b299      	uxth	r1, r3
 800d05e:	b909      	cbnz	r1, 800d064 <__lo0bits+0x2a>
 800d060:	2010      	movs	r0, #16
 800d062:	0c1b      	lsrs	r3, r3, #16
 800d064:	b2d9      	uxtb	r1, r3
 800d066:	b909      	cbnz	r1, 800d06c <__lo0bits+0x32>
 800d068:	3008      	adds	r0, #8
 800d06a:	0a1b      	lsrs	r3, r3, #8
 800d06c:	0719      	lsls	r1, r3, #28
 800d06e:	bf04      	itt	eq
 800d070:	091b      	lsreq	r3, r3, #4
 800d072:	3004      	addeq	r0, #4
 800d074:	0799      	lsls	r1, r3, #30
 800d076:	bf04      	itt	eq
 800d078:	089b      	lsreq	r3, r3, #2
 800d07a:	3002      	addeq	r0, #2
 800d07c:	07d9      	lsls	r1, r3, #31
 800d07e:	d403      	bmi.n	800d088 <__lo0bits+0x4e>
 800d080:	085b      	lsrs	r3, r3, #1
 800d082:	f100 0001 	add.w	r0, r0, #1
 800d086:	d003      	beq.n	800d090 <__lo0bits+0x56>
 800d088:	6013      	str	r3, [r2, #0]
 800d08a:	4770      	bx	lr
 800d08c:	2000      	movs	r0, #0
 800d08e:	4770      	bx	lr
 800d090:	2020      	movs	r0, #32
 800d092:	4770      	bx	lr

0800d094 <__i2b>:
 800d094:	b510      	push	{r4, lr}
 800d096:	460c      	mov	r4, r1
 800d098:	2101      	movs	r1, #1
 800d09a:	f7ff ff07 	bl	800ceac <_Balloc>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	b928      	cbnz	r0, 800d0ae <__i2b+0x1a>
 800d0a2:	f240 1145 	movw	r1, #325	@ 0x145
 800d0a6:	4b04      	ldr	r3, [pc, #16]	@ (800d0b8 <__i2b+0x24>)
 800d0a8:	4804      	ldr	r0, [pc, #16]	@ (800d0bc <__i2b+0x28>)
 800d0aa:	f7fe ff87 	bl	800bfbc <__assert_func>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	6144      	str	r4, [r0, #20]
 800d0b2:	6103      	str	r3, [r0, #16]
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	bf00      	nop
 800d0b8:	08010199 	.word	0x08010199
 800d0bc:	080101aa 	.word	0x080101aa

0800d0c0 <__multiply>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	4617      	mov	r7, r2
 800d0c6:	690a      	ldr	r2, [r1, #16]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	4689      	mov	r9, r1
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	bfa2      	ittt	ge
 800d0d0:	463b      	movge	r3, r7
 800d0d2:	460f      	movge	r7, r1
 800d0d4:	4699      	movge	r9, r3
 800d0d6:	693d      	ldr	r5, [r7, #16]
 800d0d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	eb05 060a 	add.w	r6, r5, sl
 800d0e4:	42b3      	cmp	r3, r6
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	bfb8      	it	lt
 800d0ea:	3101      	addlt	r1, #1
 800d0ec:	f7ff fede 	bl	800ceac <_Balloc>
 800d0f0:	b930      	cbnz	r0, 800d100 <__multiply+0x40>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d0f8:	4b40      	ldr	r3, [pc, #256]	@ (800d1fc <__multiply+0x13c>)
 800d0fa:	4841      	ldr	r0, [pc, #260]	@ (800d200 <__multiply+0x140>)
 800d0fc:	f7fe ff5e 	bl	800bfbc <__assert_func>
 800d100:	f100 0414 	add.w	r4, r0, #20
 800d104:	4623      	mov	r3, r4
 800d106:	2200      	movs	r2, #0
 800d108:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d10c:	4573      	cmp	r3, lr
 800d10e:	d320      	bcc.n	800d152 <__multiply+0x92>
 800d110:	f107 0814 	add.w	r8, r7, #20
 800d114:	f109 0114 	add.w	r1, r9, #20
 800d118:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d11c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d120:	9302      	str	r3, [sp, #8]
 800d122:	1beb      	subs	r3, r5, r7
 800d124:	3b15      	subs	r3, #21
 800d126:	f023 0303 	bic.w	r3, r3, #3
 800d12a:	3304      	adds	r3, #4
 800d12c:	3715      	adds	r7, #21
 800d12e:	42bd      	cmp	r5, r7
 800d130:	bf38      	it	cc
 800d132:	2304      	movcc	r3, #4
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	9b02      	ldr	r3, [sp, #8]
 800d138:	9103      	str	r1, [sp, #12]
 800d13a:	428b      	cmp	r3, r1
 800d13c:	d80c      	bhi.n	800d158 <__multiply+0x98>
 800d13e:	2e00      	cmp	r6, #0
 800d140:	dd03      	ble.n	800d14a <__multiply+0x8a>
 800d142:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d146:	2b00      	cmp	r3, #0
 800d148:	d055      	beq.n	800d1f6 <__multiply+0x136>
 800d14a:	6106      	str	r6, [r0, #16]
 800d14c:	b005      	add	sp, #20
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d152:	f843 2b04 	str.w	r2, [r3], #4
 800d156:	e7d9      	b.n	800d10c <__multiply+0x4c>
 800d158:	f8b1 a000 	ldrh.w	sl, [r1]
 800d15c:	f1ba 0f00 	cmp.w	sl, #0
 800d160:	d01f      	beq.n	800d1a2 <__multiply+0xe2>
 800d162:	46c4      	mov	ip, r8
 800d164:	46a1      	mov	r9, r4
 800d166:	2700      	movs	r7, #0
 800d168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d16c:	f8d9 3000 	ldr.w	r3, [r9]
 800d170:	fa1f fb82 	uxth.w	fp, r2
 800d174:	b29b      	uxth	r3, r3
 800d176:	fb0a 330b 	mla	r3, sl, fp, r3
 800d17a:	443b      	add	r3, r7
 800d17c:	f8d9 7000 	ldr.w	r7, [r9]
 800d180:	0c12      	lsrs	r2, r2, #16
 800d182:	0c3f      	lsrs	r7, r7, #16
 800d184:	fb0a 7202 	mla	r2, sl, r2, r7
 800d188:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d192:	4565      	cmp	r5, ip
 800d194:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d198:	f849 3b04 	str.w	r3, [r9], #4
 800d19c:	d8e4      	bhi.n	800d168 <__multiply+0xa8>
 800d19e:	9b01      	ldr	r3, [sp, #4]
 800d1a0:	50e7      	str	r7, [r4, r3]
 800d1a2:	9b03      	ldr	r3, [sp, #12]
 800d1a4:	3104      	adds	r1, #4
 800d1a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1aa:	f1b9 0f00 	cmp.w	r9, #0
 800d1ae:	d020      	beq.n	800d1f2 <__multiply+0x132>
 800d1b0:	4647      	mov	r7, r8
 800d1b2:	46a4      	mov	ip, r4
 800d1b4:	f04f 0a00 	mov.w	sl, #0
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	f8b7 b000 	ldrh.w	fp, [r7]
 800d1be:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	fb09 220b 	mla	r2, r9, fp, r2
 800d1c8:	4452      	add	r2, sl
 800d1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d1d2:	f857 3b04 	ldr.w	r3, [r7], #4
 800d1d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1da:	f8bc 3000 	ldrh.w	r3, [ip]
 800d1de:	42bd      	cmp	r5, r7
 800d1e0:	fb09 330a 	mla	r3, r9, sl, r3
 800d1e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d1e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1ec:	d8e5      	bhi.n	800d1ba <__multiply+0xfa>
 800d1ee:	9a01      	ldr	r2, [sp, #4]
 800d1f0:	50a3      	str	r3, [r4, r2]
 800d1f2:	3404      	adds	r4, #4
 800d1f4:	e79f      	b.n	800d136 <__multiply+0x76>
 800d1f6:	3e01      	subs	r6, #1
 800d1f8:	e7a1      	b.n	800d13e <__multiply+0x7e>
 800d1fa:	bf00      	nop
 800d1fc:	08010199 	.word	0x08010199
 800d200:	080101aa 	.word	0x080101aa

0800d204 <__pow5mult>:
 800d204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d208:	4615      	mov	r5, r2
 800d20a:	f012 0203 	ands.w	r2, r2, #3
 800d20e:	4607      	mov	r7, r0
 800d210:	460e      	mov	r6, r1
 800d212:	d007      	beq.n	800d224 <__pow5mult+0x20>
 800d214:	4c25      	ldr	r4, [pc, #148]	@ (800d2ac <__pow5mult+0xa8>)
 800d216:	3a01      	subs	r2, #1
 800d218:	2300      	movs	r3, #0
 800d21a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d21e:	f7ff fea7 	bl	800cf70 <__multadd>
 800d222:	4606      	mov	r6, r0
 800d224:	10ad      	asrs	r5, r5, #2
 800d226:	d03d      	beq.n	800d2a4 <__pow5mult+0xa0>
 800d228:	69fc      	ldr	r4, [r7, #28]
 800d22a:	b97c      	cbnz	r4, 800d24c <__pow5mult+0x48>
 800d22c:	2010      	movs	r0, #16
 800d22e:	f7ff fd87 	bl	800cd40 <malloc>
 800d232:	4602      	mov	r2, r0
 800d234:	61f8      	str	r0, [r7, #28]
 800d236:	b928      	cbnz	r0, 800d244 <__pow5mult+0x40>
 800d238:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d23c:	4b1c      	ldr	r3, [pc, #112]	@ (800d2b0 <__pow5mult+0xac>)
 800d23e:	481d      	ldr	r0, [pc, #116]	@ (800d2b4 <__pow5mult+0xb0>)
 800d240:	f7fe febc 	bl	800bfbc <__assert_func>
 800d244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d248:	6004      	str	r4, [r0, #0]
 800d24a:	60c4      	str	r4, [r0, #12]
 800d24c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d254:	b94c      	cbnz	r4, 800d26a <__pow5mult+0x66>
 800d256:	f240 2171 	movw	r1, #625	@ 0x271
 800d25a:	4638      	mov	r0, r7
 800d25c:	f7ff ff1a 	bl	800d094 <__i2b>
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	f8c8 0008 	str.w	r0, [r8, #8]
 800d268:	6003      	str	r3, [r0, #0]
 800d26a:	f04f 0900 	mov.w	r9, #0
 800d26e:	07eb      	lsls	r3, r5, #31
 800d270:	d50a      	bpl.n	800d288 <__pow5mult+0x84>
 800d272:	4631      	mov	r1, r6
 800d274:	4622      	mov	r2, r4
 800d276:	4638      	mov	r0, r7
 800d278:	f7ff ff22 	bl	800d0c0 <__multiply>
 800d27c:	4680      	mov	r8, r0
 800d27e:	4631      	mov	r1, r6
 800d280:	4638      	mov	r0, r7
 800d282:	f7ff fe53 	bl	800cf2c <_Bfree>
 800d286:	4646      	mov	r6, r8
 800d288:	106d      	asrs	r5, r5, #1
 800d28a:	d00b      	beq.n	800d2a4 <__pow5mult+0xa0>
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	b938      	cbnz	r0, 800d2a0 <__pow5mult+0x9c>
 800d290:	4622      	mov	r2, r4
 800d292:	4621      	mov	r1, r4
 800d294:	4638      	mov	r0, r7
 800d296:	f7ff ff13 	bl	800d0c0 <__multiply>
 800d29a:	6020      	str	r0, [r4, #0]
 800d29c:	f8c0 9000 	str.w	r9, [r0]
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	e7e4      	b.n	800d26e <__pow5mult+0x6a>
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08010220 	.word	0x08010220
 800d2b0:	08010087 	.word	0x08010087
 800d2b4:	080101aa 	.word	0x080101aa

0800d2b8 <__lshift>:
 800d2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2bc:	460c      	mov	r4, r1
 800d2be:	4607      	mov	r7, r0
 800d2c0:	4691      	mov	r9, r2
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	6849      	ldr	r1, [r1, #4]
 800d2c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2ca:	68a3      	ldr	r3, [r4, #8]
 800d2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2d0:	f108 0601 	add.w	r6, r8, #1
 800d2d4:	42b3      	cmp	r3, r6
 800d2d6:	db0b      	blt.n	800d2f0 <__lshift+0x38>
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f7ff fde7 	bl	800ceac <_Balloc>
 800d2de:	4605      	mov	r5, r0
 800d2e0:	b948      	cbnz	r0, 800d2f6 <__lshift+0x3e>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d2e8:	4b27      	ldr	r3, [pc, #156]	@ (800d388 <__lshift+0xd0>)
 800d2ea:	4828      	ldr	r0, [pc, #160]	@ (800d38c <__lshift+0xd4>)
 800d2ec:	f7fe fe66 	bl	800bfbc <__assert_func>
 800d2f0:	3101      	adds	r1, #1
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	e7ee      	b.n	800d2d4 <__lshift+0x1c>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f100 0114 	add.w	r1, r0, #20
 800d2fc:	f100 0210 	add.w	r2, r0, #16
 800d300:	4618      	mov	r0, r3
 800d302:	4553      	cmp	r3, sl
 800d304:	db33      	blt.n	800d36e <__lshift+0xb6>
 800d306:	6920      	ldr	r0, [r4, #16]
 800d308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d30c:	f104 0314 	add.w	r3, r4, #20
 800d310:	f019 091f 	ands.w	r9, r9, #31
 800d314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d31c:	d02b      	beq.n	800d376 <__lshift+0xbe>
 800d31e:	468a      	mov	sl, r1
 800d320:	2200      	movs	r2, #0
 800d322:	f1c9 0e20 	rsb	lr, r9, #32
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	fa00 f009 	lsl.w	r0, r0, r9
 800d32c:	4310      	orrs	r0, r2
 800d32e:	f84a 0b04 	str.w	r0, [sl], #4
 800d332:	f853 2b04 	ldr.w	r2, [r3], #4
 800d336:	459c      	cmp	ip, r3
 800d338:	fa22 f20e 	lsr.w	r2, r2, lr
 800d33c:	d8f3      	bhi.n	800d326 <__lshift+0x6e>
 800d33e:	ebac 0304 	sub.w	r3, ip, r4
 800d342:	3b15      	subs	r3, #21
 800d344:	f023 0303 	bic.w	r3, r3, #3
 800d348:	3304      	adds	r3, #4
 800d34a:	f104 0015 	add.w	r0, r4, #21
 800d34e:	4560      	cmp	r0, ip
 800d350:	bf88      	it	hi
 800d352:	2304      	movhi	r3, #4
 800d354:	50ca      	str	r2, [r1, r3]
 800d356:	b10a      	cbz	r2, 800d35c <__lshift+0xa4>
 800d358:	f108 0602 	add.w	r6, r8, #2
 800d35c:	3e01      	subs	r6, #1
 800d35e:	4638      	mov	r0, r7
 800d360:	4621      	mov	r1, r4
 800d362:	612e      	str	r6, [r5, #16]
 800d364:	f7ff fde2 	bl	800cf2c <_Bfree>
 800d368:	4628      	mov	r0, r5
 800d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d372:	3301      	adds	r3, #1
 800d374:	e7c5      	b.n	800d302 <__lshift+0x4a>
 800d376:	3904      	subs	r1, #4
 800d378:	f853 2b04 	ldr.w	r2, [r3], #4
 800d37c:	459c      	cmp	ip, r3
 800d37e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d382:	d8f9      	bhi.n	800d378 <__lshift+0xc0>
 800d384:	e7ea      	b.n	800d35c <__lshift+0xa4>
 800d386:	bf00      	nop
 800d388:	08010199 	.word	0x08010199
 800d38c:	080101aa 	.word	0x080101aa

0800d390 <__mcmp>:
 800d390:	4603      	mov	r3, r0
 800d392:	690a      	ldr	r2, [r1, #16]
 800d394:	6900      	ldr	r0, [r0, #16]
 800d396:	b530      	push	{r4, r5, lr}
 800d398:	1a80      	subs	r0, r0, r2
 800d39a:	d10e      	bne.n	800d3ba <__mcmp+0x2a>
 800d39c:	3314      	adds	r3, #20
 800d39e:	3114      	adds	r1, #20
 800d3a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3b0:	4295      	cmp	r5, r2
 800d3b2:	d003      	beq.n	800d3bc <__mcmp+0x2c>
 800d3b4:	d205      	bcs.n	800d3c2 <__mcmp+0x32>
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ba:	bd30      	pop	{r4, r5, pc}
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d3f3      	bcc.n	800d3a8 <__mcmp+0x18>
 800d3c0:	e7fb      	b.n	800d3ba <__mcmp+0x2a>
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	e7f9      	b.n	800d3ba <__mcmp+0x2a>
	...

0800d3c8 <__mdiff>:
 800d3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	4689      	mov	r9, r1
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4648      	mov	r0, r9
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	f7ff ffdb 	bl	800d390 <__mcmp>
 800d3da:	1e05      	subs	r5, r0, #0
 800d3dc:	d112      	bne.n	800d404 <__mdiff+0x3c>
 800d3de:	4629      	mov	r1, r5
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7ff fd63 	bl	800ceac <_Balloc>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	b928      	cbnz	r0, 800d3f6 <__mdiff+0x2e>
 800d3ea:	f240 2137 	movw	r1, #567	@ 0x237
 800d3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d4e8 <__mdiff+0x120>)
 800d3f0:	483e      	ldr	r0, [pc, #248]	@ (800d4ec <__mdiff+0x124>)
 800d3f2:	f7fe fde3 	bl	800bfbc <__assert_func>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	b003      	add	sp, #12
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	bfbc      	itt	lt
 800d406:	464b      	movlt	r3, r9
 800d408:	46a1      	movlt	r9, r4
 800d40a:	4630      	mov	r0, r6
 800d40c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d410:	bfba      	itte	lt
 800d412:	461c      	movlt	r4, r3
 800d414:	2501      	movlt	r5, #1
 800d416:	2500      	movge	r5, #0
 800d418:	f7ff fd48 	bl	800ceac <_Balloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	b918      	cbnz	r0, 800d428 <__mdiff+0x60>
 800d420:	f240 2145 	movw	r1, #581	@ 0x245
 800d424:	4b30      	ldr	r3, [pc, #192]	@ (800d4e8 <__mdiff+0x120>)
 800d426:	e7e3      	b.n	800d3f0 <__mdiff+0x28>
 800d428:	f100 0b14 	add.w	fp, r0, #20
 800d42c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d430:	f109 0310 	add.w	r3, r9, #16
 800d434:	60c5      	str	r5, [r0, #12]
 800d436:	f04f 0c00 	mov.w	ip, #0
 800d43a:	f109 0514 	add.w	r5, r9, #20
 800d43e:	46d9      	mov	r9, fp
 800d440:	6926      	ldr	r6, [r4, #16]
 800d442:	f104 0e14 	add.w	lr, r4, #20
 800d446:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d44a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	9b01      	ldr	r3, [sp, #4]
 800d452:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d456:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d45a:	b281      	uxth	r1, r0
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	fa1f f38a 	uxth.w	r3, sl
 800d462:	1a5b      	subs	r3, r3, r1
 800d464:	0c00      	lsrs	r0, r0, #16
 800d466:	4463      	add	r3, ip
 800d468:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d46c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d470:	b29b      	uxth	r3, r3
 800d472:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d476:	4576      	cmp	r6, lr
 800d478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d47c:	f849 3b04 	str.w	r3, [r9], #4
 800d480:	d8e6      	bhi.n	800d450 <__mdiff+0x88>
 800d482:	1b33      	subs	r3, r6, r4
 800d484:	3b15      	subs	r3, #21
 800d486:	f023 0303 	bic.w	r3, r3, #3
 800d48a:	3415      	adds	r4, #21
 800d48c:	3304      	adds	r3, #4
 800d48e:	42a6      	cmp	r6, r4
 800d490:	bf38      	it	cc
 800d492:	2304      	movcc	r3, #4
 800d494:	441d      	add	r5, r3
 800d496:	445b      	add	r3, fp
 800d498:	461e      	mov	r6, r3
 800d49a:	462c      	mov	r4, r5
 800d49c:	4544      	cmp	r4, r8
 800d49e:	d30e      	bcc.n	800d4be <__mdiff+0xf6>
 800d4a0:	f108 0103 	add.w	r1, r8, #3
 800d4a4:	1b49      	subs	r1, r1, r5
 800d4a6:	f021 0103 	bic.w	r1, r1, #3
 800d4aa:	3d03      	subs	r5, #3
 800d4ac:	45a8      	cmp	r8, r5
 800d4ae:	bf38      	it	cc
 800d4b0:	2100      	movcc	r1, #0
 800d4b2:	440b      	add	r3, r1
 800d4b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4b8:	b199      	cbz	r1, 800d4e2 <__mdiff+0x11a>
 800d4ba:	6117      	str	r7, [r2, #16]
 800d4bc:	e79e      	b.n	800d3fc <__mdiff+0x34>
 800d4be:	46e6      	mov	lr, ip
 800d4c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4c4:	fa1f fc81 	uxth.w	ip, r1
 800d4c8:	44f4      	add	ip, lr
 800d4ca:	0c08      	lsrs	r0, r1, #16
 800d4cc:	4471      	add	r1, lr
 800d4ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4d2:	b289      	uxth	r1, r1
 800d4d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4dc:	f846 1b04 	str.w	r1, [r6], #4
 800d4e0:	e7dc      	b.n	800d49c <__mdiff+0xd4>
 800d4e2:	3f01      	subs	r7, #1
 800d4e4:	e7e6      	b.n	800d4b4 <__mdiff+0xec>
 800d4e6:	bf00      	nop
 800d4e8:	08010199 	.word	0x08010199
 800d4ec:	080101aa 	.word	0x080101aa

0800d4f0 <__d2b>:
 800d4f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	4690      	mov	r8, r2
 800d4f8:	4699      	mov	r9, r3
 800d4fa:	9e08      	ldr	r6, [sp, #32]
 800d4fc:	f7ff fcd6 	bl	800ceac <_Balloc>
 800d500:	4604      	mov	r4, r0
 800d502:	b930      	cbnz	r0, 800d512 <__d2b+0x22>
 800d504:	4602      	mov	r2, r0
 800d506:	f240 310f 	movw	r1, #783	@ 0x30f
 800d50a:	4b23      	ldr	r3, [pc, #140]	@ (800d598 <__d2b+0xa8>)
 800d50c:	4823      	ldr	r0, [pc, #140]	@ (800d59c <__d2b+0xac>)
 800d50e:	f7fe fd55 	bl	800bfbc <__assert_func>
 800d512:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d516:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d51a:	b10d      	cbz	r5, 800d520 <__d2b+0x30>
 800d51c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	f1b8 0300 	subs.w	r3, r8, #0
 800d526:	d024      	beq.n	800d572 <__d2b+0x82>
 800d528:	4668      	mov	r0, sp
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	f7ff fd85 	bl	800d03a <__lo0bits>
 800d530:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d534:	b1d8      	cbz	r0, 800d56e <__d2b+0x7e>
 800d536:	f1c0 0320 	rsb	r3, r0, #32
 800d53a:	fa02 f303 	lsl.w	r3, r2, r3
 800d53e:	430b      	orrs	r3, r1
 800d540:	40c2      	lsrs	r2, r0
 800d542:	6163      	str	r3, [r4, #20]
 800d544:	9201      	str	r2, [sp, #4]
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	bf0c      	ite	eq
 800d54c:	2201      	moveq	r2, #1
 800d54e:	2202      	movne	r2, #2
 800d550:	61a3      	str	r3, [r4, #24]
 800d552:	6122      	str	r2, [r4, #16]
 800d554:	b1ad      	cbz	r5, 800d582 <__d2b+0x92>
 800d556:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d55a:	4405      	add	r5, r0
 800d55c:	6035      	str	r5, [r6, #0]
 800d55e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d564:	6018      	str	r0, [r3, #0]
 800d566:	4620      	mov	r0, r4
 800d568:	b002      	add	sp, #8
 800d56a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d56e:	6161      	str	r1, [r4, #20]
 800d570:	e7e9      	b.n	800d546 <__d2b+0x56>
 800d572:	a801      	add	r0, sp, #4
 800d574:	f7ff fd61 	bl	800d03a <__lo0bits>
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	6163      	str	r3, [r4, #20]
 800d57e:	3020      	adds	r0, #32
 800d580:	e7e7      	b.n	800d552 <__d2b+0x62>
 800d582:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d58a:	6030      	str	r0, [r6, #0]
 800d58c:	6918      	ldr	r0, [r3, #16]
 800d58e:	f7ff fd35 	bl	800cffc <__hi0bits>
 800d592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d596:	e7e4      	b.n	800d562 <__d2b+0x72>
 800d598:	08010199 	.word	0x08010199
 800d59c:	080101aa 	.word	0x080101aa

0800d5a0 <__ssputs_r>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	461f      	mov	r7, r3
 800d5a6:	688e      	ldr	r6, [r1, #8]
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	42be      	cmp	r6, r7
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	4690      	mov	r8, r2
 800d5b0:	680b      	ldr	r3, [r1, #0]
 800d5b2:	d82d      	bhi.n	800d610 <__ssputs_r+0x70>
 800d5b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5bc:	d026      	beq.n	800d60c <__ssputs_r+0x6c>
 800d5be:	6965      	ldr	r5, [r4, #20]
 800d5c0:	6909      	ldr	r1, [r1, #16]
 800d5c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5c6:	eba3 0901 	sub.w	r9, r3, r1
 800d5ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5ce:	1c7b      	adds	r3, r7, #1
 800d5d0:	444b      	add	r3, r9
 800d5d2:	106d      	asrs	r5, r5, #1
 800d5d4:	429d      	cmp	r5, r3
 800d5d6:	bf38      	it	cc
 800d5d8:	461d      	movcc	r5, r3
 800d5da:	0553      	lsls	r3, r2, #21
 800d5dc:	d527      	bpl.n	800d62e <__ssputs_r+0x8e>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7ff fbd8 	bl	800cd94 <_malloc_r>
 800d5e4:	4606      	mov	r6, r0
 800d5e6:	b360      	cbz	r0, 800d642 <__ssputs_r+0xa2>
 800d5e8:	464a      	mov	r2, r9
 800d5ea:	6921      	ldr	r1, [r4, #16]
 800d5ec:	f7fe fcd7 	bl	800bf9e <memcpy>
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	6126      	str	r6, [r4, #16]
 800d5fe:	444e      	add	r6, r9
 800d600:	6026      	str	r6, [r4, #0]
 800d602:	463e      	mov	r6, r7
 800d604:	6165      	str	r5, [r4, #20]
 800d606:	eba5 0509 	sub.w	r5, r5, r9
 800d60a:	60a5      	str	r5, [r4, #8]
 800d60c:	42be      	cmp	r6, r7
 800d60e:	d900      	bls.n	800d612 <__ssputs_r+0x72>
 800d610:	463e      	mov	r6, r7
 800d612:	4632      	mov	r2, r6
 800d614:	4641      	mov	r1, r8
 800d616:	6820      	ldr	r0, [r4, #0]
 800d618:	f000 fa35 	bl	800da86 <memmove>
 800d61c:	2000      	movs	r0, #0
 800d61e:	68a3      	ldr	r3, [r4, #8]
 800d620:	1b9b      	subs	r3, r3, r6
 800d622:	60a3      	str	r3, [r4, #8]
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	4433      	add	r3, r6
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62e:	462a      	mov	r2, r5
 800d630:	f000 faa3 	bl	800db7a <_realloc_r>
 800d634:	4606      	mov	r6, r0
 800d636:	2800      	cmp	r0, #0
 800d638:	d1e0      	bne.n	800d5fc <__ssputs_r+0x5c>
 800d63a:	4650      	mov	r0, sl
 800d63c:	6921      	ldr	r1, [r4, #16]
 800d63e:	f7ff fb37 	bl	800ccb0 <_free_r>
 800d642:	230c      	movs	r3, #12
 800d644:	f8ca 3000 	str.w	r3, [sl]
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d652:	81a3      	strh	r3, [r4, #12]
 800d654:	e7e9      	b.n	800d62a <__ssputs_r+0x8a>
	...

0800d658 <_svfiprintf_r>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	4698      	mov	r8, r3
 800d65e:	898b      	ldrh	r3, [r1, #12]
 800d660:	4607      	mov	r7, r0
 800d662:	061b      	lsls	r3, r3, #24
 800d664:	460d      	mov	r5, r1
 800d666:	4614      	mov	r4, r2
 800d668:	b09d      	sub	sp, #116	@ 0x74
 800d66a:	d510      	bpl.n	800d68e <_svfiprintf_r+0x36>
 800d66c:	690b      	ldr	r3, [r1, #16]
 800d66e:	b973      	cbnz	r3, 800d68e <_svfiprintf_r+0x36>
 800d670:	2140      	movs	r1, #64	@ 0x40
 800d672:	f7ff fb8f 	bl	800cd94 <_malloc_r>
 800d676:	6028      	str	r0, [r5, #0]
 800d678:	6128      	str	r0, [r5, #16]
 800d67a:	b930      	cbnz	r0, 800d68a <_svfiprintf_r+0x32>
 800d67c:	230c      	movs	r3, #12
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	f04f 30ff 	mov.w	r0, #4294967295
 800d684:	b01d      	add	sp, #116	@ 0x74
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	2340      	movs	r3, #64	@ 0x40
 800d68c:	616b      	str	r3, [r5, #20]
 800d68e:	2300      	movs	r3, #0
 800d690:	9309      	str	r3, [sp, #36]	@ 0x24
 800d692:	2320      	movs	r3, #32
 800d694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d698:	2330      	movs	r3, #48	@ 0x30
 800d69a:	f04f 0901 	mov.w	r9, #1
 800d69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d83c <_svfiprintf_r+0x1e4>
 800d6a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6aa:	4623      	mov	r3, r4
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b2:	b10a      	cbz	r2, 800d6b8 <_svfiprintf_r+0x60>
 800d6b4:	2a25      	cmp	r2, #37	@ 0x25
 800d6b6:	d1f9      	bne.n	800d6ac <_svfiprintf_r+0x54>
 800d6b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6bc:	d00b      	beq.n	800d6d6 <_svfiprintf_r+0x7e>
 800d6be:	465b      	mov	r3, fp
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	f7ff ff6b 	bl	800d5a0 <__ssputs_r>
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	f000 80a7 	beq.w	800d81e <_svfiprintf_r+0x1c6>
 800d6d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6d2:	445a      	add	r2, fp
 800d6d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 809f 	beq.w	800d81e <_svfiprintf_r+0x1c6>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6ea:	f10a 0a01 	add.w	sl, sl, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6f8:	4654      	mov	r4, sl
 800d6fa:	2205      	movs	r2, #5
 800d6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d700:	484e      	ldr	r0, [pc, #312]	@ (800d83c <_svfiprintf_r+0x1e4>)
 800d702:	f7fe fc3e 	bl	800bf82 <memchr>
 800d706:	9a04      	ldr	r2, [sp, #16]
 800d708:	b9d8      	cbnz	r0, 800d742 <_svfiprintf_r+0xea>
 800d70a:	06d0      	lsls	r0, r2, #27
 800d70c:	bf44      	itt	mi
 800d70e:	2320      	movmi	r3, #32
 800d710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d714:	0711      	lsls	r1, r2, #28
 800d716:	bf44      	itt	mi
 800d718:	232b      	movmi	r3, #43	@ 0x2b
 800d71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d71e:	f89a 3000 	ldrb.w	r3, [sl]
 800d722:	2b2a      	cmp	r3, #42	@ 0x2a
 800d724:	d015      	beq.n	800d752 <_svfiprintf_r+0xfa>
 800d726:	4654      	mov	r4, sl
 800d728:	2000      	movs	r0, #0
 800d72a:	f04f 0c0a 	mov.w	ip, #10
 800d72e:	9a07      	ldr	r2, [sp, #28]
 800d730:	4621      	mov	r1, r4
 800d732:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d736:	3b30      	subs	r3, #48	@ 0x30
 800d738:	2b09      	cmp	r3, #9
 800d73a:	d94b      	bls.n	800d7d4 <_svfiprintf_r+0x17c>
 800d73c:	b1b0      	cbz	r0, 800d76c <_svfiprintf_r+0x114>
 800d73e:	9207      	str	r2, [sp, #28]
 800d740:	e014      	b.n	800d76c <_svfiprintf_r+0x114>
 800d742:	eba0 0308 	sub.w	r3, r0, r8
 800d746:	fa09 f303 	lsl.w	r3, r9, r3
 800d74a:	4313      	orrs	r3, r2
 800d74c:	46a2      	mov	sl, r4
 800d74e:	9304      	str	r3, [sp, #16]
 800d750:	e7d2      	b.n	800d6f8 <_svfiprintf_r+0xa0>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	1d19      	adds	r1, r3, #4
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	9103      	str	r1, [sp, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfbb      	ittet	lt
 800d75e:	425b      	neglt	r3, r3
 800d760:	f042 0202 	orrlt.w	r2, r2, #2
 800d764:	9307      	strge	r3, [sp, #28]
 800d766:	9307      	strlt	r3, [sp, #28]
 800d768:	bfb8      	it	lt
 800d76a:	9204      	strlt	r2, [sp, #16]
 800d76c:	7823      	ldrb	r3, [r4, #0]
 800d76e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d770:	d10a      	bne.n	800d788 <_svfiprintf_r+0x130>
 800d772:	7863      	ldrb	r3, [r4, #1]
 800d774:	2b2a      	cmp	r3, #42	@ 0x2a
 800d776:	d132      	bne.n	800d7de <_svfiprintf_r+0x186>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	3402      	adds	r4, #2
 800d77c:	1d1a      	adds	r2, r3, #4
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	9203      	str	r2, [sp, #12]
 800d782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d786:	9305      	str	r3, [sp, #20]
 800d788:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d840 <_svfiprintf_r+0x1e8>
 800d78c:	2203      	movs	r2, #3
 800d78e:	4650      	mov	r0, sl
 800d790:	7821      	ldrb	r1, [r4, #0]
 800d792:	f7fe fbf6 	bl	800bf82 <memchr>
 800d796:	b138      	cbz	r0, 800d7a8 <_svfiprintf_r+0x150>
 800d798:	2240      	movs	r2, #64	@ 0x40
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	eba0 000a 	sub.w	r0, r0, sl
 800d7a0:	4082      	lsls	r2, r0
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	3401      	adds	r4, #1
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ac:	2206      	movs	r2, #6
 800d7ae:	4825      	ldr	r0, [pc, #148]	@ (800d844 <_svfiprintf_r+0x1ec>)
 800d7b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7b4:	f7fe fbe5 	bl	800bf82 <memchr>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d036      	beq.n	800d82a <_svfiprintf_r+0x1d2>
 800d7bc:	4b22      	ldr	r3, [pc, #136]	@ (800d848 <_svfiprintf_r+0x1f0>)
 800d7be:	bb1b      	cbnz	r3, 800d808 <_svfiprintf_r+0x1b0>
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	3307      	adds	r3, #7
 800d7c4:	f023 0307 	bic.w	r3, r3, #7
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ce:	4433      	add	r3, r6
 800d7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7d2:	e76a      	b.n	800d6aa <_svfiprintf_r+0x52>
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	2001      	movs	r0, #1
 800d7d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7dc:	e7a8      	b.n	800d730 <_svfiprintf_r+0xd8>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f04f 0c0a 	mov.w	ip, #10
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	3401      	adds	r4, #1
 800d7e8:	9305      	str	r3, [sp, #20]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f0:	3a30      	subs	r2, #48	@ 0x30
 800d7f2:	2a09      	cmp	r2, #9
 800d7f4:	d903      	bls.n	800d7fe <_svfiprintf_r+0x1a6>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0c6      	beq.n	800d788 <_svfiprintf_r+0x130>
 800d7fa:	9105      	str	r1, [sp, #20]
 800d7fc:	e7c4      	b.n	800d788 <_svfiprintf_r+0x130>
 800d7fe:	4604      	mov	r4, r0
 800d800:	2301      	movs	r3, #1
 800d802:	fb0c 2101 	mla	r1, ip, r1, r2
 800d806:	e7f0      	b.n	800d7ea <_svfiprintf_r+0x192>
 800d808:	ab03      	add	r3, sp, #12
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	462a      	mov	r2, r5
 800d80e:	4638      	mov	r0, r7
 800d810:	4b0e      	ldr	r3, [pc, #56]	@ (800d84c <_svfiprintf_r+0x1f4>)
 800d812:	a904      	add	r1, sp, #16
 800d814:	f7fd fcc0 	bl	800b198 <_printf_float>
 800d818:	1c42      	adds	r2, r0, #1
 800d81a:	4606      	mov	r6, r0
 800d81c:	d1d6      	bne.n	800d7cc <_svfiprintf_r+0x174>
 800d81e:	89ab      	ldrh	r3, [r5, #12]
 800d820:	065b      	lsls	r3, r3, #25
 800d822:	f53f af2d 	bmi.w	800d680 <_svfiprintf_r+0x28>
 800d826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d828:	e72c      	b.n	800d684 <_svfiprintf_r+0x2c>
 800d82a:	ab03      	add	r3, sp, #12
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	462a      	mov	r2, r5
 800d830:	4638      	mov	r0, r7
 800d832:	4b06      	ldr	r3, [pc, #24]	@ (800d84c <_svfiprintf_r+0x1f4>)
 800d834:	a904      	add	r1, sp, #16
 800d836:	f7fd ff4d 	bl	800b6d4 <_printf_i>
 800d83a:	e7ed      	b.n	800d818 <_svfiprintf_r+0x1c0>
 800d83c:	08010203 	.word	0x08010203
 800d840:	08010209 	.word	0x08010209
 800d844:	0801020d 	.word	0x0801020d
 800d848:	0800b199 	.word	0x0800b199
 800d84c:	0800d5a1 	.word	0x0800d5a1

0800d850 <__sflush_r>:
 800d850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	0716      	lsls	r6, r2, #28
 800d858:	4605      	mov	r5, r0
 800d85a:	460c      	mov	r4, r1
 800d85c:	d454      	bmi.n	800d908 <__sflush_r+0xb8>
 800d85e:	684b      	ldr	r3, [r1, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc02      	bgt.n	800d86a <__sflush_r+0x1a>
 800d864:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	dd48      	ble.n	800d8fc <__sflush_r+0xac>
 800d86a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	d045      	beq.n	800d8fc <__sflush_r+0xac>
 800d870:	2300      	movs	r3, #0
 800d872:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d876:	682f      	ldr	r7, [r5, #0]
 800d878:	6a21      	ldr	r1, [r4, #32]
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	d030      	beq.n	800d8e0 <__sflush_r+0x90>
 800d87e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	0759      	lsls	r1, r3, #29
 800d884:	d505      	bpl.n	800d892 <__sflush_r+0x42>
 800d886:	6863      	ldr	r3, [r4, #4]
 800d888:	1ad2      	subs	r2, r2, r3
 800d88a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d88c:	b10b      	cbz	r3, 800d892 <__sflush_r+0x42>
 800d88e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d890:	1ad2      	subs	r2, r2, r3
 800d892:	2300      	movs	r3, #0
 800d894:	4628      	mov	r0, r5
 800d896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d898:	6a21      	ldr	r1, [r4, #32]
 800d89a:	47b0      	blx	r6
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	d106      	bne.n	800d8b0 <__sflush_r+0x60>
 800d8a2:	6829      	ldr	r1, [r5, #0]
 800d8a4:	291d      	cmp	r1, #29
 800d8a6:	d82b      	bhi.n	800d900 <__sflush_r+0xb0>
 800d8a8:	4a28      	ldr	r2, [pc, #160]	@ (800d94c <__sflush_r+0xfc>)
 800d8aa:	40ca      	lsrs	r2, r1
 800d8ac:	07d6      	lsls	r6, r2, #31
 800d8ae:	d527      	bpl.n	800d900 <__sflush_r+0xb0>
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	6062      	str	r2, [r4, #4]
 800d8b4:	6922      	ldr	r2, [r4, #16]
 800d8b6:	04d9      	lsls	r1, r3, #19
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	d504      	bpl.n	800d8c6 <__sflush_r+0x76>
 800d8bc:	1c42      	adds	r2, r0, #1
 800d8be:	d101      	bne.n	800d8c4 <__sflush_r+0x74>
 800d8c0:	682b      	ldr	r3, [r5, #0]
 800d8c2:	b903      	cbnz	r3, 800d8c6 <__sflush_r+0x76>
 800d8c4:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8c8:	602f      	str	r7, [r5, #0]
 800d8ca:	b1b9      	cbz	r1, 800d8fc <__sflush_r+0xac>
 800d8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	d002      	beq.n	800d8da <__sflush_r+0x8a>
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7ff f9eb 	bl	800ccb0 <_free_r>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8de:	e00d      	b.n	800d8fc <__sflush_r+0xac>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	47b0      	blx	r6
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	1c50      	adds	r0, r2, #1
 800d8ea:	d1c9      	bne.n	800d880 <__sflush_r+0x30>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0c6      	beq.n	800d880 <__sflush_r+0x30>
 800d8f2:	2b1d      	cmp	r3, #29
 800d8f4:	d001      	beq.n	800d8fa <__sflush_r+0xaa>
 800d8f6:	2b16      	cmp	r3, #22
 800d8f8:	d11d      	bne.n	800d936 <__sflush_r+0xe6>
 800d8fa:	602f      	str	r7, [r5, #0]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e021      	b.n	800d944 <__sflush_r+0xf4>
 800d900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d904:	b21b      	sxth	r3, r3
 800d906:	e01a      	b.n	800d93e <__sflush_r+0xee>
 800d908:	690f      	ldr	r7, [r1, #16]
 800d90a:	2f00      	cmp	r7, #0
 800d90c:	d0f6      	beq.n	800d8fc <__sflush_r+0xac>
 800d90e:	0793      	lsls	r3, r2, #30
 800d910:	bf18      	it	ne
 800d912:	2300      	movne	r3, #0
 800d914:	680e      	ldr	r6, [r1, #0]
 800d916:	bf08      	it	eq
 800d918:	694b      	ldreq	r3, [r1, #20]
 800d91a:	1bf6      	subs	r6, r6, r7
 800d91c:	600f      	str	r7, [r1, #0]
 800d91e:	608b      	str	r3, [r1, #8]
 800d920:	2e00      	cmp	r6, #0
 800d922:	ddeb      	ble.n	800d8fc <__sflush_r+0xac>
 800d924:	4633      	mov	r3, r6
 800d926:	463a      	mov	r2, r7
 800d928:	4628      	mov	r0, r5
 800d92a:	6a21      	ldr	r1, [r4, #32]
 800d92c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d930:	47e0      	blx	ip
 800d932:	2800      	cmp	r0, #0
 800d934:	dc07      	bgt.n	800d946 <__sflush_r+0xf6>
 800d936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
 800d942:	81a3      	strh	r3, [r4, #12]
 800d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d946:	4407      	add	r7, r0
 800d948:	1a36      	subs	r6, r6, r0
 800d94a:	e7e9      	b.n	800d920 <__sflush_r+0xd0>
 800d94c:	20400001 	.word	0x20400001

0800d950 <_fflush_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	690b      	ldr	r3, [r1, #16]
 800d954:	4605      	mov	r5, r0
 800d956:	460c      	mov	r4, r1
 800d958:	b913      	cbnz	r3, 800d960 <_fflush_r+0x10>
 800d95a:	2500      	movs	r5, #0
 800d95c:	4628      	mov	r0, r5
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	b118      	cbz	r0, 800d96a <_fflush_r+0x1a>
 800d962:	6a03      	ldr	r3, [r0, #32]
 800d964:	b90b      	cbnz	r3, 800d96a <_fflush_r+0x1a>
 800d966:	f7fe f85f 	bl	800ba28 <__sinit>
 800d96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0f3      	beq.n	800d95a <_fflush_r+0xa>
 800d972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d974:	07d0      	lsls	r0, r2, #31
 800d976:	d404      	bmi.n	800d982 <_fflush_r+0x32>
 800d978:	0599      	lsls	r1, r3, #22
 800d97a:	d402      	bmi.n	800d982 <_fflush_r+0x32>
 800d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d97e:	f7fe fafe 	bl	800bf7e <__retarget_lock_acquire_recursive>
 800d982:	4628      	mov	r0, r5
 800d984:	4621      	mov	r1, r4
 800d986:	f7ff ff63 	bl	800d850 <__sflush_r>
 800d98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d98c:	4605      	mov	r5, r0
 800d98e:	07da      	lsls	r2, r3, #31
 800d990:	d4e4      	bmi.n	800d95c <_fflush_r+0xc>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	059b      	lsls	r3, r3, #22
 800d996:	d4e1      	bmi.n	800d95c <_fflush_r+0xc>
 800d998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d99a:	f7fe faf1 	bl	800bf80 <__retarget_lock_release_recursive>
 800d99e:	e7dd      	b.n	800d95c <_fflush_r+0xc>

0800d9a0 <fiprintf>:
 800d9a0:	b40e      	push	{r1, r2, r3}
 800d9a2:	b503      	push	{r0, r1, lr}
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	ab03      	add	r3, sp, #12
 800d9a8:	4805      	ldr	r0, [pc, #20]	@ (800d9c0 <fiprintf+0x20>)
 800d9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ae:	6800      	ldr	r0, [r0, #0]
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	f000 f945 	bl	800dc40 <_vfiprintf_r>
 800d9b6:	b002      	add	sp, #8
 800d9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9bc:	b003      	add	sp, #12
 800d9be:	4770      	bx	lr
 800d9c0:	20000274 	.word	0x20000274

0800d9c4 <__swhatbuf_r>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9cc:	4615      	mov	r5, r2
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	461e      	mov	r6, r3
 800d9d2:	b096      	sub	sp, #88	@ 0x58
 800d9d4:	da0c      	bge.n	800d9f0 <__swhatbuf_r+0x2c>
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	2100      	movs	r1, #0
 800d9da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9de:	bf14      	ite	ne
 800d9e0:	2340      	movne	r3, #64	@ 0x40
 800d9e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	6031      	str	r1, [r6, #0]
 800d9ea:	602b      	str	r3, [r5, #0]
 800d9ec:	b016      	add	sp, #88	@ 0x58
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}
 800d9f0:	466a      	mov	r2, sp
 800d9f2:	f000 f863 	bl	800dabc <_fstat_r>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	dbed      	blt.n	800d9d6 <__swhatbuf_r+0x12>
 800d9fa:	9901      	ldr	r1, [sp, #4]
 800d9fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da04:	4259      	negs	r1, r3
 800da06:	4159      	adcs	r1, r3
 800da08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da0c:	e7eb      	b.n	800d9e6 <__swhatbuf_r+0x22>

0800da0e <__smakebuf_r>:
 800da0e:	898b      	ldrh	r3, [r1, #12]
 800da10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da12:	079d      	lsls	r5, r3, #30
 800da14:	4606      	mov	r6, r0
 800da16:	460c      	mov	r4, r1
 800da18:	d507      	bpl.n	800da2a <__smakebuf_r+0x1c>
 800da1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da1e:	6023      	str	r3, [r4, #0]
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	2301      	movs	r3, #1
 800da24:	6163      	str	r3, [r4, #20]
 800da26:	b003      	add	sp, #12
 800da28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da2a:	466a      	mov	r2, sp
 800da2c:	ab01      	add	r3, sp, #4
 800da2e:	f7ff ffc9 	bl	800d9c4 <__swhatbuf_r>
 800da32:	9f00      	ldr	r7, [sp, #0]
 800da34:	4605      	mov	r5, r0
 800da36:	4639      	mov	r1, r7
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff f9ab 	bl	800cd94 <_malloc_r>
 800da3e:	b948      	cbnz	r0, 800da54 <__smakebuf_r+0x46>
 800da40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da44:	059a      	lsls	r2, r3, #22
 800da46:	d4ee      	bmi.n	800da26 <__smakebuf_r+0x18>
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	f043 0302 	orr.w	r3, r3, #2
 800da50:	81a3      	strh	r3, [r4, #12]
 800da52:	e7e2      	b.n	800da1a <__smakebuf_r+0xc>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	b15b      	cbz	r3, 800da7e <__smakebuf_r+0x70>
 800da66:	4630      	mov	r0, r6
 800da68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da6c:	f000 f838 	bl	800dae0 <_isatty_r>
 800da70:	b128      	cbz	r0, 800da7e <__smakebuf_r+0x70>
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	f023 0303 	bic.w	r3, r3, #3
 800da78:	f043 0301 	orr.w	r3, r3, #1
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	431d      	orrs	r5, r3
 800da82:	81a5      	strh	r5, [r4, #12]
 800da84:	e7cf      	b.n	800da26 <__smakebuf_r+0x18>

0800da86 <memmove>:
 800da86:	4288      	cmp	r0, r1
 800da88:	b510      	push	{r4, lr}
 800da8a:	eb01 0402 	add.w	r4, r1, r2
 800da8e:	d902      	bls.n	800da96 <memmove+0x10>
 800da90:	4284      	cmp	r4, r0
 800da92:	4623      	mov	r3, r4
 800da94:	d807      	bhi.n	800daa6 <memmove+0x20>
 800da96:	1e43      	subs	r3, r0, #1
 800da98:	42a1      	cmp	r1, r4
 800da9a:	d008      	beq.n	800daae <memmove+0x28>
 800da9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa4:	e7f8      	b.n	800da98 <memmove+0x12>
 800daa6:	4601      	mov	r1, r0
 800daa8:	4402      	add	r2, r0
 800daaa:	428a      	cmp	r2, r1
 800daac:	d100      	bne.n	800dab0 <memmove+0x2a>
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dab8:	e7f7      	b.n	800daaa <memmove+0x24>
	...

0800dabc <_fstat_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	2300      	movs	r3, #0
 800dac0:	4d06      	ldr	r5, [pc, #24]	@ (800dadc <_fstat_r+0x20>)
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	4611      	mov	r1, r2
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	f7f6 ffef 	bl	8004aac <_fstat>
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	d102      	bne.n	800dad8 <_fstat_r+0x1c>
 800dad2:	682b      	ldr	r3, [r5, #0]
 800dad4:	b103      	cbz	r3, 800dad8 <_fstat_r+0x1c>
 800dad6:	6023      	str	r3, [r4, #0]
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
 800dada:	bf00      	nop
 800dadc:	20000c8c 	.word	0x20000c8c

0800dae0 <_isatty_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	2300      	movs	r3, #0
 800dae4:	4d05      	ldr	r5, [pc, #20]	@ (800dafc <_isatty_r+0x1c>)
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	602b      	str	r3, [r5, #0]
 800daec:	f7f6 ffed 	bl	8004aca <_isatty>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_isatty_r+0x1a>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_isatty_r+0x1a>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20000c8c 	.word	0x20000c8c

0800db00 <_sbrk_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	2300      	movs	r3, #0
 800db04:	4d05      	ldr	r5, [pc, #20]	@ (800db1c <_sbrk_r+0x1c>)
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	602b      	str	r3, [r5, #0]
 800db0c:	f7f6 fff4 	bl	8004af8 <_sbrk>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_sbrk_r+0x1a>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b103      	cbz	r3, 800db1a <_sbrk_r+0x1a>
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	20000c8c 	.word	0x20000c8c

0800db20 <abort>:
 800db20:	2006      	movs	r0, #6
 800db22:	b508      	push	{r3, lr}
 800db24:	f000 f9cc 	bl	800dec0 <raise>
 800db28:	2001      	movs	r0, #1
 800db2a:	f7f6 ff70 	bl	8004a0e <_exit>

0800db2e <_calloc_r>:
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	fba1 5402 	umull	r5, r4, r1, r2
 800db34:	b934      	cbnz	r4, 800db44 <_calloc_r+0x16>
 800db36:	4629      	mov	r1, r5
 800db38:	f7ff f92c 	bl	800cd94 <_malloc_r>
 800db3c:	4606      	mov	r6, r0
 800db3e:	b928      	cbnz	r0, 800db4c <_calloc_r+0x1e>
 800db40:	4630      	mov	r0, r6
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	220c      	movs	r2, #12
 800db46:	2600      	movs	r6, #0
 800db48:	6002      	str	r2, [r0, #0]
 800db4a:	e7f9      	b.n	800db40 <_calloc_r+0x12>
 800db4c:	462a      	mov	r2, r5
 800db4e:	4621      	mov	r1, r4
 800db50:	f7fe f92e 	bl	800bdb0 <memset>
 800db54:	e7f4      	b.n	800db40 <_calloc_r+0x12>

0800db56 <__ascii_mbtowc>:
 800db56:	b082      	sub	sp, #8
 800db58:	b901      	cbnz	r1, 800db5c <__ascii_mbtowc+0x6>
 800db5a:	a901      	add	r1, sp, #4
 800db5c:	b142      	cbz	r2, 800db70 <__ascii_mbtowc+0x1a>
 800db5e:	b14b      	cbz	r3, 800db74 <__ascii_mbtowc+0x1e>
 800db60:	7813      	ldrb	r3, [r2, #0]
 800db62:	600b      	str	r3, [r1, #0]
 800db64:	7812      	ldrb	r2, [r2, #0]
 800db66:	1e10      	subs	r0, r2, #0
 800db68:	bf18      	it	ne
 800db6a:	2001      	movne	r0, #1
 800db6c:	b002      	add	sp, #8
 800db6e:	4770      	bx	lr
 800db70:	4610      	mov	r0, r2
 800db72:	e7fb      	b.n	800db6c <__ascii_mbtowc+0x16>
 800db74:	f06f 0001 	mvn.w	r0, #1
 800db78:	e7f8      	b.n	800db6c <__ascii_mbtowc+0x16>

0800db7a <_realloc_r>:
 800db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	4607      	mov	r7, r0
 800db80:	4614      	mov	r4, r2
 800db82:	460d      	mov	r5, r1
 800db84:	b921      	cbnz	r1, 800db90 <_realloc_r+0x16>
 800db86:	4611      	mov	r1, r2
 800db88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db8c:	f7ff b902 	b.w	800cd94 <_malloc_r>
 800db90:	b92a      	cbnz	r2, 800db9e <_realloc_r+0x24>
 800db92:	f7ff f88d 	bl	800ccb0 <_free_r>
 800db96:	4625      	mov	r5, r4
 800db98:	4628      	mov	r0, r5
 800db9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9e:	f000 f9ab 	bl	800def8 <_malloc_usable_size_r>
 800dba2:	4284      	cmp	r4, r0
 800dba4:	4606      	mov	r6, r0
 800dba6:	d802      	bhi.n	800dbae <_realloc_r+0x34>
 800dba8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbac:	d8f4      	bhi.n	800db98 <_realloc_r+0x1e>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff f8ef 	bl	800cd94 <_malloc_r>
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	b908      	cbnz	r0, 800dbbe <_realloc_r+0x44>
 800dbba:	4645      	mov	r5, r8
 800dbbc:	e7ec      	b.n	800db98 <_realloc_r+0x1e>
 800dbbe:	42b4      	cmp	r4, r6
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	bf28      	it	cs
 800dbc6:	4632      	movcs	r2, r6
 800dbc8:	f7fe f9e9 	bl	800bf9e <memcpy>
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f7ff f86e 	bl	800ccb0 <_free_r>
 800dbd4:	e7f1      	b.n	800dbba <_realloc_r+0x40>

0800dbd6 <__ascii_wctomb>:
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	4608      	mov	r0, r1
 800dbda:	b141      	cbz	r1, 800dbee <__ascii_wctomb+0x18>
 800dbdc:	2aff      	cmp	r2, #255	@ 0xff
 800dbde:	d904      	bls.n	800dbea <__ascii_wctomb+0x14>
 800dbe0:	228a      	movs	r2, #138	@ 0x8a
 800dbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	4770      	bx	lr
 800dbea:	2001      	movs	r0, #1
 800dbec:	700a      	strb	r2, [r1, #0]
 800dbee:	4770      	bx	lr

0800dbf0 <__sfputc_r>:
 800dbf0:	6893      	ldr	r3, [r2, #8]
 800dbf2:	b410      	push	{r4}
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	6093      	str	r3, [r2, #8]
 800dbfa:	da07      	bge.n	800dc0c <__sfputc_r+0x1c>
 800dbfc:	6994      	ldr	r4, [r2, #24]
 800dbfe:	42a3      	cmp	r3, r4
 800dc00:	db01      	blt.n	800dc06 <__sfputc_r+0x16>
 800dc02:	290a      	cmp	r1, #10
 800dc04:	d102      	bne.n	800dc0c <__sfputc_r+0x1c>
 800dc06:	bc10      	pop	{r4}
 800dc08:	f7fe b83d 	b.w	800bc86 <__swbuf_r>
 800dc0c:	6813      	ldr	r3, [r2, #0]
 800dc0e:	1c58      	adds	r0, r3, #1
 800dc10:	6010      	str	r0, [r2, #0]
 800dc12:	7019      	strb	r1, [r3, #0]
 800dc14:	4608      	mov	r0, r1
 800dc16:	bc10      	pop	{r4}
 800dc18:	4770      	bx	lr

0800dc1a <__sfputs_r>:
 800dc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	460f      	mov	r7, r1
 800dc20:	4614      	mov	r4, r2
 800dc22:	18d5      	adds	r5, r2, r3
 800dc24:	42ac      	cmp	r4, r5
 800dc26:	d101      	bne.n	800dc2c <__sfputs_r+0x12>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e007      	b.n	800dc3c <__sfputs_r+0x22>
 800dc2c:	463a      	mov	r2, r7
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc34:	f7ff ffdc 	bl	800dbf0 <__sfputc_r>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d1f3      	bne.n	800dc24 <__sfputs_r+0xa>
 800dc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc40 <_vfiprintf_r>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	460d      	mov	r5, r1
 800dc46:	4614      	mov	r4, r2
 800dc48:	4698      	mov	r8, r3
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	b09d      	sub	sp, #116	@ 0x74
 800dc4e:	b118      	cbz	r0, 800dc58 <_vfiprintf_r+0x18>
 800dc50:	6a03      	ldr	r3, [r0, #32]
 800dc52:	b90b      	cbnz	r3, 800dc58 <_vfiprintf_r+0x18>
 800dc54:	f7fd fee8 	bl	800ba28 <__sinit>
 800dc58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc5a:	07d9      	lsls	r1, r3, #31
 800dc5c:	d405      	bmi.n	800dc6a <_vfiprintf_r+0x2a>
 800dc5e:	89ab      	ldrh	r3, [r5, #12]
 800dc60:	059a      	lsls	r2, r3, #22
 800dc62:	d402      	bmi.n	800dc6a <_vfiprintf_r+0x2a>
 800dc64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc66:	f7fe f98a 	bl	800bf7e <__retarget_lock_acquire_recursive>
 800dc6a:	89ab      	ldrh	r3, [r5, #12]
 800dc6c:	071b      	lsls	r3, r3, #28
 800dc6e:	d501      	bpl.n	800dc74 <_vfiprintf_r+0x34>
 800dc70:	692b      	ldr	r3, [r5, #16]
 800dc72:	b99b      	cbnz	r3, 800dc9c <_vfiprintf_r+0x5c>
 800dc74:	4629      	mov	r1, r5
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7fe f844 	bl	800bd04 <__swsetup_r>
 800dc7c:	b170      	cbz	r0, 800dc9c <_vfiprintf_r+0x5c>
 800dc7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc80:	07dc      	lsls	r4, r3, #31
 800dc82:	d504      	bpl.n	800dc8e <_vfiprintf_r+0x4e>
 800dc84:	f04f 30ff 	mov.w	r0, #4294967295
 800dc88:	b01d      	add	sp, #116	@ 0x74
 800dc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	0598      	lsls	r0, r3, #22
 800dc92:	d4f7      	bmi.n	800dc84 <_vfiprintf_r+0x44>
 800dc94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc96:	f7fe f973 	bl	800bf80 <__retarget_lock_release_recursive>
 800dc9a:	e7f3      	b.n	800dc84 <_vfiprintf_r+0x44>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca0:	2320      	movs	r3, #32
 800dca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dca6:	2330      	movs	r3, #48	@ 0x30
 800dca8:	f04f 0901 	mov.w	r9, #1
 800dcac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcb0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800de5c <_vfiprintf_r+0x21c>
 800dcb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcb8:	4623      	mov	r3, r4
 800dcba:	469a      	mov	sl, r3
 800dcbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcc0:	b10a      	cbz	r2, 800dcc6 <_vfiprintf_r+0x86>
 800dcc2:	2a25      	cmp	r2, #37	@ 0x25
 800dcc4:	d1f9      	bne.n	800dcba <_vfiprintf_r+0x7a>
 800dcc6:	ebba 0b04 	subs.w	fp, sl, r4
 800dcca:	d00b      	beq.n	800dce4 <_vfiprintf_r+0xa4>
 800dccc:	465b      	mov	r3, fp
 800dcce:	4622      	mov	r2, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7ff ffa1 	bl	800dc1a <__sfputs_r>
 800dcd8:	3001      	adds	r0, #1
 800dcda:	f000 80a7 	beq.w	800de2c <_vfiprintf_r+0x1ec>
 800dcde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dce0:	445a      	add	r2, fp
 800dce2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dce4:	f89a 3000 	ldrb.w	r3, [sl]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 809f 	beq.w	800de2c <_vfiprintf_r+0x1ec>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcf8:	f10a 0a01 	add.w	sl, sl, #1
 800dcfc:	9304      	str	r3, [sp, #16]
 800dcfe:	9307      	str	r3, [sp, #28]
 800dd00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd04:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd06:	4654      	mov	r4, sl
 800dd08:	2205      	movs	r2, #5
 800dd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd0e:	4853      	ldr	r0, [pc, #332]	@ (800de5c <_vfiprintf_r+0x21c>)
 800dd10:	f7fe f937 	bl	800bf82 <memchr>
 800dd14:	9a04      	ldr	r2, [sp, #16]
 800dd16:	b9d8      	cbnz	r0, 800dd50 <_vfiprintf_r+0x110>
 800dd18:	06d1      	lsls	r1, r2, #27
 800dd1a:	bf44      	itt	mi
 800dd1c:	2320      	movmi	r3, #32
 800dd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd22:	0713      	lsls	r3, r2, #28
 800dd24:	bf44      	itt	mi
 800dd26:	232b      	movmi	r3, #43	@ 0x2b
 800dd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd30:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd32:	d015      	beq.n	800dd60 <_vfiprintf_r+0x120>
 800dd34:	4654      	mov	r4, sl
 800dd36:	2000      	movs	r0, #0
 800dd38:	f04f 0c0a 	mov.w	ip, #10
 800dd3c:	9a07      	ldr	r2, [sp, #28]
 800dd3e:	4621      	mov	r1, r4
 800dd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd44:	3b30      	subs	r3, #48	@ 0x30
 800dd46:	2b09      	cmp	r3, #9
 800dd48:	d94b      	bls.n	800dde2 <_vfiprintf_r+0x1a2>
 800dd4a:	b1b0      	cbz	r0, 800dd7a <_vfiprintf_r+0x13a>
 800dd4c:	9207      	str	r2, [sp, #28]
 800dd4e:	e014      	b.n	800dd7a <_vfiprintf_r+0x13a>
 800dd50:	eba0 0308 	sub.w	r3, r0, r8
 800dd54:	fa09 f303 	lsl.w	r3, r9, r3
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	46a2      	mov	sl, r4
 800dd5c:	9304      	str	r3, [sp, #16]
 800dd5e:	e7d2      	b.n	800dd06 <_vfiprintf_r+0xc6>
 800dd60:	9b03      	ldr	r3, [sp, #12]
 800dd62:	1d19      	adds	r1, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	9103      	str	r1, [sp, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bfbb      	ittet	lt
 800dd6c:	425b      	neglt	r3, r3
 800dd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd72:	9307      	strge	r3, [sp, #28]
 800dd74:	9307      	strlt	r3, [sp, #28]
 800dd76:	bfb8      	it	lt
 800dd78:	9204      	strlt	r2, [sp, #16]
 800dd7a:	7823      	ldrb	r3, [r4, #0]
 800dd7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd7e:	d10a      	bne.n	800dd96 <_vfiprintf_r+0x156>
 800dd80:	7863      	ldrb	r3, [r4, #1]
 800dd82:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd84:	d132      	bne.n	800ddec <_vfiprintf_r+0x1ac>
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	3402      	adds	r4, #2
 800dd8a:	1d1a      	adds	r2, r3, #4
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	9203      	str	r2, [sp, #12]
 800dd90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800de60 <_vfiprintf_r+0x220>
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	4650      	mov	r0, sl
 800dd9e:	7821      	ldrb	r1, [r4, #0]
 800dda0:	f7fe f8ef 	bl	800bf82 <memchr>
 800dda4:	b138      	cbz	r0, 800ddb6 <_vfiprintf_r+0x176>
 800dda6:	2240      	movs	r2, #64	@ 0x40
 800dda8:	9b04      	ldr	r3, [sp, #16]
 800ddaa:	eba0 000a 	sub.w	r0, r0, sl
 800ddae:	4082      	lsls	r2, r0
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	3401      	adds	r4, #1
 800ddb4:	9304      	str	r3, [sp, #16]
 800ddb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddba:	2206      	movs	r2, #6
 800ddbc:	4829      	ldr	r0, [pc, #164]	@ (800de64 <_vfiprintf_r+0x224>)
 800ddbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddc2:	f7fe f8de 	bl	800bf82 <memchr>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d03f      	beq.n	800de4a <_vfiprintf_r+0x20a>
 800ddca:	4b27      	ldr	r3, [pc, #156]	@ (800de68 <_vfiprintf_r+0x228>)
 800ddcc:	bb1b      	cbnz	r3, 800de16 <_vfiprintf_r+0x1d6>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	f023 0307 	bic.w	r3, r3, #7
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	9303      	str	r3, [sp, #12]
 800ddda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dddc:	443b      	add	r3, r7
 800ddde:	9309      	str	r3, [sp, #36]	@ 0x24
 800dde0:	e76a      	b.n	800dcb8 <_vfiprintf_r+0x78>
 800dde2:	460c      	mov	r4, r1
 800dde4:	2001      	movs	r0, #1
 800dde6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddea:	e7a8      	b.n	800dd3e <_vfiprintf_r+0xfe>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f04f 0c0a 	mov.w	ip, #10
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	3401      	adds	r4, #1
 800ddf6:	9305      	str	r3, [sp, #20]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddfe:	3a30      	subs	r2, #48	@ 0x30
 800de00:	2a09      	cmp	r2, #9
 800de02:	d903      	bls.n	800de0c <_vfiprintf_r+0x1cc>
 800de04:	2b00      	cmp	r3, #0
 800de06:	d0c6      	beq.n	800dd96 <_vfiprintf_r+0x156>
 800de08:	9105      	str	r1, [sp, #20]
 800de0a:	e7c4      	b.n	800dd96 <_vfiprintf_r+0x156>
 800de0c:	4604      	mov	r4, r0
 800de0e:	2301      	movs	r3, #1
 800de10:	fb0c 2101 	mla	r1, ip, r1, r2
 800de14:	e7f0      	b.n	800ddf8 <_vfiprintf_r+0x1b8>
 800de16:	ab03      	add	r3, sp, #12
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	462a      	mov	r2, r5
 800de1c:	4630      	mov	r0, r6
 800de1e:	4b13      	ldr	r3, [pc, #76]	@ (800de6c <_vfiprintf_r+0x22c>)
 800de20:	a904      	add	r1, sp, #16
 800de22:	f7fd f9b9 	bl	800b198 <_printf_float>
 800de26:	4607      	mov	r7, r0
 800de28:	1c78      	adds	r0, r7, #1
 800de2a:	d1d6      	bne.n	800ddda <_vfiprintf_r+0x19a>
 800de2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de2e:	07d9      	lsls	r1, r3, #31
 800de30:	d405      	bmi.n	800de3e <_vfiprintf_r+0x1fe>
 800de32:	89ab      	ldrh	r3, [r5, #12]
 800de34:	059a      	lsls	r2, r3, #22
 800de36:	d402      	bmi.n	800de3e <_vfiprintf_r+0x1fe>
 800de38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de3a:	f7fe f8a1 	bl	800bf80 <__retarget_lock_release_recursive>
 800de3e:	89ab      	ldrh	r3, [r5, #12]
 800de40:	065b      	lsls	r3, r3, #25
 800de42:	f53f af1f 	bmi.w	800dc84 <_vfiprintf_r+0x44>
 800de46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de48:	e71e      	b.n	800dc88 <_vfiprintf_r+0x48>
 800de4a:	ab03      	add	r3, sp, #12
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	462a      	mov	r2, r5
 800de50:	4630      	mov	r0, r6
 800de52:	4b06      	ldr	r3, [pc, #24]	@ (800de6c <_vfiprintf_r+0x22c>)
 800de54:	a904      	add	r1, sp, #16
 800de56:	f7fd fc3d 	bl	800b6d4 <_printf_i>
 800de5a:	e7e4      	b.n	800de26 <_vfiprintf_r+0x1e6>
 800de5c:	08010203 	.word	0x08010203
 800de60:	08010209 	.word	0x08010209
 800de64:	0801020d 	.word	0x0801020d
 800de68:	0800b199 	.word	0x0800b199
 800de6c:	0800dc1b 	.word	0x0800dc1b

0800de70 <_raise_r>:
 800de70:	291f      	cmp	r1, #31
 800de72:	b538      	push	{r3, r4, r5, lr}
 800de74:	4605      	mov	r5, r0
 800de76:	460c      	mov	r4, r1
 800de78:	d904      	bls.n	800de84 <_raise_r+0x14>
 800de7a:	2316      	movs	r3, #22
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	f04f 30ff 	mov.w	r0, #4294967295
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de86:	b112      	cbz	r2, 800de8e <_raise_r+0x1e>
 800de88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de8c:	b94b      	cbnz	r3, 800dea2 <_raise_r+0x32>
 800de8e:	4628      	mov	r0, r5
 800de90:	f000 f830 	bl	800def4 <_getpid_r>
 800de94:	4622      	mov	r2, r4
 800de96:	4601      	mov	r1, r0
 800de98:	4628      	mov	r0, r5
 800de9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de9e:	f000 b817 	b.w	800ded0 <_kill_r>
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d00a      	beq.n	800debc <_raise_r+0x4c>
 800dea6:	1c59      	adds	r1, r3, #1
 800dea8:	d103      	bne.n	800deb2 <_raise_r+0x42>
 800deaa:	2316      	movs	r3, #22
 800deac:	6003      	str	r3, [r0, #0]
 800deae:	2001      	movs	r0, #1
 800deb0:	e7e7      	b.n	800de82 <_raise_r+0x12>
 800deb2:	2100      	movs	r1, #0
 800deb4:	4620      	mov	r0, r4
 800deb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800deba:	4798      	blx	r3
 800debc:	2000      	movs	r0, #0
 800debe:	e7e0      	b.n	800de82 <_raise_r+0x12>

0800dec0 <raise>:
 800dec0:	4b02      	ldr	r3, [pc, #8]	@ (800decc <raise+0xc>)
 800dec2:	4601      	mov	r1, r0
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	f7ff bfd3 	b.w	800de70 <_raise_r>
 800deca:	bf00      	nop
 800decc:	20000274 	.word	0x20000274

0800ded0 <_kill_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	2300      	movs	r3, #0
 800ded4:	4d06      	ldr	r5, [pc, #24]	@ (800def0 <_kill_r+0x20>)
 800ded6:	4604      	mov	r4, r0
 800ded8:	4608      	mov	r0, r1
 800deda:	4611      	mov	r1, r2
 800dedc:	602b      	str	r3, [r5, #0]
 800dede:	f7f6 fd86 	bl	80049ee <_kill>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	d102      	bne.n	800deec <_kill_r+0x1c>
 800dee6:	682b      	ldr	r3, [r5, #0]
 800dee8:	b103      	cbz	r3, 800deec <_kill_r+0x1c>
 800deea:	6023      	str	r3, [r4, #0]
 800deec:	bd38      	pop	{r3, r4, r5, pc}
 800deee:	bf00      	nop
 800def0:	20000c8c 	.word	0x20000c8c

0800def4 <_getpid_r>:
 800def4:	f7f6 bd74 	b.w	80049e0 <_getpid>

0800def8 <_malloc_usable_size_r>:
 800def8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800defc:	1f18      	subs	r0, r3, #4
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfbc      	itt	lt
 800df02:	580b      	ldrlt	r3, [r1, r0]
 800df04:	18c0      	addlt	r0, r0, r3
 800df06:	4770      	bx	lr

0800df08 <cosf>:
 800df08:	b507      	push	{r0, r1, r2, lr}
 800df0a:	4a1a      	ldr	r2, [pc, #104]	@ (800df74 <cosf+0x6c>)
 800df0c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800df10:	4293      	cmp	r3, r2
 800df12:	4601      	mov	r1, r0
 800df14:	d805      	bhi.n	800df22 <cosf+0x1a>
 800df16:	2100      	movs	r1, #0
 800df18:	b003      	add	sp, #12
 800df1a:	f85d eb04 	ldr.w	lr, [sp], #4
 800df1e:	f000 b865 	b.w	800dfec <__kernel_cosf>
 800df22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800df26:	d304      	bcc.n	800df32 <cosf+0x2a>
 800df28:	f7f2 fe0c 	bl	8000b44 <__aeabi_fsub>
 800df2c:	b003      	add	sp, #12
 800df2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800df32:	4669      	mov	r1, sp
 800df34:	f000 f950 	bl	800e1d8 <__ieee754_rem_pio2f>
 800df38:	f000 0203 	and.w	r2, r0, #3
 800df3c:	2a01      	cmp	r2, #1
 800df3e:	d007      	beq.n	800df50 <cosf+0x48>
 800df40:	2a02      	cmp	r2, #2
 800df42:	d00c      	beq.n	800df5e <cosf+0x56>
 800df44:	b982      	cbnz	r2, 800df68 <cosf+0x60>
 800df46:	9901      	ldr	r1, [sp, #4]
 800df48:	9800      	ldr	r0, [sp, #0]
 800df4a:	f000 f84f 	bl	800dfec <__kernel_cosf>
 800df4e:	e7ed      	b.n	800df2c <cosf+0x24>
 800df50:	9901      	ldr	r1, [sp, #4]
 800df52:	9800      	ldr	r0, [sp, #0]
 800df54:	f000 f8ca 	bl	800e0ec <__kernel_sinf>
 800df58:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800df5c:	e7e6      	b.n	800df2c <cosf+0x24>
 800df5e:	9901      	ldr	r1, [sp, #4]
 800df60:	9800      	ldr	r0, [sp, #0]
 800df62:	f000 f843 	bl	800dfec <__kernel_cosf>
 800df66:	e7f7      	b.n	800df58 <cosf+0x50>
 800df68:	2201      	movs	r2, #1
 800df6a:	9901      	ldr	r1, [sp, #4]
 800df6c:	9800      	ldr	r0, [sp, #0]
 800df6e:	f000 f8bd 	bl	800e0ec <__kernel_sinf>
 800df72:	e7db      	b.n	800df2c <cosf+0x24>
 800df74:	3f490fd8 	.word	0x3f490fd8

0800df78 <sinf>:
 800df78:	b507      	push	{r0, r1, r2, lr}
 800df7a:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe8 <sinf+0x70>)
 800df7c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800df80:	4293      	cmp	r3, r2
 800df82:	4601      	mov	r1, r0
 800df84:	d806      	bhi.n	800df94 <sinf+0x1c>
 800df86:	2200      	movs	r2, #0
 800df88:	2100      	movs	r1, #0
 800df8a:	b003      	add	sp, #12
 800df8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df90:	f000 b8ac 	b.w	800e0ec <__kernel_sinf>
 800df94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800df98:	d304      	bcc.n	800dfa4 <sinf+0x2c>
 800df9a:	f7f2 fdd3 	bl	8000b44 <__aeabi_fsub>
 800df9e:	b003      	add	sp, #12
 800dfa0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfa4:	4669      	mov	r1, sp
 800dfa6:	f000 f917 	bl	800e1d8 <__ieee754_rem_pio2f>
 800dfaa:	f000 0003 	and.w	r0, r0, #3
 800dfae:	2801      	cmp	r0, #1
 800dfb0:	d008      	beq.n	800dfc4 <sinf+0x4c>
 800dfb2:	2802      	cmp	r0, #2
 800dfb4:	d00b      	beq.n	800dfce <sinf+0x56>
 800dfb6:	b990      	cbnz	r0, 800dfde <sinf+0x66>
 800dfb8:	2201      	movs	r2, #1
 800dfba:	9901      	ldr	r1, [sp, #4]
 800dfbc:	9800      	ldr	r0, [sp, #0]
 800dfbe:	f000 f895 	bl	800e0ec <__kernel_sinf>
 800dfc2:	e7ec      	b.n	800df9e <sinf+0x26>
 800dfc4:	9901      	ldr	r1, [sp, #4]
 800dfc6:	9800      	ldr	r0, [sp, #0]
 800dfc8:	f000 f810 	bl	800dfec <__kernel_cosf>
 800dfcc:	e7e7      	b.n	800df9e <sinf+0x26>
 800dfce:	2201      	movs	r2, #1
 800dfd0:	9901      	ldr	r1, [sp, #4]
 800dfd2:	9800      	ldr	r0, [sp, #0]
 800dfd4:	f000 f88a 	bl	800e0ec <__kernel_sinf>
 800dfd8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800dfdc:	e7df      	b.n	800df9e <sinf+0x26>
 800dfde:	9901      	ldr	r1, [sp, #4]
 800dfe0:	9800      	ldr	r0, [sp, #0]
 800dfe2:	f000 f803 	bl	800dfec <__kernel_cosf>
 800dfe6:	e7f7      	b.n	800dfd8 <sinf+0x60>
 800dfe8:	3f490fd8 	.word	0x3f490fd8

0800dfec <__kernel_cosf>:
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800dff4:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800dff8:	4606      	mov	r6, r0
 800dffa:	4688      	mov	r8, r1
 800dffc:	d203      	bcs.n	800e006 <__kernel_cosf+0x1a>
 800dffe:	f7f3 f871 	bl	80010e4 <__aeabi_f2iz>
 800e002:	2800      	cmp	r0, #0
 800e004:	d05c      	beq.n	800e0c0 <__kernel_cosf+0xd4>
 800e006:	4631      	mov	r1, r6
 800e008:	4630      	mov	r0, r6
 800e00a:	f7f2 fea5 	bl	8000d58 <__aeabi_fmul>
 800e00e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e012:	4604      	mov	r4, r0
 800e014:	f7f2 fea0 	bl	8000d58 <__aeabi_fmul>
 800e018:	492b      	ldr	r1, [pc, #172]	@ (800e0c8 <__kernel_cosf+0xdc>)
 800e01a:	4607      	mov	r7, r0
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7f2 fe9b 	bl	8000d58 <__aeabi_fmul>
 800e022:	492a      	ldr	r1, [pc, #168]	@ (800e0cc <__kernel_cosf+0xe0>)
 800e024:	f7f2 fd90 	bl	8000b48 <__addsf3>
 800e028:	4621      	mov	r1, r4
 800e02a:	f7f2 fe95 	bl	8000d58 <__aeabi_fmul>
 800e02e:	4928      	ldr	r1, [pc, #160]	@ (800e0d0 <__kernel_cosf+0xe4>)
 800e030:	f7f2 fd88 	bl	8000b44 <__aeabi_fsub>
 800e034:	4621      	mov	r1, r4
 800e036:	f7f2 fe8f 	bl	8000d58 <__aeabi_fmul>
 800e03a:	4926      	ldr	r1, [pc, #152]	@ (800e0d4 <__kernel_cosf+0xe8>)
 800e03c:	f7f2 fd84 	bl	8000b48 <__addsf3>
 800e040:	4621      	mov	r1, r4
 800e042:	f7f2 fe89 	bl	8000d58 <__aeabi_fmul>
 800e046:	4924      	ldr	r1, [pc, #144]	@ (800e0d8 <__kernel_cosf+0xec>)
 800e048:	f7f2 fd7c 	bl	8000b44 <__aeabi_fsub>
 800e04c:	4621      	mov	r1, r4
 800e04e:	f7f2 fe83 	bl	8000d58 <__aeabi_fmul>
 800e052:	4922      	ldr	r1, [pc, #136]	@ (800e0dc <__kernel_cosf+0xf0>)
 800e054:	f7f2 fd78 	bl	8000b48 <__addsf3>
 800e058:	4621      	mov	r1, r4
 800e05a:	f7f2 fe7d 	bl	8000d58 <__aeabi_fmul>
 800e05e:	4621      	mov	r1, r4
 800e060:	f7f2 fe7a 	bl	8000d58 <__aeabi_fmul>
 800e064:	4641      	mov	r1, r8
 800e066:	4604      	mov	r4, r0
 800e068:	4630      	mov	r0, r6
 800e06a:	f7f2 fe75 	bl	8000d58 <__aeabi_fmul>
 800e06e:	4601      	mov	r1, r0
 800e070:	4620      	mov	r0, r4
 800e072:	f7f2 fd67 	bl	8000b44 <__aeabi_fsub>
 800e076:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e0 <__kernel_cosf+0xf4>)
 800e078:	4604      	mov	r4, r0
 800e07a:	429d      	cmp	r5, r3
 800e07c:	d80a      	bhi.n	800e094 <__kernel_cosf+0xa8>
 800e07e:	4601      	mov	r1, r0
 800e080:	4638      	mov	r0, r7
 800e082:	f7f2 fd5f 	bl	8000b44 <__aeabi_fsub>
 800e086:	4601      	mov	r1, r0
 800e088:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e08c:	f7f2 fd5a 	bl	8000b44 <__aeabi_fsub>
 800e090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e094:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <__kernel_cosf+0xf8>)
 800e096:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e09a:	429d      	cmp	r5, r3
 800e09c:	bf8c      	ite	hi
 800e09e:	4d12      	ldrhi	r5, [pc, #72]	@ (800e0e8 <__kernel_cosf+0xfc>)
 800e0a0:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	f7f2 fd4d 	bl	8000b44 <__aeabi_fsub>
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	f7f2 fd48 	bl	8000b44 <__aeabi_fsub>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	f7f2 fd45 	bl	8000b44 <__aeabi_fsub>
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	4630      	mov	r0, r6
 800e0be:	e7e5      	b.n	800e08c <__kernel_cosf+0xa0>
 800e0c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e0c4:	e7e4      	b.n	800e090 <__kernel_cosf+0xa4>
 800e0c6:	bf00      	nop
 800e0c8:	ad47d74e 	.word	0xad47d74e
 800e0cc:	310f74f6 	.word	0x310f74f6
 800e0d0:	3493f27c 	.word	0x3493f27c
 800e0d4:	37d00d01 	.word	0x37d00d01
 800e0d8:	3ab60b61 	.word	0x3ab60b61
 800e0dc:	3d2aaaab 	.word	0x3d2aaaab
 800e0e0:	3e999999 	.word	0x3e999999
 800e0e4:	3f480000 	.word	0x3f480000
 800e0e8:	3e900000 	.word	0x3e900000

0800e0ec <__kernel_sinf>:
 800e0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e0f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	460f      	mov	r7, r1
 800e0fc:	4691      	mov	r9, r2
 800e0fe:	d203      	bcs.n	800e108 <__kernel_sinf+0x1c>
 800e100:	f7f2 fff0 	bl	80010e4 <__aeabi_f2iz>
 800e104:	2800      	cmp	r0, #0
 800e106:	d035      	beq.n	800e174 <__kernel_sinf+0x88>
 800e108:	4621      	mov	r1, r4
 800e10a:	4620      	mov	r0, r4
 800e10c:	f7f2 fe24 	bl	8000d58 <__aeabi_fmul>
 800e110:	4605      	mov	r5, r0
 800e112:	4601      	mov	r1, r0
 800e114:	4620      	mov	r0, r4
 800e116:	f7f2 fe1f 	bl	8000d58 <__aeabi_fmul>
 800e11a:	4929      	ldr	r1, [pc, #164]	@ (800e1c0 <__kernel_sinf+0xd4>)
 800e11c:	4606      	mov	r6, r0
 800e11e:	4628      	mov	r0, r5
 800e120:	f7f2 fe1a 	bl	8000d58 <__aeabi_fmul>
 800e124:	4927      	ldr	r1, [pc, #156]	@ (800e1c4 <__kernel_sinf+0xd8>)
 800e126:	f7f2 fd0d 	bl	8000b44 <__aeabi_fsub>
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 fe14 	bl	8000d58 <__aeabi_fmul>
 800e130:	4925      	ldr	r1, [pc, #148]	@ (800e1c8 <__kernel_sinf+0xdc>)
 800e132:	f7f2 fd09 	bl	8000b48 <__addsf3>
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 fe0e 	bl	8000d58 <__aeabi_fmul>
 800e13c:	4923      	ldr	r1, [pc, #140]	@ (800e1cc <__kernel_sinf+0xe0>)
 800e13e:	f7f2 fd01 	bl	8000b44 <__aeabi_fsub>
 800e142:	4629      	mov	r1, r5
 800e144:	f7f2 fe08 	bl	8000d58 <__aeabi_fmul>
 800e148:	4921      	ldr	r1, [pc, #132]	@ (800e1d0 <__kernel_sinf+0xe4>)
 800e14a:	f7f2 fcfd 	bl	8000b48 <__addsf3>
 800e14e:	4680      	mov	r8, r0
 800e150:	f1b9 0f00 	cmp.w	r9, #0
 800e154:	d111      	bne.n	800e17a <__kernel_sinf+0x8e>
 800e156:	4601      	mov	r1, r0
 800e158:	4628      	mov	r0, r5
 800e15a:	f7f2 fdfd 	bl	8000d58 <__aeabi_fmul>
 800e15e:	491d      	ldr	r1, [pc, #116]	@ (800e1d4 <__kernel_sinf+0xe8>)
 800e160:	f7f2 fcf0 	bl	8000b44 <__aeabi_fsub>
 800e164:	4631      	mov	r1, r6
 800e166:	f7f2 fdf7 	bl	8000d58 <__aeabi_fmul>
 800e16a:	4601      	mov	r1, r0
 800e16c:	4620      	mov	r0, r4
 800e16e:	f7f2 fceb 	bl	8000b48 <__addsf3>
 800e172:	4604      	mov	r4, r0
 800e174:	4620      	mov	r0, r4
 800e176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e17a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e17e:	4638      	mov	r0, r7
 800e180:	f7f2 fdea 	bl	8000d58 <__aeabi_fmul>
 800e184:	4641      	mov	r1, r8
 800e186:	4681      	mov	r9, r0
 800e188:	4630      	mov	r0, r6
 800e18a:	f7f2 fde5 	bl	8000d58 <__aeabi_fmul>
 800e18e:	4601      	mov	r1, r0
 800e190:	4648      	mov	r0, r9
 800e192:	f7f2 fcd7 	bl	8000b44 <__aeabi_fsub>
 800e196:	4629      	mov	r1, r5
 800e198:	f7f2 fdde 	bl	8000d58 <__aeabi_fmul>
 800e19c:	4639      	mov	r1, r7
 800e19e:	f7f2 fcd1 	bl	8000b44 <__aeabi_fsub>
 800e1a2:	490c      	ldr	r1, [pc, #48]	@ (800e1d4 <__kernel_sinf+0xe8>)
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7f2 fdd6 	bl	8000d58 <__aeabi_fmul>
 800e1ac:	4601      	mov	r1, r0
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f7f2 fcca 	bl	8000b48 <__addsf3>
 800e1b4:	4601      	mov	r1, r0
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7f2 fcc4 	bl	8000b44 <__aeabi_fsub>
 800e1bc:	e7d9      	b.n	800e172 <__kernel_sinf+0x86>
 800e1be:	bf00      	nop
 800e1c0:	2f2ec9d3 	.word	0x2f2ec9d3
 800e1c4:	32d72f34 	.word	0x32d72f34
 800e1c8:	3638ef1b 	.word	0x3638ef1b
 800e1cc:	39500d01 	.word	0x39500d01
 800e1d0:	3c088889 	.word	0x3c088889
 800e1d4:	3e2aaaab 	.word	0x3e2aaaab

0800e1d8 <__ieee754_rem_pio2f>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	4aa4      	ldr	r2, [pc, #656]	@ (800e470 <__ieee754_rem_pio2f+0x298>)
 800e1de:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e1e2:	4590      	cmp	r8, r2
 800e1e4:	460c      	mov	r4, r1
 800e1e6:	4682      	mov	sl, r0
 800e1e8:	b087      	sub	sp, #28
 800e1ea:	d804      	bhi.n	800e1f6 <__ieee754_rem_pio2f+0x1e>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	6008      	str	r0, [r1, #0]
 800e1f0:	604b      	str	r3, [r1, #4]
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	e01d      	b.n	800e232 <__ieee754_rem_pio2f+0x5a>
 800e1f6:	4a9f      	ldr	r2, [pc, #636]	@ (800e474 <__ieee754_rem_pio2f+0x29c>)
 800e1f8:	4590      	cmp	r8, r2
 800e1fa:	d84f      	bhi.n	800e29c <__ieee754_rem_pio2f+0xc4>
 800e1fc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e200:	2800      	cmp	r0, #0
 800e202:	499d      	ldr	r1, [pc, #628]	@ (800e478 <__ieee754_rem_pio2f+0x2a0>)
 800e204:	4f9d      	ldr	r7, [pc, #628]	@ (800e47c <__ieee754_rem_pio2f+0x2a4>)
 800e206:	f025 050f 	bic.w	r5, r5, #15
 800e20a:	dd24      	ble.n	800e256 <__ieee754_rem_pio2f+0x7e>
 800e20c:	f7f2 fc9a 	bl	8000b44 <__aeabi_fsub>
 800e210:	42bd      	cmp	r5, r7
 800e212:	4606      	mov	r6, r0
 800e214:	d011      	beq.n	800e23a <__ieee754_rem_pio2f+0x62>
 800e216:	499a      	ldr	r1, [pc, #616]	@ (800e480 <__ieee754_rem_pio2f+0x2a8>)
 800e218:	f7f2 fc94 	bl	8000b44 <__aeabi_fsub>
 800e21c:	4601      	mov	r1, r0
 800e21e:	4605      	mov	r5, r0
 800e220:	4630      	mov	r0, r6
 800e222:	f7f2 fc8f 	bl	8000b44 <__aeabi_fsub>
 800e226:	4996      	ldr	r1, [pc, #600]	@ (800e480 <__ieee754_rem_pio2f+0x2a8>)
 800e228:	f7f2 fc8c 	bl	8000b44 <__aeabi_fsub>
 800e22c:	6025      	str	r5, [r4, #0]
 800e22e:	2501      	movs	r5, #1
 800e230:	6060      	str	r0, [r4, #4]
 800e232:	4628      	mov	r0, r5
 800e234:	b007      	add	sp, #28
 800e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23a:	4992      	ldr	r1, [pc, #584]	@ (800e484 <__ieee754_rem_pio2f+0x2ac>)
 800e23c:	f7f2 fc82 	bl	8000b44 <__aeabi_fsub>
 800e240:	4991      	ldr	r1, [pc, #580]	@ (800e488 <__ieee754_rem_pio2f+0x2b0>)
 800e242:	4606      	mov	r6, r0
 800e244:	f7f2 fc7e 	bl	8000b44 <__aeabi_fsub>
 800e248:	4601      	mov	r1, r0
 800e24a:	4605      	mov	r5, r0
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7f2 fc79 	bl	8000b44 <__aeabi_fsub>
 800e252:	498d      	ldr	r1, [pc, #564]	@ (800e488 <__ieee754_rem_pio2f+0x2b0>)
 800e254:	e7e8      	b.n	800e228 <__ieee754_rem_pio2f+0x50>
 800e256:	f7f2 fc77 	bl	8000b48 <__addsf3>
 800e25a:	42bd      	cmp	r5, r7
 800e25c:	4606      	mov	r6, r0
 800e25e:	d00f      	beq.n	800e280 <__ieee754_rem_pio2f+0xa8>
 800e260:	4987      	ldr	r1, [pc, #540]	@ (800e480 <__ieee754_rem_pio2f+0x2a8>)
 800e262:	f7f2 fc71 	bl	8000b48 <__addsf3>
 800e266:	4601      	mov	r1, r0
 800e268:	4605      	mov	r5, r0
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7f2 fc6a 	bl	8000b44 <__aeabi_fsub>
 800e270:	4983      	ldr	r1, [pc, #524]	@ (800e480 <__ieee754_rem_pio2f+0x2a8>)
 800e272:	f7f2 fc69 	bl	8000b48 <__addsf3>
 800e276:	6025      	str	r5, [r4, #0]
 800e278:	6060      	str	r0, [r4, #4]
 800e27a:	f04f 35ff 	mov.w	r5, #4294967295
 800e27e:	e7d8      	b.n	800e232 <__ieee754_rem_pio2f+0x5a>
 800e280:	4980      	ldr	r1, [pc, #512]	@ (800e484 <__ieee754_rem_pio2f+0x2ac>)
 800e282:	f7f2 fc61 	bl	8000b48 <__addsf3>
 800e286:	4980      	ldr	r1, [pc, #512]	@ (800e488 <__ieee754_rem_pio2f+0x2b0>)
 800e288:	4606      	mov	r6, r0
 800e28a:	f7f2 fc5d 	bl	8000b48 <__addsf3>
 800e28e:	4601      	mov	r1, r0
 800e290:	4605      	mov	r5, r0
 800e292:	4630      	mov	r0, r6
 800e294:	f7f2 fc56 	bl	8000b44 <__aeabi_fsub>
 800e298:	497b      	ldr	r1, [pc, #492]	@ (800e488 <__ieee754_rem_pio2f+0x2b0>)
 800e29a:	e7ea      	b.n	800e272 <__ieee754_rem_pio2f+0x9a>
 800e29c:	4a7b      	ldr	r2, [pc, #492]	@ (800e48c <__ieee754_rem_pio2f+0x2b4>)
 800e29e:	4590      	cmp	r8, r2
 800e2a0:	f200 8095 	bhi.w	800e3ce <__ieee754_rem_pio2f+0x1f6>
 800e2a4:	f000 f8fe 	bl	800e4a4 <fabsf>
 800e2a8:	4979      	ldr	r1, [pc, #484]	@ (800e490 <__ieee754_rem_pio2f+0x2b8>)
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	f7f2 fd54 	bl	8000d58 <__aeabi_fmul>
 800e2b0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e2b4:	f7f2 fc48 	bl	8000b48 <__addsf3>
 800e2b8:	f7f2 ff14 	bl	80010e4 <__aeabi_f2iz>
 800e2bc:	4605      	mov	r5, r0
 800e2be:	f7f2 fcf7 	bl	8000cb0 <__aeabi_i2f>
 800e2c2:	496d      	ldr	r1, [pc, #436]	@ (800e478 <__ieee754_rem_pio2f+0x2a0>)
 800e2c4:	4681      	mov	r9, r0
 800e2c6:	f7f2 fd47 	bl	8000d58 <__aeabi_fmul>
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f7f2 fc39 	bl	8000b44 <__aeabi_fsub>
 800e2d2:	496b      	ldr	r1, [pc, #428]	@ (800e480 <__ieee754_rem_pio2f+0x2a8>)
 800e2d4:	4607      	mov	r7, r0
 800e2d6:	4648      	mov	r0, r9
 800e2d8:	f7f2 fd3e 	bl	8000d58 <__aeabi_fmul>
 800e2dc:	2d1f      	cmp	r5, #31
 800e2de:	4606      	mov	r6, r0
 800e2e0:	dc0e      	bgt.n	800e300 <__ieee754_rem_pio2f+0x128>
 800e2e2:	4a6c      	ldr	r2, [pc, #432]	@ (800e494 <__ieee754_rem_pio2f+0x2bc>)
 800e2e4:	1e69      	subs	r1, r5, #1
 800e2e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e2ea:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800e2ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d004      	beq.n	800e300 <__ieee754_rem_pio2f+0x128>
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	f7f2 fc23 	bl	8000b44 <__aeabi_fsub>
 800e2fe:	e00b      	b.n	800e318 <__ieee754_rem_pio2f+0x140>
 800e300:	4631      	mov	r1, r6
 800e302:	4638      	mov	r0, r7
 800e304:	f7f2 fc1e 	bl	8000b44 <__aeabi_fsub>
 800e308:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e30c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800e310:	2b08      	cmp	r3, #8
 800e312:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800e316:	dc01      	bgt.n	800e31c <__ieee754_rem_pio2f+0x144>
 800e318:	6020      	str	r0, [r4, #0]
 800e31a:	e026      	b.n	800e36a <__ieee754_rem_pio2f+0x192>
 800e31c:	4959      	ldr	r1, [pc, #356]	@ (800e484 <__ieee754_rem_pio2f+0x2ac>)
 800e31e:	4648      	mov	r0, r9
 800e320:	f7f2 fd1a 	bl	8000d58 <__aeabi_fmul>
 800e324:	4606      	mov	r6, r0
 800e326:	4601      	mov	r1, r0
 800e328:	4638      	mov	r0, r7
 800e32a:	f7f2 fc0b 	bl	8000b44 <__aeabi_fsub>
 800e32e:	4601      	mov	r1, r0
 800e330:	4680      	mov	r8, r0
 800e332:	4638      	mov	r0, r7
 800e334:	f7f2 fc06 	bl	8000b44 <__aeabi_fsub>
 800e338:	4631      	mov	r1, r6
 800e33a:	f7f2 fc03 	bl	8000b44 <__aeabi_fsub>
 800e33e:	4606      	mov	r6, r0
 800e340:	4951      	ldr	r1, [pc, #324]	@ (800e488 <__ieee754_rem_pio2f+0x2b0>)
 800e342:	4648      	mov	r0, r9
 800e344:	f7f2 fd08 	bl	8000d58 <__aeabi_fmul>
 800e348:	4631      	mov	r1, r6
 800e34a:	f7f2 fbfb 	bl	8000b44 <__aeabi_fsub>
 800e34e:	4601      	mov	r1, r0
 800e350:	4606      	mov	r6, r0
 800e352:	4640      	mov	r0, r8
 800e354:	f7f2 fbf6 	bl	8000b44 <__aeabi_fsub>
 800e358:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e35c:	ebab 0b03 	sub.w	fp, fp, r3
 800e360:	f1bb 0f19 	cmp.w	fp, #25
 800e364:	dc18      	bgt.n	800e398 <__ieee754_rem_pio2f+0x1c0>
 800e366:	4647      	mov	r7, r8
 800e368:	6020      	str	r0, [r4, #0]
 800e36a:	f8d4 8000 	ldr.w	r8, [r4]
 800e36e:	4638      	mov	r0, r7
 800e370:	4641      	mov	r1, r8
 800e372:	f7f2 fbe7 	bl	8000b44 <__aeabi_fsub>
 800e376:	4631      	mov	r1, r6
 800e378:	f7f2 fbe4 	bl	8000b44 <__aeabi_fsub>
 800e37c:	f1ba 0f00 	cmp.w	sl, #0
 800e380:	6060      	str	r0, [r4, #4]
 800e382:	f6bf af56 	bge.w	800e232 <__ieee754_rem_pio2f+0x5a>
 800e386:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800e38a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e38e:	f8c4 8000 	str.w	r8, [r4]
 800e392:	6060      	str	r0, [r4, #4]
 800e394:	426d      	negs	r5, r5
 800e396:	e74c      	b.n	800e232 <__ieee754_rem_pio2f+0x5a>
 800e398:	493f      	ldr	r1, [pc, #252]	@ (800e498 <__ieee754_rem_pio2f+0x2c0>)
 800e39a:	4648      	mov	r0, r9
 800e39c:	f7f2 fcdc 	bl	8000d58 <__aeabi_fmul>
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	4601      	mov	r1, r0
 800e3a4:	4640      	mov	r0, r8
 800e3a6:	f7f2 fbcd 	bl	8000b44 <__aeabi_fsub>
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	f7f2 fbc8 	bl	8000b44 <__aeabi_fsub>
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	f7f2 fbc5 	bl	8000b44 <__aeabi_fsub>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	4937      	ldr	r1, [pc, #220]	@ (800e49c <__ieee754_rem_pio2f+0x2c4>)
 800e3be:	4648      	mov	r0, r9
 800e3c0:	f7f2 fcca 	bl	8000d58 <__aeabi_fmul>
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	f7f2 fbbd 	bl	8000b44 <__aeabi_fsub>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	e793      	b.n	800e2f6 <__ieee754_rem_pio2f+0x11e>
 800e3ce:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e3d2:	d305      	bcc.n	800e3e0 <__ieee754_rem_pio2f+0x208>
 800e3d4:	4601      	mov	r1, r0
 800e3d6:	f7f2 fbb5 	bl	8000b44 <__aeabi_fsub>
 800e3da:	6060      	str	r0, [r4, #4]
 800e3dc:	6020      	str	r0, [r4, #0]
 800e3de:	e708      	b.n	800e1f2 <__ieee754_rem_pio2f+0x1a>
 800e3e0:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800e3e4:	3e86      	subs	r6, #134	@ 0x86
 800e3e6:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800e3ea:	4640      	mov	r0, r8
 800e3ec:	f7f2 fe7a 	bl	80010e4 <__aeabi_f2iz>
 800e3f0:	f7f2 fc5e 	bl	8000cb0 <__aeabi_i2f>
 800e3f4:	4601      	mov	r1, r0
 800e3f6:	9003      	str	r0, [sp, #12]
 800e3f8:	4640      	mov	r0, r8
 800e3fa:	f7f2 fba3 	bl	8000b44 <__aeabi_fsub>
 800e3fe:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e402:	f7f2 fca9 	bl	8000d58 <__aeabi_fmul>
 800e406:	4607      	mov	r7, r0
 800e408:	f7f2 fe6c 	bl	80010e4 <__aeabi_f2iz>
 800e40c:	f7f2 fc50 	bl	8000cb0 <__aeabi_i2f>
 800e410:	4601      	mov	r1, r0
 800e412:	9004      	str	r0, [sp, #16]
 800e414:	4605      	mov	r5, r0
 800e416:	4638      	mov	r0, r7
 800e418:	f7f2 fb94 	bl	8000b44 <__aeabi_fsub>
 800e41c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e420:	f7f2 fc9a 	bl	8000d58 <__aeabi_fmul>
 800e424:	2100      	movs	r1, #0
 800e426:	9005      	str	r0, [sp, #20]
 800e428:	f7f2 fe2a 	bl	8001080 <__aeabi_fcmpeq>
 800e42c:	b1f0      	cbz	r0, 800e46c <__ieee754_rem_pio2f+0x294>
 800e42e:	2100      	movs	r1, #0
 800e430:	4628      	mov	r0, r5
 800e432:	f7f2 fe25 	bl	8001080 <__aeabi_fcmpeq>
 800e436:	2800      	cmp	r0, #0
 800e438:	bf14      	ite	ne
 800e43a:	2301      	movne	r3, #1
 800e43c:	2302      	moveq	r3, #2
 800e43e:	4a18      	ldr	r2, [pc, #96]	@ (800e4a0 <__ieee754_rem_pio2f+0x2c8>)
 800e440:	4621      	mov	r1, r4
 800e442:	9201      	str	r2, [sp, #4]
 800e444:	2202      	movs	r2, #2
 800e446:	a803      	add	r0, sp, #12
 800e448:	9200      	str	r2, [sp, #0]
 800e44a:	4632      	mov	r2, r6
 800e44c:	f000 f82e 	bl	800e4ac <__kernel_rem_pio2f>
 800e450:	f1ba 0f00 	cmp.w	sl, #0
 800e454:	4605      	mov	r5, r0
 800e456:	f6bf aeec 	bge.w	800e232 <__ieee754_rem_pio2f+0x5a>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	6863      	ldr	r3, [r4, #4]
 800e464:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e468:	6063      	str	r3, [r4, #4]
 800e46a:	e793      	b.n	800e394 <__ieee754_rem_pio2f+0x1bc>
 800e46c:	2303      	movs	r3, #3
 800e46e:	e7e6      	b.n	800e43e <__ieee754_rem_pio2f+0x266>
 800e470:	3f490fd8 	.word	0x3f490fd8
 800e474:	4016cbe3 	.word	0x4016cbe3
 800e478:	3fc90f80 	.word	0x3fc90f80
 800e47c:	3fc90fd0 	.word	0x3fc90fd0
 800e480:	37354443 	.word	0x37354443
 800e484:	37354400 	.word	0x37354400
 800e488:	2e85a308 	.word	0x2e85a308
 800e48c:	43490f80 	.word	0x43490f80
 800e490:	3f22f984 	.word	0x3f22f984
 800e494:	08010320 	.word	0x08010320
 800e498:	2e85a300 	.word	0x2e85a300
 800e49c:	248d3132 	.word	0x248d3132
 800e4a0:	080103a0 	.word	0x080103a0

0800e4a4 <fabsf>:
 800e4a4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e4a8:	4770      	bx	lr
	...

0800e4ac <__kernel_rem_pio2f>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	b0db      	sub	sp, #364	@ 0x16c
 800e4b2:	9202      	str	r2, [sp, #8]
 800e4b4:	9304      	str	r3, [sp, #16]
 800e4b6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800e4b8:	4bac      	ldr	r3, [pc, #688]	@ (800e76c <__kernel_rem_pio2f+0x2c0>)
 800e4ba:	9005      	str	r0, [sp, #20]
 800e4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c0:	9100      	str	r1, [sp, #0]
 800e4c2:	9301      	str	r3, [sp, #4]
 800e4c4:	9b04      	ldr	r3, [sp, #16]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	9303      	str	r3, [sp, #12]
 800e4ca:	9b02      	ldr	r3, [sp, #8]
 800e4cc:	1d1a      	adds	r2, r3, #4
 800e4ce:	f2c0 8099 	blt.w	800e604 <__kernel_rem_pio2f+0x158>
 800e4d2:	1edc      	subs	r4, r3, #3
 800e4d4:	bf48      	it	mi
 800e4d6:	1d1c      	addmi	r4, r3, #4
 800e4d8:	10e4      	asrs	r4, r4, #3
 800e4da:	2500      	movs	r5, #0
 800e4dc:	f04f 0b00 	mov.w	fp, #0
 800e4e0:	1c67      	adds	r7, r4, #1
 800e4e2:	00fb      	lsls	r3, r7, #3
 800e4e4:	9306      	str	r3, [sp, #24]
 800e4e6:	9b02      	ldr	r3, [sp, #8]
 800e4e8:	9a03      	ldr	r2, [sp, #12]
 800e4ea:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	eba4 0802 	sub.w	r8, r4, r2
 800e4f4:	eb03 0902 	add.w	r9, r3, r2
 800e4f8:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800e4fa:	ae1e      	add	r6, sp, #120	@ 0x78
 800e4fc:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800e500:	454d      	cmp	r5, r9
 800e502:	f340 8081 	ble.w	800e608 <__kernel_rem_pio2f+0x15c>
 800e506:	9a04      	ldr	r2, [sp, #16]
 800e508:	ab1e      	add	r3, sp, #120	@ 0x78
 800e50a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800e50e:	f04f 0900 	mov.w	r9, #0
 800e512:	2300      	movs	r3, #0
 800e514:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800e518:	9a01      	ldr	r2, [sp, #4]
 800e51a:	4591      	cmp	r9, r2
 800e51c:	f340 809a 	ble.w	800e654 <__kernel_rem_pio2f+0x1a8>
 800e520:	4613      	mov	r3, r2
 800e522:	aa0a      	add	r2, sp, #40	@ 0x28
 800e524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800e52c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e530:	9c01      	ldr	r4, [sp, #4]
 800e532:	9307      	str	r3, [sp, #28]
 800e534:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800e538:	4646      	mov	r6, r8
 800e53a:	4625      	mov	r5, r4
 800e53c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800e540:	ab5a      	add	r3, sp, #360	@ 0x168
 800e542:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e546:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800e54a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800e54e:	2d00      	cmp	r5, #0
 800e550:	f300 8085 	bgt.w	800e65e <__kernel_rem_pio2f+0x1b2>
 800e554:	4639      	mov	r1, r7
 800e556:	4658      	mov	r0, fp
 800e558:	f000 fa46 	bl	800e9e8 <scalbnf>
 800e55c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800e560:	4605      	mov	r5, r0
 800e562:	f7f2 fbf9 	bl	8000d58 <__aeabi_fmul>
 800e566:	f000 fa8b 	bl	800ea80 <floorf>
 800e56a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800e56e:	f7f2 fbf3 	bl	8000d58 <__aeabi_fmul>
 800e572:	4601      	mov	r1, r0
 800e574:	4628      	mov	r0, r5
 800e576:	f7f2 fae5 	bl	8000b44 <__aeabi_fsub>
 800e57a:	4605      	mov	r5, r0
 800e57c:	f7f2 fdb2 	bl	80010e4 <__aeabi_f2iz>
 800e580:	4606      	mov	r6, r0
 800e582:	f7f2 fb95 	bl	8000cb0 <__aeabi_i2f>
 800e586:	4601      	mov	r1, r0
 800e588:	4628      	mov	r0, r5
 800e58a:	f7f2 fadb 	bl	8000b44 <__aeabi_fsub>
 800e58e:	2f00      	cmp	r7, #0
 800e590:	4681      	mov	r9, r0
 800e592:	f340 8081 	ble.w	800e698 <__kernel_rem_pio2f+0x1ec>
 800e596:	1e62      	subs	r2, r4, #1
 800e598:	ab0a      	add	r3, sp, #40	@ 0x28
 800e59a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e59e:	f1c7 0108 	rsb	r1, r7, #8
 800e5a2:	fa45 f301 	asr.w	r3, r5, r1
 800e5a6:	441e      	add	r6, r3
 800e5a8:	408b      	lsls	r3, r1
 800e5aa:	1aed      	subs	r5, r5, r3
 800e5ac:	ab0a      	add	r3, sp, #40	@ 0x28
 800e5ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e5b2:	f1c7 0307 	rsb	r3, r7, #7
 800e5b6:	411d      	asrs	r5, r3
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	dd7a      	ble.n	800e6b2 <__kernel_rem_pio2f+0x206>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4692      	mov	sl, r2
 800e5c0:	3601      	adds	r6, #1
 800e5c2:	4294      	cmp	r4, r2
 800e5c4:	f300 80aa 	bgt.w	800e71c <__kernel_rem_pio2f+0x270>
 800e5c8:	2f00      	cmp	r7, #0
 800e5ca:	dd05      	ble.n	800e5d8 <__kernel_rem_pio2f+0x12c>
 800e5cc:	2f01      	cmp	r7, #1
 800e5ce:	f000 80b6 	beq.w	800e73e <__kernel_rem_pio2f+0x292>
 800e5d2:	2f02      	cmp	r7, #2
 800e5d4:	f000 80bd 	beq.w	800e752 <__kernel_rem_pio2f+0x2a6>
 800e5d8:	2d02      	cmp	r5, #2
 800e5da:	d16a      	bne.n	800e6b2 <__kernel_rem_pio2f+0x206>
 800e5dc:	4649      	mov	r1, r9
 800e5de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e5e2:	f7f2 faaf 	bl	8000b44 <__aeabi_fsub>
 800e5e6:	4681      	mov	r9, r0
 800e5e8:	f1ba 0f00 	cmp.w	sl, #0
 800e5ec:	d061      	beq.n	800e6b2 <__kernel_rem_pio2f+0x206>
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e5f4:	f000 f9f8 	bl	800e9e8 <scalbnf>
 800e5f8:	4601      	mov	r1, r0
 800e5fa:	4648      	mov	r0, r9
 800e5fc:	f7f2 faa2 	bl	8000b44 <__aeabi_fsub>
 800e600:	4681      	mov	r9, r0
 800e602:	e056      	b.n	800e6b2 <__kernel_rem_pio2f+0x206>
 800e604:	2400      	movs	r4, #0
 800e606:	e768      	b.n	800e4da <__kernel_rem_pio2f+0x2e>
 800e608:	eb18 0f05 	cmn.w	r8, r5
 800e60c:	d407      	bmi.n	800e61e <__kernel_rem_pio2f+0x172>
 800e60e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800e612:	f7f2 fb4d 	bl	8000cb0 <__aeabi_i2f>
 800e616:	f846 0b04 	str.w	r0, [r6], #4
 800e61a:	3501      	adds	r5, #1
 800e61c:	e770      	b.n	800e500 <__kernel_rem_pio2f+0x54>
 800e61e:	4658      	mov	r0, fp
 800e620:	e7f9      	b.n	800e616 <__kernel_rem_pio2f+0x16a>
 800e622:	9307      	str	r3, [sp, #28]
 800e624:	9b05      	ldr	r3, [sp, #20]
 800e626:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800e62a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e62e:	f7f2 fb93 	bl	8000d58 <__aeabi_fmul>
 800e632:	4601      	mov	r1, r0
 800e634:	4630      	mov	r0, r6
 800e636:	f7f2 fa87 	bl	8000b48 <__addsf3>
 800e63a:	4606      	mov	r6, r0
 800e63c:	9b07      	ldr	r3, [sp, #28]
 800e63e:	f108 0801 	add.w	r8, r8, #1
 800e642:	9a03      	ldr	r2, [sp, #12]
 800e644:	4590      	cmp	r8, r2
 800e646:	ddec      	ble.n	800e622 <__kernel_rem_pio2f+0x176>
 800e648:	f84a 6b04 	str.w	r6, [sl], #4
 800e64c:	f109 0901 	add.w	r9, r9, #1
 800e650:	3504      	adds	r5, #4
 800e652:	e761      	b.n	800e518 <__kernel_rem_pio2f+0x6c>
 800e654:	46ab      	mov	fp, r5
 800e656:	461e      	mov	r6, r3
 800e658:	f04f 0800 	mov.w	r8, #0
 800e65c:	e7f1      	b.n	800e642 <__kernel_rem_pio2f+0x196>
 800e65e:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800e662:	4658      	mov	r0, fp
 800e664:	f7f2 fb78 	bl	8000d58 <__aeabi_fmul>
 800e668:	f7f2 fd3c 	bl	80010e4 <__aeabi_f2iz>
 800e66c:	f7f2 fb20 	bl	8000cb0 <__aeabi_i2f>
 800e670:	4649      	mov	r1, r9
 800e672:	9009      	str	r0, [sp, #36]	@ 0x24
 800e674:	f7f2 fb70 	bl	8000d58 <__aeabi_fmul>
 800e678:	4601      	mov	r1, r0
 800e67a:	4658      	mov	r0, fp
 800e67c:	f7f2 fa62 	bl	8000b44 <__aeabi_fsub>
 800e680:	f7f2 fd30 	bl	80010e4 <__aeabi_f2iz>
 800e684:	3d01      	subs	r5, #1
 800e686:	f846 0b04 	str.w	r0, [r6], #4
 800e68a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800e68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e690:	f7f2 fa5a 	bl	8000b48 <__addsf3>
 800e694:	4683      	mov	fp, r0
 800e696:	e75a      	b.n	800e54e <__kernel_rem_pio2f+0xa2>
 800e698:	d105      	bne.n	800e6a6 <__kernel_rem_pio2f+0x1fa>
 800e69a:	1e63      	subs	r3, r4, #1
 800e69c:	aa0a      	add	r2, sp, #40	@ 0x28
 800e69e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800e6a2:	11ed      	asrs	r5, r5, #7
 800e6a4:	e788      	b.n	800e5b8 <__kernel_rem_pio2f+0x10c>
 800e6a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e6aa:	f7f2 fd07 	bl	80010bc <__aeabi_fcmpge>
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	bb90      	cbnz	r0, 800e718 <__kernel_rem_pio2f+0x26c>
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4648      	mov	r0, r9
 800e6b6:	f7f2 fce3 	bl	8001080 <__aeabi_fcmpeq>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	f000 8090 	beq.w	800e7e0 <__kernel_rem_pio2f+0x334>
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	1e63      	subs	r3, r4, #1
 800e6c4:	9901      	ldr	r1, [sp, #4]
 800e6c6:	428b      	cmp	r3, r1
 800e6c8:	da4a      	bge.n	800e760 <__kernel_rem_pio2f+0x2b4>
 800e6ca:	2a00      	cmp	r2, #0
 800e6cc:	d076      	beq.n	800e7bc <__kernel_rem_pio2f+0x310>
 800e6ce:	3c01      	subs	r4, #1
 800e6d0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e6d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e6d6:	3f08      	subs	r7, #8
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0f8      	beq.n	800e6ce <__kernel_rem_pio2f+0x222>
 800e6dc:	4639      	mov	r1, r7
 800e6de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e6e2:	f000 f981 	bl	800e9e8 <scalbnf>
 800e6e6:	46a2      	mov	sl, r4
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800e6ee:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800e6f2:	f1ba 0f00 	cmp.w	sl, #0
 800e6f6:	f280 80a1 	bge.w	800e83c <__kernel_rem_pio2f+0x390>
 800e6fa:	4627      	mov	r7, r4
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2f00      	cmp	r7, #0
 800e700:	f2c0 80cb 	blt.w	800e89a <__kernel_rem_pio2f+0x3ee>
 800e704:	a946      	add	r1, sp, #280	@ 0x118
 800e706:	4690      	mov	r8, r2
 800e708:	f04f 0a00 	mov.w	sl, #0
 800e70c:	4b18      	ldr	r3, [pc, #96]	@ (800e770 <__kernel_rem_pio2f+0x2c4>)
 800e70e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800e712:	eba4 0907 	sub.w	r9, r4, r7
 800e716:	e0b4      	b.n	800e882 <__kernel_rem_pio2f+0x3d6>
 800e718:	2502      	movs	r5, #2
 800e71a:	e74f      	b.n	800e5bc <__kernel_rem_pio2f+0x110>
 800e71c:	f858 3b04 	ldr.w	r3, [r8], #4
 800e720:	f1ba 0f00 	cmp.w	sl, #0
 800e724:	d108      	bne.n	800e738 <__kernel_rem_pio2f+0x28c>
 800e726:	b123      	cbz	r3, 800e732 <__kernel_rem_pio2f+0x286>
 800e728:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800e72c:	f848 3c04 	str.w	r3, [r8, #-4]
 800e730:	2301      	movs	r3, #1
 800e732:	469a      	mov	sl, r3
 800e734:	3201      	adds	r2, #1
 800e736:	e744      	b.n	800e5c2 <__kernel_rem_pio2f+0x116>
 800e738:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800e73c:	e7f6      	b.n	800e72c <__kernel_rem_pio2f+0x280>
 800e73e:	1e62      	subs	r2, r4, #1
 800e740:	ab0a      	add	r3, sp, #40	@ 0x28
 800e742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e74a:	a90a      	add	r1, sp, #40	@ 0x28
 800e74c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e750:	e742      	b.n	800e5d8 <__kernel_rem_pio2f+0x12c>
 800e752:	1e62      	subs	r2, r4, #1
 800e754:	ab0a      	add	r3, sp, #40	@ 0x28
 800e756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e75a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e75e:	e7f4      	b.n	800e74a <__kernel_rem_pio2f+0x29e>
 800e760:	a90a      	add	r1, sp, #40	@ 0x28
 800e762:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e766:	3b01      	subs	r3, #1
 800e768:	430a      	orrs	r2, r1
 800e76a:	e7ab      	b.n	800e6c4 <__kernel_rem_pio2f+0x218>
 800e76c:	080106e4 	.word	0x080106e4
 800e770:	080106b8 	.word	0x080106b8
 800e774:	3301      	adds	r3, #1
 800e776:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e77a:	2900      	cmp	r1, #0
 800e77c:	d0fa      	beq.n	800e774 <__kernel_rem_pio2f+0x2c8>
 800e77e:	9a04      	ldr	r2, [sp, #16]
 800e780:	a91e      	add	r1, sp, #120	@ 0x78
 800e782:	18a2      	adds	r2, r4, r2
 800e784:	1c66      	adds	r6, r4, #1
 800e786:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800e78a:	441c      	add	r4, r3
 800e78c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800e790:	42b4      	cmp	r4, r6
 800e792:	f6ff aecf 	blt.w	800e534 <__kernel_rem_pio2f+0x88>
 800e796:	9b07      	ldr	r3, [sp, #28]
 800e798:	46ab      	mov	fp, r5
 800e79a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e79e:	f7f2 fa87 	bl	8000cb0 <__aeabi_i2f>
 800e7a2:	f04f 0a00 	mov.w	sl, #0
 800e7a6:	f04f 0800 	mov.w	r8, #0
 800e7aa:	6028      	str	r0, [r5, #0]
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	459a      	cmp	sl, r3
 800e7b0:	dd07      	ble.n	800e7c2 <__kernel_rem_pio2f+0x316>
 800e7b2:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800e7b6:	3504      	adds	r5, #4
 800e7b8:	3601      	adds	r6, #1
 800e7ba:	e7e9      	b.n	800e790 <__kernel_rem_pio2f+0x2e4>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	9a08      	ldr	r2, [sp, #32]
 800e7c0:	e7d9      	b.n	800e776 <__kernel_rem_pio2f+0x2ca>
 800e7c2:	9b05      	ldr	r3, [sp, #20]
 800e7c4:	f85b 0904 	ldr.w	r0, [fp], #-4
 800e7c8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e7cc:	f7f2 fac4 	bl	8000d58 <__aeabi_fmul>
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f7f2 f9b8 	bl	8000b48 <__addsf3>
 800e7d8:	f10a 0a01 	add.w	sl, sl, #1
 800e7dc:	4680      	mov	r8, r0
 800e7de:	e7e5      	b.n	800e7ac <__kernel_rem_pio2f+0x300>
 800e7e0:	9b06      	ldr	r3, [sp, #24]
 800e7e2:	9a02      	ldr	r2, [sp, #8]
 800e7e4:	4648      	mov	r0, r9
 800e7e6:	1a99      	subs	r1, r3, r2
 800e7e8:	f000 f8fe 	bl	800e9e8 <scalbnf>
 800e7ec:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e7f0:	4680      	mov	r8, r0
 800e7f2:	f7f2 fc63 	bl	80010bc <__aeabi_fcmpge>
 800e7f6:	b1f8      	cbz	r0, 800e838 <__kernel_rem_pio2f+0x38c>
 800e7f8:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800e7fc:	4640      	mov	r0, r8
 800e7fe:	f7f2 faab 	bl	8000d58 <__aeabi_fmul>
 800e802:	f7f2 fc6f 	bl	80010e4 <__aeabi_f2iz>
 800e806:	f7f2 fa53 	bl	8000cb0 <__aeabi_i2f>
 800e80a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e80e:	4681      	mov	r9, r0
 800e810:	f7f2 faa2 	bl	8000d58 <__aeabi_fmul>
 800e814:	4601      	mov	r1, r0
 800e816:	4640      	mov	r0, r8
 800e818:	f7f2 f994 	bl	8000b44 <__aeabi_fsub>
 800e81c:	f7f2 fc62 	bl	80010e4 <__aeabi_f2iz>
 800e820:	ab0a      	add	r3, sp, #40	@ 0x28
 800e822:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e826:	4648      	mov	r0, r9
 800e828:	3401      	adds	r4, #1
 800e82a:	3708      	adds	r7, #8
 800e82c:	f7f2 fc5a 	bl	80010e4 <__aeabi_f2iz>
 800e830:	ab0a      	add	r3, sp, #40	@ 0x28
 800e832:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e836:	e751      	b.n	800e6dc <__kernel_rem_pio2f+0x230>
 800e838:	4640      	mov	r0, r8
 800e83a:	e7f7      	b.n	800e82c <__kernel_rem_pio2f+0x380>
 800e83c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e83e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e842:	f7f2 fa35 	bl	8000cb0 <__aeabi_i2f>
 800e846:	4639      	mov	r1, r7
 800e848:	f7f2 fa86 	bl	8000d58 <__aeabi_fmul>
 800e84c:	4649      	mov	r1, r9
 800e84e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800e852:	4638      	mov	r0, r7
 800e854:	f7f2 fa80 	bl	8000d58 <__aeabi_fmul>
 800e858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e85c:	4607      	mov	r7, r0
 800e85e:	e748      	b.n	800e6f2 <__kernel_rem_pio2f+0x246>
 800e860:	f853 0b04 	ldr.w	r0, [r3], #4
 800e864:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e868:	9203      	str	r2, [sp, #12]
 800e86a:	9302      	str	r3, [sp, #8]
 800e86c:	f7f2 fa74 	bl	8000d58 <__aeabi_fmul>
 800e870:	4601      	mov	r1, r0
 800e872:	4640      	mov	r0, r8
 800e874:	f7f2 f968 	bl	8000b48 <__addsf3>
 800e878:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e87c:	4680      	mov	r8, r0
 800e87e:	f10a 0a01 	add.w	sl, sl, #1
 800e882:	9901      	ldr	r1, [sp, #4]
 800e884:	458a      	cmp	sl, r1
 800e886:	dc01      	bgt.n	800e88c <__kernel_rem_pio2f+0x3e0>
 800e888:	45ca      	cmp	sl, r9
 800e88a:	dde9      	ble.n	800e860 <__kernel_rem_pio2f+0x3b4>
 800e88c:	ab5a      	add	r3, sp, #360	@ 0x168
 800e88e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800e892:	f849 8ca0 	str.w	r8, [r9, #-160]
 800e896:	3f01      	subs	r7, #1
 800e898:	e731      	b.n	800e6fe <__kernel_rem_pio2f+0x252>
 800e89a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	dc07      	bgt.n	800e8b0 <__kernel_rem_pio2f+0x404>
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dc4e      	bgt.n	800e942 <__kernel_rem_pio2f+0x496>
 800e8a4:	d02e      	beq.n	800e904 <__kernel_rem_pio2f+0x458>
 800e8a6:	f006 0007 	and.w	r0, r6, #7
 800e8aa:	b05b      	add	sp, #364	@ 0x16c
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d1f7      	bne.n	800e8a6 <__kernel_rem_pio2f+0x3fa>
 800e8b6:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800e8ba:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800e8be:	46b8      	mov	r8, r7
 800e8c0:	46a2      	mov	sl, r4
 800e8c2:	f1ba 0f00 	cmp.w	sl, #0
 800e8c6:	dc49      	bgt.n	800e95c <__kernel_rem_pio2f+0x4b0>
 800e8c8:	46a1      	mov	r9, r4
 800e8ca:	f1b9 0f01 	cmp.w	r9, #1
 800e8ce:	dc60      	bgt.n	800e992 <__kernel_rem_pio2f+0x4e6>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	2c01      	cmp	r4, #1
 800e8d4:	dc76      	bgt.n	800e9c4 <__kernel_rem_pio2f+0x518>
 800e8d6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800e8d8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800e8da:	2d00      	cmp	r5, #0
 800e8dc:	d178      	bne.n	800e9d0 <__kernel_rem_pio2f+0x524>
 800e8de:	9900      	ldr	r1, [sp, #0]
 800e8e0:	600a      	str	r2, [r1, #0]
 800e8e2:	460a      	mov	r2, r1
 800e8e4:	604b      	str	r3, [r1, #4]
 800e8e6:	6090      	str	r0, [r2, #8]
 800e8e8:	e7dd      	b.n	800e8a6 <__kernel_rem_pio2f+0x3fa>
 800e8ea:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800e8ee:	f7f2 f92b 	bl	8000b48 <__addsf3>
 800e8f2:	3c01      	subs	r4, #1
 800e8f4:	2c00      	cmp	r4, #0
 800e8f6:	daf8      	bge.n	800e8ea <__kernel_rem_pio2f+0x43e>
 800e8f8:	b10d      	cbz	r5, 800e8fe <__kernel_rem_pio2f+0x452>
 800e8fa:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e8fe:	9b00      	ldr	r3, [sp, #0]
 800e900:	6018      	str	r0, [r3, #0]
 800e902:	e7d0      	b.n	800e8a6 <__kernel_rem_pio2f+0x3fa>
 800e904:	2000      	movs	r0, #0
 800e906:	af32      	add	r7, sp, #200	@ 0xc8
 800e908:	e7f4      	b.n	800e8f4 <__kernel_rem_pio2f+0x448>
 800e90a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800e90e:	f7f2 f91b 	bl	8000b48 <__addsf3>
 800e912:	f108 38ff 	add.w	r8, r8, #4294967295
 800e916:	f1b8 0f00 	cmp.w	r8, #0
 800e91a:	daf6      	bge.n	800e90a <__kernel_rem_pio2f+0x45e>
 800e91c:	b1ad      	cbz	r5, 800e94a <__kernel_rem_pio2f+0x49e>
 800e91e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800e922:	9a00      	ldr	r2, [sp, #0]
 800e924:	4601      	mov	r1, r0
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800e92a:	f7f2 f90b 	bl	8000b44 <__aeabi_fsub>
 800e92e:	f04f 0801 	mov.w	r8, #1
 800e932:	4544      	cmp	r4, r8
 800e934:	da0b      	bge.n	800e94e <__kernel_rem_pio2f+0x4a2>
 800e936:	b10d      	cbz	r5, 800e93c <__kernel_rem_pio2f+0x490>
 800e938:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	6058      	str	r0, [r3, #4]
 800e940:	e7b1      	b.n	800e8a6 <__kernel_rem_pio2f+0x3fa>
 800e942:	46a0      	mov	r8, r4
 800e944:	2000      	movs	r0, #0
 800e946:	af32      	add	r7, sp, #200	@ 0xc8
 800e948:	e7e5      	b.n	800e916 <__kernel_rem_pio2f+0x46a>
 800e94a:	4603      	mov	r3, r0
 800e94c:	e7e9      	b.n	800e922 <__kernel_rem_pio2f+0x476>
 800e94e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e952:	f7f2 f8f9 	bl	8000b48 <__addsf3>
 800e956:	f108 0801 	add.w	r8, r8, #1
 800e95a:	e7ea      	b.n	800e932 <__kernel_rem_pio2f+0x486>
 800e95c:	f8d8 3000 	ldr.w	r3, [r8]
 800e960:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	9302      	str	r3, [sp, #8]
 800e96a:	9201      	str	r2, [sp, #4]
 800e96c:	f7f2 f8ec 	bl	8000b48 <__addsf3>
 800e970:	9a01      	ldr	r2, [sp, #4]
 800e972:	4601      	mov	r1, r0
 800e974:	4681      	mov	r9, r0
 800e976:	4610      	mov	r0, r2
 800e978:	f7f2 f8e4 	bl	8000b44 <__aeabi_fsub>
 800e97c:	9b02      	ldr	r3, [sp, #8]
 800e97e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e982:	4619      	mov	r1, r3
 800e984:	f7f2 f8e0 	bl	8000b48 <__addsf3>
 800e988:	f848 0904 	str.w	r0, [r8], #-4
 800e98c:	f8c8 9000 	str.w	r9, [r8]
 800e990:	e797      	b.n	800e8c2 <__kernel_rem_pio2f+0x416>
 800e992:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e996:	f8d7 a000 	ldr.w	sl, [r7]
 800e99a:	4618      	mov	r0, r3
 800e99c:	4651      	mov	r1, sl
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	f7f2 f8d2 	bl	8000b48 <__addsf3>
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7f2 f8ca 	bl	8000b44 <__aeabi_fsub>
 800e9b0:	4651      	mov	r1, sl
 800e9b2:	f7f2 f8c9 	bl	8000b48 <__addsf3>
 800e9b6:	f847 0904 	str.w	r0, [r7], #-4
 800e9ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9be:	f8c7 8000 	str.w	r8, [r7]
 800e9c2:	e782      	b.n	800e8ca <__kernel_rem_pio2f+0x41e>
 800e9c4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800e9c8:	f7f2 f8be 	bl	8000b48 <__addsf3>
 800e9cc:	3c01      	subs	r4, #1
 800e9ce:	e780      	b.n	800e8d2 <__kernel_rem_pio2f+0x426>
 800e9d0:	9900      	ldr	r1, [sp, #0]
 800e9d2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800e9d6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e9da:	600a      	str	r2, [r1, #0]
 800e9dc:	604b      	str	r3, [r1, #4]
 800e9de:	460a      	mov	r2, r1
 800e9e0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e9e4:	e77f      	b.n	800e8e6 <__kernel_rem_pio2f+0x43a>
 800e9e6:	bf00      	nop

0800e9e8 <scalbnf>:
 800e9e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	460d      	mov	r5, r1
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	d02e      	beq.n	800ea54 <scalbnf+0x6c>
 800e9f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9fa:	d304      	bcc.n	800ea06 <scalbnf+0x1e>
 800e9fc:	4601      	mov	r1, r0
 800e9fe:	f7f2 f8a3 	bl	8000b48 <__addsf3>
 800ea02:	4603      	mov	r3, r0
 800ea04:	e026      	b.n	800ea54 <scalbnf+0x6c>
 800ea06:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800ea0a:	d118      	bne.n	800ea3e <scalbnf+0x56>
 800ea0c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800ea10:	f7f2 f9a2 	bl	8000d58 <__aeabi_fmul>
 800ea14:	4a17      	ldr	r2, [pc, #92]	@ (800ea74 <scalbnf+0x8c>)
 800ea16:	4603      	mov	r3, r0
 800ea18:	4295      	cmp	r5, r2
 800ea1a:	db0c      	blt.n	800ea36 <scalbnf+0x4e>
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ea22:	3a19      	subs	r2, #25
 800ea24:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea28:	428d      	cmp	r5, r1
 800ea2a:	dd0a      	ble.n	800ea42 <scalbnf+0x5a>
 800ea2c:	4912      	ldr	r1, [pc, #72]	@ (800ea78 <scalbnf+0x90>)
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f361 001e 	bfi	r0, r1, #0, #31
 800ea34:	e000      	b.n	800ea38 <scalbnf+0x50>
 800ea36:	4911      	ldr	r1, [pc, #68]	@ (800ea7c <scalbnf+0x94>)
 800ea38:	f7f2 f98e 	bl	8000d58 <__aeabi_fmul>
 800ea3c:	e7e1      	b.n	800ea02 <scalbnf+0x1a>
 800ea3e:	0dd2      	lsrs	r2, r2, #23
 800ea40:	e7f0      	b.n	800ea24 <scalbnf+0x3c>
 800ea42:	1951      	adds	r1, r2, r5
 800ea44:	29fe      	cmp	r1, #254	@ 0xfe
 800ea46:	dcf1      	bgt.n	800ea2c <scalbnf+0x44>
 800ea48:	2900      	cmp	r1, #0
 800ea4a:	dd05      	ble.n	800ea58 <scalbnf+0x70>
 800ea4c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ea50:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800ea54:	4618      	mov	r0, r3
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	f111 0f16 	cmn.w	r1, #22
 800ea5c:	da01      	bge.n	800ea62 <scalbnf+0x7a>
 800ea5e:	4907      	ldr	r1, [pc, #28]	@ (800ea7c <scalbnf+0x94>)
 800ea60:	e7e5      	b.n	800ea2e <scalbnf+0x46>
 800ea62:	f101 0019 	add.w	r0, r1, #25
 800ea66:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ea6a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800ea6e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ea72:	e7e1      	b.n	800ea38 <scalbnf+0x50>
 800ea74:	ffff3cb0 	.word	0xffff3cb0
 800ea78:	7149f2ca 	.word	0x7149f2ca
 800ea7c:	0da24260 	.word	0x0da24260

0800ea80 <floorf>:
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800ea86:	3d7f      	subs	r5, #127	@ 0x7f
 800ea88:	2d16      	cmp	r5, #22
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800ea92:	dc26      	bgt.n	800eae2 <floorf+0x62>
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	da0f      	bge.n	800eab8 <floorf+0x38>
 800ea98:	4917      	ldr	r1, [pc, #92]	@ (800eaf8 <floorf+0x78>)
 800ea9a:	f7f2 f855 	bl	8000b48 <__addsf3>
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	f7f2 fb16 	bl	80010d0 <__aeabi_fcmpgt>
 800eaa4:	b130      	cbz	r0, 800eab4 <floorf+0x34>
 800eaa6:	2c00      	cmp	r4, #0
 800eaa8:	da23      	bge.n	800eaf2 <floorf+0x72>
 800eaaa:	2e00      	cmp	r6, #0
 800eaac:	4c13      	ldr	r4, [pc, #76]	@ (800eafc <floorf+0x7c>)
 800eaae:	bf08      	it	eq
 800eab0:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800eab4:	4621      	mov	r1, r4
 800eab6:	e01a      	b.n	800eaee <floorf+0x6e>
 800eab8:	4e11      	ldr	r6, [pc, #68]	@ (800eb00 <floorf+0x80>)
 800eaba:	412e      	asrs	r6, r5
 800eabc:	4230      	tst	r0, r6
 800eabe:	d016      	beq.n	800eaee <floorf+0x6e>
 800eac0:	490d      	ldr	r1, [pc, #52]	@ (800eaf8 <floorf+0x78>)
 800eac2:	f7f2 f841 	bl	8000b48 <__addsf3>
 800eac6:	2100      	movs	r1, #0
 800eac8:	f7f2 fb02 	bl	80010d0 <__aeabi_fcmpgt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d0f1      	beq.n	800eab4 <floorf+0x34>
 800ead0:	2c00      	cmp	r4, #0
 800ead2:	bfbe      	ittt	lt
 800ead4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800ead8:	412b      	asrlt	r3, r5
 800eada:	18e4      	addlt	r4, r4, r3
 800eadc:	ea24 0406 	bic.w	r4, r4, r6
 800eae0:	e7e8      	b.n	800eab4 <floorf+0x34>
 800eae2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800eae6:	d302      	bcc.n	800eaee <floorf+0x6e>
 800eae8:	f7f2 f82e 	bl	8000b48 <__addsf3>
 800eaec:	4601      	mov	r1, r0
 800eaee:	4608      	mov	r0, r1
 800eaf0:	bd70      	pop	{r4, r5, r6, pc}
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	e7de      	b.n	800eab4 <floorf+0x34>
 800eaf6:	bf00      	nop
 800eaf8:	7149f2ca 	.word	0x7149f2ca
 800eafc:	bf800000 	.word	0xbf800000
 800eb00:	007fffff 	.word	0x007fffff

0800eb04 <_init>:
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb06:	bf00      	nop
 800eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0a:	bc08      	pop	{r3}
 800eb0c:	469e      	mov	lr, r3
 800eb0e:	4770      	bx	lr

0800eb10 <_fini>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	bf00      	nop
 800eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb16:	bc08      	pop	{r3}
 800eb18:	469e      	mov	lr, r3
 800eb1a:	4770      	bx	lr
